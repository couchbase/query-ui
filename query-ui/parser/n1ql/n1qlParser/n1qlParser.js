// Generated from n1ql.g4 by ANTLR 4.9.1
// jshint ignore: start
import antlr4 from './antlr4.js';
import n1qlListener from './n1qlListener.js';

const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u00f3\u0ac4\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
    "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
    "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
    "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
    "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004",
    "\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t",
    "\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004",
    "\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t",
    "\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004",
    "\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t",
    "\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004",
    "\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t",
    "\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004",
    "\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t",
    "\u00cb\u0004\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004",
    "\u00cf\t\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t",
    "\u00d2\u0004\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004",
    "\u00d6\t\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t",
    "\u00d9\u0004\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004",
    "\u00dd\t\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t",
    "\u00e0\u0004\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004",
    "\u00e4\t\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t",
    "\u00e7\u0004\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004",
    "\u00eb\t\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t",
    "\u00ee\u0004\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004",
    "\u00f2\t\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t",
    "\u00f5\u0004\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004",
    "\u00f9\t\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t",
    "\u00fc\u0004\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004",
    "\u0100\t\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u0209\n\u0002\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0007\u0003\u020e\n\u0003\f\u0003\u000e\u0003",
    "\u0211\u000b\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0005\u0004\u0218\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u0222\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0007\u0003\u0007\u0005\u0007\u022a\n\u0007\u0003\b\u0003\b\u0003\b",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0005\n\u0236",
    "\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005",
    "\u000b\u023d\n\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0248\n\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0253\n\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0012\u0003\u0012\u0005\u0012\u0259\n\u0012\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0265\n\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u026a\n\u0016\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u026e\n\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u0274\n\u0018\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u0278\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0005\u001a\u027d\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0005",
    "\u001b\u0282\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0005\u001c\u0289\n\u001c\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0298",
    "\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u02b7\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007",
    "\u001e\u02ce\n\u001e\f\u001e\u000e\u001e\u02d1\u000b\u001e\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u02d5\n\u001f\u0003 \u0003 \u0005 \u02d9\n",
    " \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003",
    "#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u02f6",
    "\n$\u0003%\u0003%\u0003%\u0005%\u02fb\n%\u0003&\u0003&\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u0305\n\'\f\'\u000e\'\u0308",
    "\u000b\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005",
    "(\u0312\n(\u0003)\u0003)\u0005)\u0316\n)\u0003*\u0003*\u0003*\u0005",
    "*\u031b\n*\u0003+\u0003+\u0003,\u0003,\u0005,\u0321\n,\u0003-\u0003",
    "-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0005.\u0330\n.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0007.\u0362\n.\f.\u000e.\u0365\u000b.\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0005/\u036c\n/\u00030\u00030\u00031\u00031\u00031\u0003",
    "1\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00052\u037e\n2\u00033\u00033\u00033\u00053\u0383\n3\u00034\u0003",
    "4\u00034\u00035\u00035\u00036\u00036\u00037\u00037\u00038\u00038\u0003",
    "8\u00058\u0391\n8\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u03a2\n9\u0003",
    ":\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0005<\u03b3\n<\u0003=\u0003=\u0005=\u03b7",
    "\n=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0007>\u03bf\n>\f>\u000e",
    ">\u03c2\u000b>\u0003?\u0003?\u0003?\u0003@\u0003@\u0003A\u0003A\u0003",
    "B\u0003B\u0003B\u0003B\u0005B\u03cf\nB\u0003C\u0003C\u0005C\u03d3\n",
    "C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0003F\u0003F\u0005F\u03e1\nF\u0003G\u0003G\u0003G\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0007H\u03ec\nH\fH\u000eH\u03ef\u000bH\u0003",
    "I\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0005J\u03f8\nJ\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0007K\u0400\nK\fK\u000eK\u0403\u000b",
    "K\u0003L\u0003L\u0003L\u0003L\u0003M\u0003M\u0005M\u040b\nM\u0003N\u0003",
    "N\u0003N\u0003O\u0003O\u0005O\u0412\nO\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0005P\u041b\nP\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0007Q\u0423\nQ\fQ\u000eQ\u0426\u000bQ\u0003R\u0003R\u0003R\u0003",
    "S\u0003S\u0005S\u042d\nS\u0003T\u0003T\u0003T\u0003U\u0003U\u0005U\u0434",
    "\nU\u0003V\u0003V\u0003V\u0003W\u0003W\u0005W\u043b\nW\u0003X\u0003",
    "X\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0007Y\u0447",
    "\nY\fY\u000eY\u044a\u000bY\u0003Z\u0003Z\u0003Z\u0003Z\u0003[\u0003",
    "[\u0005[\u0452\n[\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003]\u0005",
    "]\u045a\n]\u0003^\u0003^\u0003_\u0003_\u0003`\u0003`\u0005`\u0462\n",
    "`\u0003a\u0003a\u0003a\u0003b\u0003b\u0005b\u0469\nb\u0003c\u0003c\u0003",
    "c\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0005d\u047e\nd\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0003e\u0005e\u048d\ne\u0003f\u0003f\u0003f\u0003f\u0005f\u0493\n",
    "f\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0005g\u04a6\ng\u0003",
    "h\u0003h\u0003h\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0007i\u04b1",
    "\ni\fi\u000ei\u04b4\u000bi\u0003j\u0003j\u0003j\u0003j\u0005j\u04ba",
    "\nj\u0003k\u0003k\u0003k\u0005k\u04bf\nk\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003",
    "m\u0003n\u0003n\u0005n\u04d1\nn\u0003o\u0003o\u0003o\u0003p\u0003p\u0003",
    "p\u0003p\u0005p\u04da\np\u0003q\u0003q\u0003q\u0003r\u0003r\u0003r\u0003",
    "s\u0003s\u0003s\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0005t\u04f4\nt\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0005u\u0506\nu\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003w\u0003w\u0003w\u0003w\u0003",
    "w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003",
    "w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003",
    "w\u0005w\u0529\nw\u0003x\u0003x\u0003x\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0007y\u0534\ny\fy\u000ey\u0537\u000by\u0003z\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0005z\u0544",
    "\nz\u0003{\u0003{\u0003{\u0003{\u0003{\u0003|\u0003|\u0005|\u054d\n",
    "|\u0003}\u0003}\u0003}\u0003}\u0003~\u0003~\u0003~\u0003~\u0003~\u0003",
    "~\u0003~\u0007~\u055a\n~\f~\u000e~\u055d\u000b~\u0003\u007f\u0003\u007f",
    "\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0007\u007f\u0565\n",
    "\u007f\f\u007f\u000e\u007f\u0568\u000b\u007f\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080",
    "\u0005\u0080\u057e\n\u0080\u0003\u0081\u0003\u0081\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0005\u0082\u0585\n\u0082\u0003\u0083\u0003\u0083",
    "\u0003\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084",
    "\u0003\u0084\u0007\u0084\u0590\n\u0084\f\u0084\u000e\u0084\u0593\u000b",
    "\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0086\u0003\u0086\u0003",
    "\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003",
    "\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0087\u0003",
    "\u0087\u0003\u0088\u0003\u0088\u0005\u0088\u05a9\n\u0088\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0005\u0089\u05c0\n\u0089\u0003\u008a\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003",
    "\u008a\u0005\u008a\u05d0\n\u008a\u0003\u008b\u0003\u008b\u0003\u008b",
    "\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0005\u008b\u05d9\n",
    "\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003",
    "\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0005\u008c\u05e5",
    "\n\u008c\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0005\u008e",
    "\u05f7\n\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003",
    "\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003",
    "\u008f\u0003\u008f\u0005\u008f\u0605\n\u008f\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0007\u0090\u060d\n",
    "\u0090\f\u0090\u000e\u0090\u0610\u000b\u0090\u0003\u0091\u0003\u0091",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092",
    "\u0007\u0092\u061a\n\u0092\f\u0092\u000e\u0092\u061d\u000b\u0092\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0005\u0093\u0639\n\u0093\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0007\u0094\u0641\n",
    "\u0094\f\u0094\u000e\u0094\u0644\u000b\u0094\u0003\u0095\u0003\u0095",
    "\u0003\u0095\u0003\u0095\u0005\u0095\u064a\n\u0095\u0003\u0096\u0003",
    "\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003",
    "\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0005\u0096\u0658",
    "\n\u0096\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0098",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0003\u0099",
    "\u0003\u0099\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009b",
    "\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009c\u0003\u009c\u0003\u009d",
    "\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d",
    "\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d",
    "\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d",
    "\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0687\n",
    "\u009d\u0003\u009e\u0003\u009e\u0005\u009e\u068b\n\u009e\u0003\u009f",
    "\u0003\u009f\u0003\u00a0\u0003\u00a0\u0005\u00a0\u0691\n\u00a0\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u069d\n\u00a1",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0005\u00a2\u06a7\n\u00a2\u0003\u00a3\u0003",
    "\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003",
    "\u00a3\u0003\u00a3\u0005\u00a3\u06b2\n\u00a3\u0003\u00a4\u0003\u00a4",
    "\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4",
    "\u0005\u00a4\u06bc\n\u00a4\u0003\u00a5\u0003\u00a5\u0005\u00a5\u06c0",
    "\n\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6",
    "\u0003\u00a6\u0005\u00a6\u06c8\n\u00a6\u0003\u00a7\u0003\u00a7\u0005",
    "\u00a7\u06cc\n\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a9",
    "\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0007\u00a9",
    "\u06d7\n\u00a9\f\u00a9\u000e\u00a9\u06da\u000b\u00a9\u0003\u00aa\u0003",
    "\u00aa\u0003\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003",
    "\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0005",
    "\u00ab\u06e9\n\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae\u06f2\n\u00ae\u0003",
    "\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0005\u00af\u06f9",
    "\n\u00af\u0003\u00b0\u0003\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1",
    "\u0005\u00b1\u0712\n\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0005\u00b2\u0724\n\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4",
    "\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0005\u00b5\u073b\n\u00b5\u0003\u00b6\u0003\u00b6\u0005\u00b6\u073f",
    "\n\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0005\u00b8\u074d\n\u00b8\u0003\u00b9\u0003\u00b9\u0003",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u0754\n\u00b9\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0007\u00ba",
    "\u075c\n\u00ba\f\u00ba\u000e\u00ba\u075f\u000b\u00ba\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0005\u00bb\u0775\n\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bc",
    "\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd",
    "\u0003\u00bd\u0003\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u07fc\n",
    "\u00be\u0003\u00bf\u0003\u00bf\u0005\u00bf\u0800\n\u00bf\u0003\u00c0",
    "\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0007\u00c0",
    "\u0808\n\u00c0\f\u00c0\u000e\u00c0\u080b\u000b\u00c0\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0007\u00c2\u0829\n\u00c2\f\u00c2\u000e",
    "\u00c2\u082c\u000b\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0005\u00c3\u0834\n\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0007\u00c3\u08c2\n\u00c3\f\u00c3\u000e\u00c3\u08c5\u000b\u00c3",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0005\u00c5\u08d9\n\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0007\u00c6\u0918\n\u00c6",
    "\f\u00c6\u000e\u00c6\u091b\u000b\u00c6\u0003\u00c7\u0003\u00c7\u0003",
    "\u00c8\u0003\u00c8\u0005\u00c8\u0921\n\u00c8\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0003\u00ca\u0003\u00ca\u0005\u00ca\u0929\n",
    "\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003",
    "\u00cb\u0007\u00cb\u0931\n\u00cb\f\u00cb\u000e\u00cb\u0934\u000b\u00cb",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc",
    "\u093b\n\u00cc\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003",
    "\u00ce\u0003\u00ce\u0005\u00ce\u0943\n\u00ce\u0003\u00cf\u0003\u00cf",
    "\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0007\u00cf\u094b\n",
    "\u00cf\f\u00cf\u000e\u00cf\u094e\u000b\u00cf\u0003\u00d0\u0003\u00d0",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d2\u0003\u00d2",
    "\u0005\u00d2\u0958\n\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003",
    "\u00d3\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003",
    "\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003",
    "\u00d4\u0007\u00d4\u096a\n\u00d4\f\u00d4\u000e\u00d4\u096d\u000b\u00d4",
    "\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d6\u0003\u00d6\u0003\u00d6",
    "\u0005\u00d6\u0975\n\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u099b\n\u00d7\u0003\u00d8",
    "\u0003\u00d8\u0003\u00d9\u0003\u00d9\u0005\u00d9\u09a1\n\u00d9\u0003",
    "\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003",
    "\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003",
    "\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003",
    "\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003",
    "\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0005\u00da\u09c0",
    "\n\u00da\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db",
    "\u0003\u00db\u0007\u00db\u09c8\n\u00db\f\u00db\u000e\u00db\u09cb\u000b",
    "\u00db\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003",
    "\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003",
    "\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003",
    "\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u09e1\n\u00dc\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0005\u00de\u09fd\n\u00de\u0003\u00df\u0003\u00df\u0003",
    "\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003",
    "\u00df\u0005\u00df\u0a08\n\u00df\u0003\u00e0\u0003\u00e0\u0003\u00e0",
    "\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0",
    "\u0005\u00e0\u0a13\n\u00e0\u0003\u00e1\u0003\u00e1\u0005\u00e1\u0a17",
    "\n\u00e1\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0005\u00e2\u0a22\n",
    "\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0005\u00e3\u0a27\n\u00e3",
    "\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4",
    "\u0007\u00e4\u0a2f\n\u00e4\f\u00e4\u000e\u00e4\u0a32\u000b\u00e4\u0003",
    "\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e6\u0003\u00e6\u0003",
    "\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e7\u0003",
    "\u00e7\u0005\u00e7\u0a41\n\u00e7\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0005\u00e8\u0a47\n\u00e8\u0003\u00e9\u0003\u00e9\u0003",
    "\u00e9\u0003\u00e9\u0003\u00e9\u0005\u00e9\u0a4e\n\u00e9\u0003\u00ea",
    "\u0003\u00ea\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb",
    "\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb",
    "\u0005\u00eb\u0a5d\n\u00eb\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003",
    "\u00ec\u0003\u00ec\u0003\u00ec\u0005\u00ec\u0a65\n\u00ec\u0003\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0005\u00ed\u0a70\n\u00ed\u0003\u00ee\u0003",
    "\u00ee\u0003\u00ef\u0003\u00ef\u0005\u00ef\u0a76\n\u00ef\u0003\u00f0",
    "\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0005\u00f0\u0a7c\n\u00f0\u0003",
    "\u00f1\u0003\u00f1\u0003\u00f1\u0005\u00f1\u0a81\n\u00f1\u0003\u00f2",
    "\u0003\u00f2\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3",
    "\u0003\u00f3\u0005\u00f3\u0a8b\n\u00f3\u0003\u00f4\u0003\u00f4\u0005",
    "\u00f4\u0a8f\n\u00f4\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5",
    "\u0005\u00f5\u0a95\n\u00f5\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003",
    "\u00f6\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f8\u0003\u00f8\u0003",
    "\u00f8\u0003\u00f8\u0003\u00f9\u0003\u00f9\u0003\u00fa\u0003\u00fa\u0005",
    "\u00fa\u0aa6\n\u00fa\u0003\u00fb\u0003\u00fb\u0003\u00fc\u0003\u00fc",
    "\u0003\u00fc\u0003\u00fc\u0005\u00fc\u0aae\n\u00fc\u0003\u00fd\u0003",
    "\u00fd\u0003\u00fe\u0003\u00fe\u0005\u00fe\u0ab4\n\u00fe\u0003\u00ff",
    "\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0003\u0100\u0003\u0100\u0003\u0100",
    "\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0102\u0003\u0102",
    "\u0003\u0102\u0003\u0102\u0002\u001e\u0004:LZz\u008e\u0094\u00a0\u00b0",
    "\u00d0\u00f0\u00fa\u00fc\u0106\u011e\u0122\u0126\u0150\u0172\u017e\u0182",
    "\u0184\u018a\u0194\u019c\u01a6\u01b4\u01c6\u0103\u0002\u0004\u0006\b",
    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.",
    "02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0",
    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8",
    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100",
    "\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118",
    "\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130",
    "\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148",
    "\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160",
    "\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178",
    "\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190",
    "\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8",
    "\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0",
    "\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8",
    "\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0",
    "\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0002\u0015\u0004",
    "\u0002**bb\u0005\u0002PP\u00b1\u00b1\u00e2\u00e2\u0004\u0002]]\u00da",
    "\u00da\u0004\u000233\u00ae\u00ae\u0004\u0002++JJ\u0004\u0002\\\\\u0082",
    "\u0082\u0007\u0002HHvv\u00c4\u00c4\u00dc\u00dc\u00f0\u00f0\u0004\u0002",
    "^^\u00d4\u00d4\u0004\u0002$$OO\u0005\u0002++JJ\u008f\u008f\u0004\u0002",
    "\u0080\u0080\u00e3\u00e3\u0007\u0002\u0003\u0005YY\u008f\u008f\u0096",
    "\u0096\u00d3\u00d3\u0003\u0002\u00f1\u00f3\u0004\u0002\u00b6\u00b6\u00f0",
    "\u00f0\u0005\u0002hh\u00b0\u00b0\u00bf\u00bf\u0004\u0002__\u00a8\u00a8",
    "\u0004\u0002$$LL\u0004\u0002--\u00c9\u00c9\u0004\u0002\u00d0\u00d1\u00ed",
    "\u00ed\u0002\u0b05\u0002\u0208\u0003\u0002\u0002\u0002\u0004\u020a\u0003",
    "\u0002\u0002\u0002\u0006\u0217\u0003\u0002\u0002\u0002\b\u0221\u0003",
    "\u0002\u0002\u0002\n\u0223\u0003\u0002\u0002\u0002\f\u0229\u0003\u0002",
    "\u0002\u0002\u000e\u022b\u0003\u0002\u0002\u0002\u0010\u022e\u0003\u0002",
    "\u0002\u0002\u0012\u0235\u0003\u0002\u0002\u0002\u0014\u023c\u0003\u0002",
    "\u0002\u0002\u0016\u023e\u0003\u0002\u0002\u0002\u0018\u0240\u0003\u0002",
    "\u0002\u0002\u001a\u0247\u0003\u0002\u0002\u0002\u001c\u0249\u0003\u0002",
    "\u0002\u0002\u001e\u0252\u0003\u0002\u0002\u0002 \u0254\u0003\u0002",
    "\u0002\u0002\"\u0258\u0003\u0002\u0002\u0002$\u025a\u0003\u0002\u0002",
    "\u0002&\u025d\u0003\u0002\u0002\u0002(\u0264\u0003\u0002\u0002\u0002",
    "*\u0269\u0003\u0002\u0002\u0002,\u026d\u0003\u0002\u0002\u0002.\u0273",
    "\u0003\u0002\u0002\u00020\u0277\u0003\u0002\u0002\u00022\u027c\u0003",
    "\u0002\u0002\u00024\u0281\u0003\u0002\u0002\u00026\u0288\u0003\u0002",
    "\u0002\u00028\u0297\u0003\u0002\u0002\u0002:\u02b6\u0003\u0002\u0002",
    "\u0002<\u02d4\u0003\u0002\u0002\u0002>\u02d8\u0003\u0002\u0002\u0002",
    "@\u02da\u0003\u0002\u0002\u0002B\u02e2\u0003\u0002\u0002\u0002D\u02ea",
    "\u0003\u0002\u0002\u0002F\u02f5\u0003\u0002\u0002\u0002H\u02fa\u0003",
    "\u0002\u0002\u0002J\u02fc\u0003\u0002\u0002\u0002L\u02fe\u0003\u0002",
    "\u0002\u0002N\u0311\u0003\u0002\u0002\u0002P\u0315\u0003\u0002\u0002",
    "\u0002R\u031a\u0003\u0002\u0002\u0002T\u031c\u0003\u0002\u0002\u0002",
    "V\u0320\u0003\u0002\u0002\u0002X\u0322\u0003\u0002\u0002\u0002Z\u032f",
    "\u0003\u0002\u0002\u0002\\\u036b\u0003\u0002\u0002\u0002^\u036d\u0003",
    "\u0002\u0002\u0002`\u036f\u0003\u0002\u0002\u0002b\u037d\u0003\u0002",
    "\u0002\u0002d\u0382\u0003\u0002\u0002\u0002f\u0384\u0003\u0002\u0002",
    "\u0002h\u0387\u0003\u0002\u0002\u0002j\u0389\u0003\u0002\u0002\u0002",
    "l\u038b\u0003\u0002\u0002\u0002n\u0390\u0003\u0002\u0002\u0002p\u03a1",
    "\u0003\u0002\u0002\u0002r\u03a3\u0003\u0002\u0002\u0002t\u03a7\u0003",
    "\u0002\u0002\u0002v\u03b2\u0003\u0002\u0002\u0002x\u03b6\u0003\u0002",
    "\u0002\u0002z\u03b8\u0003\u0002\u0002\u0002|\u03c3\u0003\u0002\u0002",
    "\u0002~\u03c6\u0003\u0002\u0002\u0002\u0080\u03c8\u0003\u0002\u0002",
    "\u0002\u0082\u03ce\u0003\u0002\u0002\u0002\u0084\u03d2\u0003\u0002\u0002",
    "\u0002\u0086\u03d4\u0003\u0002\u0002\u0002\u0088\u03d9\u0003\u0002\u0002",
    "\u0002\u008a\u03e0\u0003\u0002\u0002\u0002\u008c\u03e2\u0003\u0002\u0002",
    "\u0002\u008e\u03e5\u0003\u0002\u0002\u0002\u0090\u03f0\u0003\u0002\u0002",
    "\u0002\u0092\u03f7\u0003\u0002\u0002\u0002\u0094\u03f9\u0003\u0002\u0002",
    "\u0002\u0096\u0404\u0003\u0002\u0002\u0002\u0098\u040a\u0003\u0002\u0002",
    "\u0002\u009a\u040c\u0003\u0002\u0002\u0002\u009c\u0411\u0003\u0002\u0002",
    "\u0002\u009e\u041a\u0003\u0002\u0002\u0002\u00a0\u041c\u0003\u0002\u0002",
    "\u0002\u00a2\u0427\u0003\u0002\u0002\u0002\u00a4\u042c\u0003\u0002\u0002",
    "\u0002\u00a6\u042e\u0003\u0002\u0002\u0002\u00a8\u0433\u0003\u0002\u0002",
    "\u0002\u00aa\u0435\u0003\u0002\u0002\u0002\u00ac\u043a\u0003\u0002\u0002",
    "\u0002\u00ae\u043c\u0003\u0002\u0002\u0002\u00b0\u0440\u0003\u0002\u0002",
    "\u0002\u00b2\u044b\u0003\u0002\u0002\u0002\u00b4\u0451\u0003\u0002\u0002",
    "\u0002\u00b6\u0453\u0003\u0002\u0002\u0002\u00b8\u0459\u0003\u0002\u0002",
    "\u0002\u00ba\u045b\u0003\u0002\u0002\u0002\u00bc\u045d\u0003\u0002\u0002",
    "\u0002\u00be\u0461\u0003\u0002\u0002\u0002\u00c0\u0463\u0003\u0002\u0002",
    "\u0002\u00c2\u0468\u0003\u0002\u0002\u0002\u00c4\u046a\u0003\u0002\u0002",
    "\u0002\u00c6\u047d\u0003\u0002\u0002\u0002\u00c8\u048c\u0003\u0002\u0002",
    "\u0002\u00ca\u0492\u0003\u0002\u0002\u0002\u00cc\u04a5\u0003\u0002\u0002",
    "\u0002\u00ce\u04a7\u0003\u0002\u0002\u0002\u00d0\u04aa\u0003\u0002\u0002",
    "\u0002\u00d2\u04b9\u0003\u0002\u0002\u0002\u00d4\u04be\u0003\u0002\u0002",
    "\u0002\u00d6\u04c0\u0003\u0002\u0002\u0002\u00d8\u04c6\u0003\u0002\u0002",
    "\u0002\u00da\u04d0\u0003\u0002\u0002\u0002\u00dc\u04d2\u0003\u0002\u0002",
    "\u0002\u00de\u04d9\u0003\u0002\u0002\u0002\u00e0\u04db\u0003\u0002\u0002",
    "\u0002\u00e2\u04de\u0003\u0002\u0002\u0002\u00e4\u04e1\u0003\u0002\u0002",
    "\u0002\u00e6\u04f3\u0003\u0002\u0002\u0002\u00e8\u0505\u0003\u0002\u0002",
    "\u0002\u00ea\u0507\u0003\u0002\u0002\u0002\u00ec\u0528\u0003\u0002\u0002",
    "\u0002\u00ee\u052a\u0003\u0002\u0002\u0002\u00f0\u052d\u0003\u0002\u0002",
    "\u0002\u00f2\u0543\u0003\u0002\u0002\u0002\u00f4\u0545\u0003\u0002\u0002",
    "\u0002\u00f6\u054c\u0003\u0002\u0002\u0002\u00f8\u054e\u0003\u0002\u0002",
    "\u0002\u00fa\u0552\u0003\u0002\u0002\u0002\u00fc\u055e\u0003\u0002\u0002",
    "\u0002\u00fe\u057d\u0003\u0002\u0002\u0002\u0100\u057f\u0003\u0002\u0002",
    "\u0002\u0102\u0584\u0003\u0002\u0002\u0002\u0104\u0586\u0003\u0002\u0002",
    "\u0002\u0106\u0589\u0003\u0002\u0002\u0002\u0108\u0594\u0003\u0002\u0002",
    "\u0002\u010a\u0597\u0003\u0002\u0002\u0002\u010c\u05a4\u0003\u0002\u0002",
    "\u0002\u010e\u05a8\u0003\u0002\u0002\u0002\u0110\u05bf\u0003\u0002\u0002",
    "\u0002\u0112\u05cf\u0003\u0002\u0002\u0002\u0114\u05d8\u0003\u0002\u0002",
    "\u0002\u0116\u05e4\u0003\u0002\u0002\u0002\u0118\u05e6\u0003\u0002\u0002",
    "\u0002\u011a\u05f6\u0003\u0002\u0002\u0002\u011c\u0604\u0003\u0002\u0002",
    "\u0002\u011e\u0606\u0003\u0002\u0002\u0002\u0120\u0611\u0003\u0002\u0002",
    "\u0002\u0122\u0613\u0003\u0002\u0002\u0002\u0124\u0638\u0003\u0002\u0002",
    "\u0002\u0126\u063a\u0003\u0002\u0002\u0002\u0128\u0649\u0003\u0002\u0002",
    "\u0002\u012a\u0657\u0003\u0002\u0002\u0002\u012c\u0659\u0003\u0002\u0002",
    "\u0002\u012e\u065d\u0003\u0002\u0002\u0002\u0130\u0661\u0003\u0002\u0002",
    "\u0002\u0132\u0665\u0003\u0002\u0002\u0002\u0134\u0669\u0003\u0002\u0002",
    "\u0002\u0136\u066d\u0003\u0002\u0002\u0002\u0138\u0686\u0003\u0002\u0002",
    "\u0002\u013a\u068a\u0003\u0002\u0002\u0002\u013c\u068c\u0003\u0002\u0002",
    "\u0002\u013e\u0690\u0003\u0002\u0002\u0002\u0140\u069c\u0003\u0002\u0002",
    "\u0002\u0142\u06a6\u0003\u0002\u0002\u0002\u0144\u06b1\u0003\u0002\u0002",
    "\u0002\u0146\u06bb\u0003\u0002\u0002\u0002\u0148\u06bf\u0003\u0002\u0002",
    "\u0002\u014a\u06c7\u0003\u0002\u0002\u0002\u014c\u06cb\u0003\u0002\u0002",
    "\u0002\u014e\u06cd\u0003\u0002\u0002\u0002\u0150\u06d0\u0003\u0002\u0002",
    "\u0002\u0152\u06db\u0003\u0002\u0002\u0002\u0154\u06e8\u0003\u0002\u0002",
    "\u0002\u0156\u06ea\u0003\u0002\u0002\u0002\u0158\u06ec\u0003\u0002\u0002",
    "\u0002\u015a\u06f1\u0003\u0002\u0002\u0002\u015c\u06f8\u0003\u0002\u0002",
    "\u0002\u015e\u06fa\u0003\u0002\u0002\u0002\u0160\u0711\u0003\u0002\u0002",
    "\u0002\u0162\u0723\u0003\u0002\u0002\u0002\u0164\u0725\u0003\u0002\u0002",
    "\u0002\u0166\u072e\u0003\u0002\u0002\u0002\u0168\u073a\u0003\u0002\u0002",
    "\u0002\u016a\u073e\u0003\u0002\u0002\u0002\u016c\u0740\u0003\u0002\u0002",
    "\u0002\u016e\u074c\u0003\u0002\u0002\u0002\u0170\u0753\u0003\u0002\u0002",
    "\u0002\u0172\u0755\u0003\u0002\u0002\u0002\u0174\u0774\u0003\u0002\u0002",
    "\u0002\u0176\u0776\u0003\u0002\u0002\u0002\u0178\u077a\u0003\u0002\u0002",
    "\u0002\u017a\u07fb\u0003\u0002\u0002\u0002\u017c\u07ff\u0003\u0002\u0002",
    "\u0002\u017e\u0801\u0003\u0002\u0002\u0002\u0180\u080c\u0003\u0002\u0002",
    "\u0002\u0182\u080e\u0003\u0002\u0002\u0002\u0184\u0833\u0003\u0002\u0002",
    "\u0002\u0186\u08c6\u0003\u0002\u0002\u0002\u0188\u08d8\u0003\u0002\u0002",
    "\u0002\u018a\u08da\u0003\u0002\u0002\u0002\u018c\u091c\u0003\u0002\u0002",
    "\u0002\u018e\u0920\u0003\u0002\u0002\u0002\u0190\u0922\u0003\u0002\u0002",
    "\u0002\u0192\u0928\u0003\u0002\u0002\u0002\u0194\u092a\u0003\u0002\u0002",
    "\u0002\u0196\u093a\u0003\u0002\u0002\u0002\u0198\u093c\u0003\u0002\u0002",
    "\u0002\u019a\u0942\u0003\u0002\u0002\u0002\u019c\u0944\u0003\u0002\u0002",
    "\u0002\u019e\u094f\u0003\u0002\u0002\u0002\u01a0\u0951\u0003\u0002\u0002",
    "\u0002\u01a2\u0957\u0003\u0002\u0002\u0002\u01a4\u0959\u0003\u0002\u0002",
    "\u0002\u01a6\u095d\u0003\u0002\u0002\u0002\u01a8\u096e\u0003\u0002\u0002",
    "\u0002\u01aa\u0974\u0003\u0002\u0002\u0002\u01ac\u099a\u0003\u0002\u0002",
    "\u0002\u01ae\u099c\u0003\u0002\u0002\u0002\u01b0\u09a0\u0003\u0002\u0002",
    "\u0002\u01b2\u09bf\u0003\u0002\u0002\u0002\u01b4\u09c1\u0003\u0002\u0002",
    "\u0002\u01b6\u09e0\u0003\u0002\u0002\u0002\u01b8\u09e2\u0003\u0002\u0002",
    "\u0002\u01ba\u09fc\u0003\u0002\u0002\u0002\u01bc\u0a07\u0003\u0002\u0002",
    "\u0002\u01be\u0a12\u0003\u0002\u0002\u0002\u01c0\u0a16\u0003\u0002\u0002",
    "\u0002\u01c2\u0a21\u0003\u0002\u0002\u0002\u01c4\u0a26\u0003\u0002\u0002",
    "\u0002\u01c6\u0a28\u0003\u0002\u0002\u0002\u01c8\u0a33\u0003\u0002\u0002",
    "\u0002\u01ca\u0a37\u0003\u0002\u0002\u0002\u01cc\u0a40\u0003\u0002\u0002",
    "\u0002\u01ce\u0a46\u0003\u0002\u0002\u0002\u01d0\u0a4d\u0003\u0002\u0002",
    "\u0002\u01d2\u0a4f\u0003\u0002\u0002\u0002\u01d4\u0a5c\u0003\u0002\u0002",
    "\u0002\u01d6\u0a64\u0003\u0002\u0002\u0002\u01d8\u0a6f\u0003\u0002\u0002",
    "\u0002\u01da\u0a71\u0003\u0002\u0002\u0002\u01dc\u0a75\u0003\u0002\u0002",
    "\u0002\u01de\u0a7b\u0003\u0002\u0002\u0002\u01e0\u0a80\u0003\u0002\u0002",
    "\u0002\u01e2\u0a82\u0003\u0002\u0002\u0002\u01e4\u0a8a\u0003\u0002\u0002",
    "\u0002\u01e6\u0a8e\u0003\u0002\u0002\u0002\u01e8\u0a94\u0003\u0002\u0002",
    "\u0002\u01ea\u0a96\u0003\u0002\u0002\u0002\u01ec\u0a9a\u0003\u0002\u0002",
    "\u0002\u01ee\u0a9d\u0003\u0002\u0002\u0002\u01f0\u0aa1\u0003\u0002\u0002",
    "\u0002\u01f2\u0aa5\u0003\u0002\u0002\u0002\u01f4\u0aa7\u0003\u0002\u0002",
    "\u0002\u01f6\u0aad\u0003\u0002\u0002\u0002\u01f8\u0aaf\u0003\u0002\u0002",
    "\u0002\u01fa\u0ab3\u0003\u0002\u0002\u0002\u01fc\u0ab5\u0003\u0002\u0002",
    "\u0002\u01fe\u0ab9\u0003\u0002\u0002\u0002\u0200\u0abc\u0003\u0002\u0002",
    "\u0002\u0202\u0ac0\u0003\u0002\u0002\u0002\u0204\u0205\u0005\u0006\u0004",
    "\u0002\u0205\u0206\u0005\u0004\u0003\u0002\u0206\u0209\u0003\u0002\u0002",
    "\u0002\u0207\u0209\u0005\u01c0\u00e1\u0002\u0208\u0204\u0003\u0002\u0002",
    "\u0002\u0208\u0207\u0003\u0002\u0002\u0002\u0209\u0003\u0003\u0002\u0002",
    "\u0002\u020a\u020f\b\u0003\u0001\u0002\u020b\u020c\f\u0003\u0002\u0002",
    "\u020c\u020e\u0007 \u0002\u0002\u020d\u020b\u0003\u0002\u0002\u0002",
    "\u020e\u0211\u0003\u0002\u0002\u0002\u020f\u020d\u0003\u0002\u0002\u0002",
    "\u020f\u0210\u0003\u0002\u0002\u0002\u0210\u0005\u0003\u0002\u0002\u0002",
    "\u0211\u020f\u0003\u0002\u0002\u0002\u0212\u0218\u0005\n\u0006\u0002",
    "\u0213\u0218\u0005\u000e\b\u0002\u0214\u0218\u0005\u0010\t\u0002\u0215",
    "\u0218\u0005\u0018\r\u0002\u0216\u0218\u0005\b\u0005\u0002\u0217\u0212",
    "\u0003\u0002\u0002\u0002\u0217\u0213\u0003\u0002\u0002\u0002\u0217\u0214",
    "\u0003\u0002\u0002\u0002\u0217\u0215\u0003\u0002\u0002\u0002\u0217\u0216",
    "\u0003\u0002\u0002\u0002\u0218\u0007\u0003\u0002\u0002\u0002\u0219\u0222",
    "\u0005&\u0014\u0002\u021a\u0222\u0005(\u0015\u0002\u021b\u0222\u0005",
    "*\u0016\u0002\u021c\u0222\u0005\u001c\u000f\u0002\u021d\u0222\u0005",
    "\u017a\u00be\u0002\u021e\u0222\u0005,\u0017\u0002\u021f\u0222\u0005",
    "4\u001b\u0002\u0220\u0222\u00056\u001c\u0002\u0221\u0219\u0003\u0002",
    "\u0002\u0002\u0221\u021a\u0003\u0002\u0002\u0002\u0221\u021b\u0003\u0002",
    "\u0002\u0002\u0221\u021c\u0003\u0002\u0002\u0002\u0221\u021d\u0003\u0002",
    "\u0002\u0002\u0221\u021e\u0003\u0002\u0002\u0002\u0221\u021f\u0003\u0002",
    "\u0002\u0002\u0221\u0220\u0003\u0002\u0002\u0002\u0222\t\u0003\u0002",
    "\u0002\u0002\u0223\u0224\u0007#\u0002\u0002\u0224\u0225\u0005\f\u0007",
    "\u0002\u0225\u0226\u0005\b\u0005\u0002\u0226\u000b\u0003\u0002\u0002",
    "\u0002\u0227\u022a\u0003\u0002\u0002\u0002\u0228\u022a\u0007r\u0002",
    "\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u0229\u0228\u0003\u0002\u0002",
    "\u0002\u022a\r\u0003\u0002\u0002\u0002\u022b\u022c\u0007X\u0002\u0002",
    "\u022c\u022d\u0005\b\u0005\u0002\u022d\u000f\u0003\u0002\u0002\u0002",
    "\u022e\u022f\u0007\u00a9\u0002\u0002\u022f\u0230\u0005\u0012\n\u0002",
    "\u0230\u0231\u0005\u0014\u000b\u0002\u0231\u0232\u0005\b\u0005\u0002",
    "\u0232\u0011\u0003\u0002\u0002\u0002\u0233\u0236\u0003\u0002\u0002\u0002",
    "\u0234\u0236\u0007a\u0002\u0002\u0235\u0233\u0003\u0002\u0002\u0002",
    "\u0235\u0234\u0003\u0002\u0002\u0002\u0236\u0013\u0003\u0002\u0002\u0002",
    "\u0237\u023d\u0003\u0002\u0002\u0002\u0238\u0239\u0007\u00f0\u0002\u0002",
    "\u0239\u023d\u0005\u0016\f\u0002\u023a\u023b\u0007\u0003\u0002\u0002",
    "\u023b\u023d\u0005\u0016\f\u0002\u023c\u0237\u0003\u0002\u0002\u0002",
    "\u023c\u0238\u0003\u0002\u0002\u0002\u023c\u023a\u0003\u0002\u0002\u0002",
    "\u023d\u0015\u0003\u0002\u0002\u0002\u023e\u023f\t\u0002\u0002\u0002",
    "\u023f\u0017\u0003\u0002\u0002\u0002\u0240\u0241\u0007V\u0002\u0002",
    "\u0241\u0242\u0005\u0184\u00c3\u0002\u0242\u0243\u0005\u001a\u000e\u0002",
    "\u0243\u0019\u0003\u0002\u0002\u0002\u0244\u0248\u0003\u0002\u0002\u0002",
    "\u0245\u0246\u0007\u00e0\u0002\u0002\u0246\u0248\u0005\u018e\u00c8\u0002",
    "\u0247\u0244\u0003\u0002\u0002\u0002\u0247\u0245\u0003\u0002\u0002\u0002",
    "\u0248\u001b\u0003\u0002\u0002\u0002\u0249\u024a\u0007s\u0002\u0002",
    "\u024a\u024b\u0005\u001e\u0010\u0002\u024b\u024c\u0005\u00c8e\u0002",
    "\u024c\u024d\u0005 \u0011\u0002\u024d\u024e\u0005\"\u0012\u0002\u024e",
    "\u001d\u0003\u0002\u0002\u0002\u024f\u0253\u0003\u0002\u0002\u0002\u0250",
    "\u0253\u0007\u007f\u0002\u0002\u0251\u0253\u0007:\u0002\u0002\u0252",
    "\u024f\u0003\u0002\u0002\u0002\u0252\u0250\u0003\u0002\u0002\u0002\u0252",
    "\u0251\u0003\u0002\u0002\u0002\u0253\u001f\u0003\u0002\u0002\u0002\u0254",
    "\u0255\u0003\u0002\u0002\u0002\u0255!\u0003\u0002\u0002\u0002\u0256",
    "\u0259\u0003\u0002\u0002\u0002\u0257\u0259\u0005$\u0013\u0002\u0258",
    "\u0256\u0003\u0002\u0002\u0002\u0258\u0257\u0003\u0002\u0002\u0002\u0259",
    "#\u0003\u0002\u0002\u0002\u025a\u025b\u0007\u00eb\u0002\u0002\u025b",
    "\u025c\u0005\u0184\u00c3\u0002\u025c%\u0003\u0002\u0002\u0002\u025d",
    "\u025e\u00058\u001d\u0002\u025e\'\u0003\u0002\u0002\u0002\u025f\u0265",
    "\u0005\u00c6d\u0002\u0260\u0265\u0005\u00e8u\u0002\u0261\u0265\u0005",
    "\u00eav\u0002\u0262\u0265\u0005\u00ecw\u0002\u0263\u0265\u0005\u010a",
    "\u0086\u0002\u0264\u025f\u0003\u0002\u0002\u0002\u0264\u0260\u0003\u0002",
    "\u0002\u0002\u0264\u0261\u0003\u0002\u0002\u0002\u0264\u0262\u0003\u0002",
    "\u0002\u0002\u0264\u0263\u0003\u0002\u0002\u0002\u0265)\u0003\u0002",
    "\u0002\u0002\u0266\u026a\u0005.\u0018\u0002\u0267\u026a\u00050\u0019",
    "\u0002\u0268\u026a\u00052\u001a\u0002\u0269\u0266\u0003\u0002\u0002",
    "\u0002\u0269\u0267\u0003\u0002\u0002\u0002\u0269\u0268\u0003\u0002\u0002",
    "\u0002\u026a+\u0003\u0002\u0002\u0002\u026b\u026e\u0005\u011c\u008f",
    "\u0002\u026c\u026e\u0005\u012a\u0096\u0002\u026d\u026b\u0003\u0002\u0002",
    "\u0002\u026d\u026c\u0003\u0002\u0002\u0002\u026e-\u0003\u0002\u0002",
    "\u0002\u026f\u0274\u0005\u0138\u009d\u0002\u0270\u0274\u0005\u0160\u00b1",
    "\u0002\u0271\u0274\u0005\u0162\u00b2\u0002\u0272\u0274\u0005\u0164\u00b3",
    "\u0002\u0273\u026f\u0003\u0002\u0002\u0002\u0273\u0270\u0003\u0002\u0002",
    "\u0002\u0273\u0271\u0003\u0002\u0002\u0002\u0273\u0272\u0003\u0002\u0002",
    "\u0002\u0274/\u0003\u0002\u0002\u0002\u0275\u0278\u0005\u012c\u0097",
    "\u0002\u0276\u0278\u0005\u012e\u0098\u0002\u0277\u0275\u0003\u0002\u0002",
    "\u0002\u0277\u0276\u0003\u0002\u0002\u0002\u02781\u0003\u0002\u0002",
    "\u0002\u0279\u027d\u0005\u0130\u0099\u0002\u027a\u027d\u0005\u0132\u009a",
    "\u0002\u027b\u027d\u0005\u0134\u009b\u0002\u027c\u0279\u0003\u0002\u0002",
    "\u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027c\u027b\u0003\u0002\u0002",
    "\u0002\u027d3\u0003\u0002\u0002\u0002\u027e\u0282\u0005\u0166\u00b4",
    "\u0002\u027f\u0282\u0005\u0176\u00bc\u0002\u0280\u0282\u0005\u0178\u00bd",
    "\u0002\u0281\u027e\u0003\u0002\u0002\u0002\u0281\u027f\u0003\u0002\u0002",
    "\u0002\u0281\u0280\u0003\u0002\u0002\u0002\u02825\u0003\u0002\u0002",
    "\u0002\u0283\u0289\u0005\u01ea\u00f6\u0002\u0284\u0289\u0005\u01ec\u00f7",
    "\u0002\u0285\u0289\u0005\u01ee\u00f8\u0002\u0286\u0289\u0005\u0202\u0102",
    "\u0002\u0287\u0289\u0005\u0200\u0101\u0002\u0288\u0283\u0003\u0002\u0002",
    "\u0002\u0288\u0284\u0003\u0002\u0002\u0002\u0288\u0285\u0003\u0002\u0002",
    "\u0002\u0288\u0286\u0003\u0002\u0002\u0002\u0288\u0287\u0003\u0002\u0002",
    "\u0002\u02897\u0003\u0002\u0002\u0002\u028a\u028b\u0005:\u001e\u0002",
    "\u028b\u028c\u0005\u00acW\u0002\u028c\u0298\u0003\u0002\u0002\u0002",
    "\u028d\u028e\u0005:\u001e\u0002\u028e\u028f\u0005\u00acW\u0002\u028f",
    "\u0290\u0005\u00c0a\u0002\u0290\u0291\u0005\u00c2b\u0002\u0291\u0298",
    "\u0003\u0002\u0002\u0002\u0292\u0293\u0005:\u001e\u0002\u0293\u0294",
    "\u0005\u00acW\u0002\u0294\u0295\u0005\u00c4c\u0002\u0295\u0296\u0005",
    "\u00be`\u0002\u0296\u0298\u0003\u0002\u0002\u0002\u0297\u028a\u0003",
    "\u0002\u0002\u0002\u0297\u028d\u0003\u0002\u0002\u0002\u0297\u0292\u0003",
    "\u0002\u0002\u0002\u02989\u0003\u0002\u0002\u0002\u0299\u029a\b\u001e",
    "\u0001\u0002\u029a\u02b7\u0005> \u0002\u029b\u029c\u0005\u01be\u00e0",
    "\u0002\u029c\u029d\u0007\u00d7\u0002\u0002\u029d\u029e\u0005<\u001f",
    "\u0002\u029e\u02b7\u0003\u0002\u0002\u0002\u029f\u02a0\u0005\u01be\u00e0",
    "\u0002\u02a0\u02a1\u0007\u00d7\u0002\u0002\u02a1\u02a2\u0007$\u0002",
    "\u0002\u02a2\u02a3\u0005<\u001f\u0002\u02a3\u02b7\u0003\u0002\u0002",
    "\u0002\u02a4\u02a5\u0005\u01be\u00e0\u0002\u02a5\u02a6\u0007w\u0002",
    "\u0002\u02a6\u02a7\u0005<\u001f\u0002\u02a7\u02b7\u0003\u0002\u0002",
    "\u0002\u02a8\u02a9\u0005\u01be\u00e0\u0002\u02a9\u02aa\u0007w\u0002",
    "\u0002\u02aa\u02ab\u0007$\u0002\u0002\u02ab\u02ac\u0005<\u001f\u0002",
    "\u02ac\u02b7\u0003\u0002\u0002\u0002\u02ad\u02ae\u0005\u01be\u00e0\u0002",
    "\u02ae\u02af\u0007T\u0002\u0002\u02af\u02b0\u0005<\u001f\u0002\u02b0",
    "\u02b7\u0003\u0002\u0002\u0002\u02b1\u02b2\u0005\u01be\u00e0\u0002\u02b2",
    "\u02b3\u0007T\u0002\u0002\u02b3\u02b4\u0007$\u0002\u0002\u02b4\u02b5",
    "\u0005<\u001f\u0002\u02b5\u02b7\u0003\u0002\u0002\u0002\u02b6\u0299",
    "\u0003\u0002\u0002\u0002\u02b6\u029b\u0003\u0002\u0002\u0002\u02b6\u029f",
    "\u0003\u0002\u0002\u0002\u02b6\u02a4\u0003\u0002\u0002\u0002\u02b6\u02a8",
    "\u0003\u0002\u0002\u0002\u02b6\u02ad\u0003\u0002\u0002\u0002\u02b6\u02b1",
    "\u0003\u0002\u0002\u0002\u02b7\u02cf\u0003\u0002\u0002\u0002\u02b8\u02b9",
    "\f\u000e\u0002\u0002\u02b9\u02ba\u0007\u00d7\u0002\u0002\u02ba\u02ce",
    "\u0005<\u001f\u0002\u02bb\u02bc\f\r\u0002\u0002\u02bc\u02bd\u0007\u00d7",
    "\u0002\u0002\u02bd\u02be\u0007$\u0002\u0002\u02be\u02ce\u0005<\u001f",
    "\u0002\u02bf\u02c0\f\f\u0002\u0002\u02c0\u02c1\u0007w\u0002\u0002\u02c1",
    "\u02ce\u0005<\u001f\u0002\u02c2\u02c3\f\u000b\u0002\u0002\u02c3\u02c4",
    "\u0007w\u0002\u0002\u02c4\u02c5\u0007$\u0002\u0002\u02c5\u02ce\u0005",
    "<\u001f\u0002\u02c6\u02c7\f\n\u0002\u0002\u02c7\u02c8\u0007T\u0002\u0002",
    "\u02c8\u02ce\u0005<\u001f\u0002\u02c9\u02ca\f\t\u0002\u0002\u02ca\u02cb",
    "\u0007T\u0002\u0002\u02cb\u02cc\u0007$\u0002\u0002\u02cc\u02ce\u0005",
    "<\u001f\u0002\u02cd\u02b8\u0003\u0002\u0002\u0002\u02cd\u02bb\u0003",
    "\u0002\u0002\u0002\u02cd\u02bf\u0003\u0002\u0002\u0002\u02cd\u02c2\u0003",
    "\u0002\u0002\u0002\u02cd\u02c6\u0003\u0002\u0002\u0002\u02cd\u02c9\u0003",
    "\u0002\u0002\u0002\u02ce\u02d1\u0003\u0002\u0002\u0002\u02cf\u02cd\u0003",
    "\u0002\u0002\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0;\u0003",
    "\u0002\u0002\u0002\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d2\u02d5\u0005",
    "> \u0002\u02d3\u02d5\u0005\u01be\u00e0\u0002\u02d4\u02d2\u0003\u0002",
    "\u0002\u0002\u02d4\u02d3\u0003\u0002\u0002\u0002\u02d5=\u0003\u0002",
    "\u0002\u0002\u02d6\u02d9\u0005@!\u0002\u02d7\u02d9\u0005B\"\u0002\u02d8",
    "\u02d6\u0003\u0002\u0002\u0002\u02d8\u02d7\u0003\u0002\u0002\u0002\u02d9",
    "?\u0003\u0002\u0002\u0002\u02da\u02db\u0005\u0092J\u0002\u02db\u02dc",
    "\u0005X-\u0002\u02dc\u02dd\u0005\u008aF\u0002\u02dd\u02de\u0005\u0098",
    "M\u0002\u02de\u02df\u0005\u009cO\u0002\u02df\u02e0\u0005\u01c4\u00e3",
    "\u0002\u02e0\u02e1\u0005D#\u0002\u02e1A\u0003\u0002\u0002\u0002\u02e2",
    "\u02e3\u0005\u0092J\u0002\u02e3\u02e4\u0005D#\u0002\u02e4\u02e5\u0005",
    "V,\u0002\u02e5\u02e6\u0005\u008aF\u0002\u02e6\u02e7\u0005\u0098M\u0002",
    "\u02e7\u02e8\u0005\u009cO\u0002\u02e8\u02e9\u0005\u01c4\u00e3\u0002",
    "\u02e9C\u0003\u0002\u0002\u0002\u02ea\u02eb\u0007\u00c4\u0002\u0002",
    "\u02eb\u02ec\u0005F$\u0002\u02ecE\u0003\u0002\u0002\u0002\u02ed\u02ee",
    "\u0005H%\u0002\u02ee\u02ef\u0005L\'\u0002\u02ef\u02f6\u0003\u0002\u0002",
    "\u0002\u02f0\u02f1\u0005H%\u0002\u02f1\u02f2\u0005J&\u0002\u02f2\u02f3",
    "\u0005\u0184\u00c3\u0002\u02f3\u02f4\u0005P)\u0002\u02f4\u02f6\u0003",
    "\u0002\u0002\u0002\u02f5\u02ed\u0003\u0002\u0002\u0002\u02f5\u02f0\u0003",
    "\u0002\u0002\u0002\u02f6G\u0003\u0002\u0002\u0002\u02f7\u02fb\u0003",
    "\u0002\u0002\u0002\u02f8\u02fb\u0007$\u0002\u0002\u02f9\u02fb\u0007",
    "L\u0002\u0002\u02fa\u02f7\u0003\u0002\u0002\u0002\u02fa\u02f8\u0003",
    "\u0002\u0002\u0002\u02fa\u02f9\u0003\u0002\u0002\u0002\u02fbI\u0003",
    "\u0002\u0002\u0002\u02fc\u02fd\t\u0003\u0002\u0002\u02fdK\u0003\u0002",
    "\u0002\u0002\u02fe\u02ff\b\'\u0001\u0002\u02ff\u0300\u0005N(\u0002\u0300",
    "\u0306\u0003\u0002\u0002\u0002\u0301\u0302\f\u0003\u0002\u0002\u0302",
    "\u0303\u0007\u001b\u0002\u0002\u0303\u0305\u0005N(\u0002\u0304\u0301",
    "\u0003\u0002\u0002\u0002\u0305\u0308\u0003\u0002\u0002\u0002\u0306\u0304",
    "\u0003\u0002\u0002\u0002\u0306\u0307\u0003\u0002\u0002\u0002\u0307M",
    "\u0003\u0002\u0002\u0002\u0308\u0306\u0003\u0002\u0002\u0002\u0309\u0312",
    "\u0007\f\u0002\u0002\u030a\u030b\u0005\u0184\u00c3\u0002\u030b\u030c",
    "\u0007\t\u0002\u0002\u030c\u030d\u0007\f\u0002\u0002\u030d\u0312\u0003",
    "\u0002\u0002\u0002\u030e\u030f\u0005\u0184\u00c3\u0002\u030f\u0310\u0005",
    "P)\u0002\u0310\u0312\u0003\u0002\u0002\u0002\u0311\u0309\u0003\u0002",
    "\u0002\u0002\u0311\u030a\u0003\u0002\u0002\u0002\u0311\u030e\u0003\u0002",
    "\u0002\u0002\u0312O\u0003\u0002\u0002\u0002\u0313\u0316\u0003\u0002",
    "\u0002\u0002\u0314\u0316\u0005R*\u0002\u0315\u0313\u0003\u0002\u0002",
    "\u0002\u0315\u0314\u0003\u0002\u0002\u0002\u0316Q\u0003\u0002\u0002",
    "\u0002\u0317\u031b\u0005T+\u0002\u0318\u0319\u0007*\u0002\u0002\u0319",
    "\u031b\u0005T+\u0002\u031a\u0317\u0003\u0002\u0002\u0002\u031a\u0318",
    "\u0003\u0002\u0002\u0002\u031bS\u0003\u0002\u0002\u0002\u031c\u031d",
    "\u0007\u00f0\u0002\u0002\u031dU\u0003\u0002\u0002\u0002\u031e\u0321",
    "\u0003\u0002\u0002\u0002\u031f\u0321\u0005X-\u0002\u0320\u031e\u0003",
    "\u0002\u0002\u0002\u0320\u031f\u0003\u0002\u0002\u0002\u0321W\u0003",
    "\u0002\u0002\u0002\u0322\u0323\u0007b\u0002\u0002\u0323\u0324\u0005",
    "Z.\u0002\u0324Y\u0003\u0002\u0002\u0002\u0325\u0326\b.\u0001\u0002\u0326",
    "\u0330\u0005\\/\u0002\u0327\u0328\u0005\\/\u0002\u0328\u0329\u0007\u00bb",
    "\u0002\u0002\u0329\u032a\u0005\u0084C\u0002\u032a\u032b\u0007|\u0002",
    "\u0002\u032b\u032c\u0005\\/\u0002\u032c\u032d\u0007\u009b\u0002\u0002",
    "\u032d\u032e\u0005\u0184\u00c3\u0002\u032e\u0330\u0003\u0002\u0002\u0002",
    "\u032f\u0325\u0003\u0002\u0002\u0002\u032f\u0327\u0003\u0002\u0002\u0002",
    "\u0330\u0363\u0003\u0002\u0002\u0002\u0331\u0332\f\n\u0002\u0002\u0332",
    "\u0333\u0005\u0082B\u0002\u0333\u0334\u0007|\u0002\u0002\u0334\u0335",
    "\u0005\\/\u0002\u0335\u0336\u0005\u0086D\u0002\u0336\u0362\u0003\u0002",
    "\u0002\u0002\u0337\u0338\f\t\u0002\u0002\u0338\u0339\u0005\u0082B\u0002",
    "\u0339\u033a\u0007|\u0002\u0002\u033a\u033b\u0005\\/\u0002\u033b\u033c",
    "\u0005\u0088E\u0002\u033c\u033d\u0007`\u0002\u0002\u033d\u033e\u0007",
    "\u00f0\u0002\u0002\u033e\u0362\u0003\u0002\u0002\u0002\u033f\u0340\f",
    "\b\u0002\u0002\u0340\u0341\u0005\u0082B\u0002\u0341\u0342\u0007\u0091",
    "\u0002\u0002\u0342\u0343\u0005\\/\u0002\u0343\u0344\u0005\u0086D\u0002",
    "\u0344\u0362\u0003\u0002\u0002\u0002\u0345\u0346\f\u0007\u0002\u0002",
    "\u0346\u0347\u0005\u0082B\u0002\u0347\u0348\u0007\u0091\u0002\u0002",
    "\u0348\u0349\u0005\\/\u0002\u0349\u034a\u0005\u0088E\u0002\u034a\u034b",
    "\u0007`\u0002\u0002\u034b\u034c\u0007\u00f0\u0002\u0002\u034c\u0362",
    "\u0003\u0002\u0002\u0002\u034d\u034e\f\u0006\u0002\u0002\u034e\u034f",
    "\u0005\u0082B\u0002\u034f\u0350\u0005^0\u0002\u0350\u0351\u0005\u0184",
    "\u00c3\u0002\u0351\u0352\u0005P)\u0002\u0352\u0362\u0003\u0002\u0002",
    "\u0002\u0353\u0354\f\u0005\u0002\u0002\u0354\u0355\u0005\u0082B\u0002",
    "\u0355\u0356\u0007|\u0002\u0002\u0356\u0357\u0005\\/\u0002\u0357\u0358",
    "\u0007\u009b\u0002\u0002\u0358\u0359\u0005\u0184\u00c3\u0002\u0359\u0362",
    "\u0003\u0002\u0002\u0002\u035a\u035b\f\u0004\u0002\u0002\u035b\u035c",
    "\u0005\u0082B\u0002\u035c\u035d\u0007\u0091\u0002\u0002\u035d\u035e",
    "\u0005\\/\u0002\u035e\u035f\u0007\u009b\u0002\u0002\u035f\u0360\u0005",
    "\u0184\u00c3\u0002\u0360\u0362\u0003\u0002\u0002\u0002\u0361\u0331\u0003",
    "\u0002\u0002\u0002\u0361\u0337\u0003\u0002\u0002\u0002\u0361\u033f\u0003",
    "\u0002\u0002\u0002\u0361\u0345\u0003\u0002\u0002\u0002\u0361\u034d\u0003",
    "\u0002\u0002\u0002\u0361\u0353\u0003\u0002\u0002\u0002\u0361\u035a\u0003",
    "\u0002\u0002\u0002\u0362\u0365\u0003\u0002\u0002\u0002\u0363\u0361\u0003",
    "\u0002\u0002\u0002\u0363\u0364\u0003\u0002\u0002\u0002\u0364[\u0003",
    "\u0002\u0002\u0002\u0365\u0363\u0003\u0002\u0002\u0002\u0366\u036c\u0005",
    "`1\u0002\u0367\u0368\u0005\u0184\u00c3\u0002\u0368\u0369\u0005P)\u0002",
    "\u0369\u036a\u0005n8\u0002\u036a\u036c\u0003\u0002\u0002\u0002\u036b",
    "\u0366\u0003\u0002\u0002\u0002\u036b\u0367\u0003\u0002\u0002\u0002\u036c",
    "]\u0003\u0002\u0002\u0002\u036d\u036e\t\u0004\u0002\u0002\u036e_\u0003",
    "\u0002\u0002\u0002\u036f\u0370\u0005b2\u0002\u0370\u0371\u0005P)\u0002",
    "\u0371\u0372\u0005n8\u0002\u0372a\u0003\u0002\u0002\u0002\u0373\u0374",
    "\u0005d3\u0002\u0374\u0375\u0005l7\u0002\u0375\u037e\u0003\u0002\u0002",
    "\u0002\u0376\u0377\u0005d3\u0002\u0377\u0378\u0005h5\u0002\u0378\u0379",
    "\u0007\t\u0002\u0002\u0379\u037a\u0005j6\u0002\u037a\u037b\u0007\t\u0002",
    "\u0002\u037b\u037c\u0005l7\u0002\u037c\u037e\u0003\u0002\u0002\u0002",
    "\u037d\u0373\u0003\u0002\u0002\u0002\u037d\u0376\u0003\u0002\u0002\u0002",
    "\u037ec\u0003\u0002\u0002\u0002\u037f\u0383\u0005f4\u0002\u0380\u0381",
    "\u0007\u00cc\u0002\u0002\u0381\u0383\u0007\u001c\u0002\u0002\u0382\u037f",
    "\u0003\u0002\u0002\u0002\u0382\u0380\u0003\u0002\u0002\u0002\u0383e",
    "\u0003\u0002\u0002\u0002\u0384\u0385\u0007\"\u0002\u0002\u0385\u0386",
    "\u0007\u001c\u0002\u0002\u0386g\u0003\u0002\u0002\u0002\u0387\u0388",
    "\u0007\u00f0\u0002\u0002\u0388i\u0003\u0002\u0002\u0002\u0389\u038a",
    "\u0007\u00f0\u0002\u0002\u038ak\u0003\u0002\u0002\u0002\u038b\u038c",
    "\u0007\u00f0\u0002\u0002\u038cm\u0003\u0002\u0002\u0002\u038d\u0391",
    "\u0003\u0002\u0002\u0002\u038e\u038f\u0007\u00de\u0002\u0002\u038f\u0391",
    "\u0005p9\u0002\u0390\u038d\u0003\u0002\u0002\u0002\u0390\u038e\u0003",
    "\u0002\u0002\u0002\u0391o\u0003\u0002\u0002\u0002\u0392\u03a2\u0005",
    "r:\u0002\u0393\u03a2\u0005t;\u0002\u0394\u03a2\u0005v<\u0002\u0395\u0396",
    "\u0005t;\u0002\u0396\u0397\u0005v<\u0002\u0397\u03a2\u0003\u0002\u0002",
    "\u0002\u0398\u0399\u0005v<\u0002\u0399\u039a\u0005t;\u0002\u039a\u03a2",
    "\u0003\u0002\u0002\u0002\u039b\u039c\u0005r:\u0002\u039c\u039d\u0005",
    "v<\u0002\u039d\u03a2\u0003\u0002\u0002\u0002\u039e\u039f\u0005v<\u0002",
    "\u039f\u03a0\u0005r:\u0002\u03a0\u03a2\u0003\u0002\u0002\u0002\u03a1",
    "\u0392\u0003\u0002\u0002\u0002\u03a1\u0393\u0003\u0002\u0002\u0002\u03a1",
    "\u0394\u0003\u0002\u0002\u0002\u03a1\u0395\u0003\u0002\u0002\u0002\u03a1",
    "\u0398\u0003\u0002\u0002\u0002\u03a1\u039b\u0003\u0002\u0002\u0002\u03a1",
    "\u039e\u0003\u0002\u0002\u0002\u03a2q\u0003\u0002\u0002\u0002\u03a3",
    "\u03a4\u0005x=\u0002\u03a4\u03a5\u0007~\u0002\u0002\u03a5\u03a6\u0005",
    "\u0184\u00c3\u0002\u03a6s\u0003\u0002\u0002\u0002\u03a7\u03a8\u0007",
    "r\u0002\u0002\u03a8\u03a9\u0007\u0017\u0002\u0002\u03a9\u03aa\u0005",
    "z>\u0002\u03aa\u03ab\u0007\u0018\u0002\u0002\u03abu\u0003\u0002\u0002",
    "\u0002\u03ac\u03ad\u0007j\u0002\u0002\u03ad\u03ae\u0007\u0017\u0002",
    "\u0002\u03ae\u03af\u0005~@\u0002\u03af\u03b0\u0007\u0018\u0002\u0002",
    "\u03b0\u03b3\u0003\u0002\u0002\u0002\u03b1\u03b3\u0007\u0092\u0002\u0002",
    "\u03b2\u03ac\u0003\u0002\u0002\u0002\u03b2\u03b1\u0003\u0002\u0002\u0002",
    "\u03b3w\u0003\u0002\u0002\u0002\u03b4\u03b7\u0003\u0002\u0002\u0002",
    "\u03b5\u03b7\u0007\u00aa\u0002\u0002\u03b6\u03b4\u0003\u0002\u0002\u0002",
    "\u03b6\u03b5\u0003\u0002\u0002\u0002\u03b7y\u0003\u0002\u0002\u0002",
    "\u03b8\u03b9\b>\u0001\u0002\u03b9\u03ba\u0005|?\u0002\u03ba\u03c0\u0003",
    "\u0002\u0002\u0002\u03bb\u03bc\f\u0003\u0002\u0002\u03bc\u03bd\u0007",
    "\u001b\u0002\u0002\u03bd\u03bf\u0005|?\u0002\u03be\u03bb\u0003\u0002",
    "\u0002\u0002\u03bf\u03c2\u0003\u0002\u0002\u0002\u03c0\u03be\u0003\u0002",
    "\u0002\u0002\u03c0\u03c1\u0003\u0002\u0002\u0002\u03c1{\u0003\u0002",
    "\u0002\u0002\u03c2\u03c0\u0003\u0002\u0002\u0002\u03c3\u03c4\u0005\u013e",
    "\u00a0\u0002\u03c4\u03c5\u0005\u0148\u00a5\u0002\u03c5}\u0003\u0002",
    "\u0002\u0002\u03c6\u03c7\t\u0005\u0002\u0002\u03c7\u007f\u0003\u0002",
    "\u0002\u0002\u03c8\u03c9\u0005n8\u0002\u03c9\u0081\u0003\u0002\u0002",
    "\u0002\u03ca\u03cf\u0003\u0002\u0002\u0002\u03cb\u03cf\u0007u\u0002",
    "\u0002\u03cc\u03cd\u0007\u0083\u0002\u0002\u03cd\u03cf\u0005\u0084C",
    "\u0002\u03ce\u03ca\u0003\u0002\u0002\u0002\u03ce\u03cb\u0003\u0002\u0002",
    "\u0002\u03ce\u03cc\u0003\u0002\u0002\u0002\u03cf\u0083\u0003\u0002\u0002",
    "\u0002\u03d0\u03d3\u0003\u0002\u0002\u0002\u03d1\u03d3\u0007\u00a1\u0002",
    "\u0002\u03d2\u03d0\u0003\u0002\u0002\u0002\u03d2\u03d1\u0003\u0002\u0002",
    "\u0002\u03d3\u0085\u0003\u0002\u0002\u0002\u03d4\u03d5\u0007\u009b\u0002",
    "\u0002\u03d5\u03d6\u0005x=\u0002\u03d6\u03d7\u0007~\u0002\u0002\u03d7",
    "\u03d8\u0005\u0184\u00c3\u0002\u03d8\u0087\u0003\u0002\u0002\u0002\u03d9",
    "\u03da\u0007\u009b\u0002\u0002\u03da\u03db\u0005x=\u0002\u03db\u03dc",
    "\u0007}\u0002\u0002\u03dc\u03dd\u0005\u0184\u00c3\u0002\u03dd\u0089",
    "\u0003\u0002\u0002\u0002\u03de\u03e1\u0003\u0002\u0002\u0002\u03df\u03e1",
    "\u0005\u008cG\u0002\u03e0\u03de\u0003\u0002\u0002\u0002\u03e0\u03df",
    "\u0003\u0002\u0002\u0002\u03e1\u008b\u0003\u0002\u0002\u0002\u03e2\u03e3",
    "\u0007\u0084\u0002\u0002\u03e3\u03e4\u0005\u008eH\u0002\u03e4\u008d",
    "\u0003\u0002\u0002\u0002\u03e5\u03e6\bH\u0001\u0002\u03e6\u03e7\u0005",
    "\u0090I\u0002\u03e7\u03ed\u0003\u0002\u0002\u0002\u03e8\u03e9\f\u0003",
    "\u0002\u0002\u03e9\u03ea\u0007\u001b\u0002\u0002\u03ea\u03ec\u0005\u0090",
    "I\u0002\u03eb\u03e8\u0003\u0002\u0002\u0002\u03ec\u03ef\u0003\u0002",
    "\u0002\u0002\u03ed\u03eb\u0003\u0002\u0002\u0002\u03ed\u03ee\u0003\u0002",
    "\u0002\u0002\u03ee\u008f\u0003\u0002\u0002\u0002\u03ef\u03ed\u0003\u0002",
    "\u0002\u0002\u03f0\u03f1\u0005T+\u0002\u03f1\u03f2\u0007\u0010\u0002",
    "\u0002\u03f2\u03f3\u0005\u0184\u00c3\u0002\u03f3\u0091\u0003\u0002\u0002",
    "\u0002\u03f4\u03f8\u0003\u0002\u0002\u0002\u03f5\u03f6\u0007\u00eb\u0002",
    "\u0002\u03f6\u03f8\u0005\u0094K\u0002\u03f7\u03f4\u0003\u0002\u0002",
    "\u0002\u03f7\u03f5\u0003\u0002\u0002\u0002\u03f8\u0093\u0003\u0002\u0002",
    "\u0002\u03f9\u03fa\bK\u0001\u0002\u03fa\u03fb\u0005\u0096L\u0002\u03fb",
    "\u0401\u0003\u0002\u0002\u0002\u03fc\u03fd\f\u0003\u0002\u0002\u03fd",
    "\u03fe\u0007\u001b\u0002\u0002\u03fe\u0400\u0005\u0096L\u0002\u03ff",
    "\u03fc\u0003\u0002\u0002\u0002\u0400\u0403\u0003\u0002\u0002\u0002\u0401",
    "\u03ff\u0003\u0002\u0002\u0002\u0401\u0402\u0003\u0002\u0002\u0002\u0402",
    "\u0095\u0003\u0002\u0002\u0002\u0403\u0401\u0003\u0002\u0002\u0002\u0404",
    "\u0405\u0005T+\u0002\u0405\u0406\u0007*\u0002\u0002\u0406\u0407\u0005",
    "\u01bc\u00df\u0002\u0407\u0097\u0003\u0002\u0002\u0002\u0408\u040b\u0003",
    "\u0002\u0002\u0002\u0409\u040b\u0005\u009aN\u0002\u040a\u0408\u0003",
    "\u0002\u0002\u0002\u040a\u0409\u0003\u0002\u0002\u0002\u040b\u0099\u0003",
    "\u0002\u0002\u0002\u040c\u040d\u0007\u00e8\u0002\u0002\u040d\u040e\u0005",
    "\u0184\u00c3\u0002\u040e\u009b\u0003\u0002\u0002\u0002\u040f\u0412\u0003",
    "\u0002\u0002\u0002\u0410\u0412\u0005\u009eP\u0002\u0411\u040f\u0003",
    "\u0002\u0002\u0002\u0411\u0410\u0003\u0002\u0002\u0002\u0412\u009d\u0003",
    "\u0002\u0002\u0002\u0413\u0414\u0007g\u0002\u0002\u0414\u0415\u0007",
    "4\u0002\u0002\u0415\u0416\u0005\u00a0Q\u0002\u0416\u0417\u0005\u00a4",
    "S\u0002\u0417\u0418\u0005\u00a8U\u0002\u0418\u041b\u0003\u0002\u0002",
    "\u0002\u0419\u041b\u0005\u00a6T\u0002\u041a\u0413\u0003\u0002\u0002",
    "\u0002\u041a\u0419\u0003\u0002\u0002\u0002\u041b\u009f\u0003\u0002\u0002",
    "\u0002\u041c\u041d\bQ\u0001\u0002\u041d\u041e\u0005\u00a2R\u0002\u041e",
    "\u0424\u0003\u0002\u0002\u0002\u041f\u0420\f\u0003\u0002\u0002\u0420",
    "\u0421\u0007\u001b\u0002\u0002\u0421\u0423\u0005\u00a2R\u0002\u0422",
    "\u041f\u0003\u0002\u0002\u0002\u0423\u0426\u0003\u0002\u0002\u0002\u0424",
    "\u0422\u0003\u0002\u0002\u0002\u0424\u0425\u0003\u0002\u0002\u0002\u0425",
    "\u00a1\u0003\u0002\u0002\u0002\u0426\u0424\u0003\u0002\u0002\u0002\u0427",
    "\u0428\u0005\u0184\u00c3\u0002\u0428\u0429\u0005P)\u0002\u0429\u00a3",
    "\u0003\u0002\u0002\u0002\u042a\u042d\u0003\u0002\u0002\u0002\u042b\u042d",
    "\u0005\u00a6T\u0002\u042c\u042a\u0003\u0002\u0002\u0002\u042c\u042b",
    "\u0003\u0002\u0002\u0002\u042d\u00a5\u0003\u0002\u0002\u0002\u042e\u042f",
    "\u0007\u0085\u0002\u0002\u042f\u0430\u0005\u008eH\u0002\u0430\u00a7",
    "\u0003\u0002\u0002\u0002\u0431\u0434\u0003\u0002\u0002\u0002\u0432\u0434",
    "\u0005\u00aaV\u0002\u0433\u0431\u0003\u0002\u0002\u0002\u0433\u0432",
    "\u0003\u0002\u0002\u0002\u0434\u00a9\u0003\u0002\u0002\u0002\u0435\u0436",
    "\u0007k\u0002\u0002\u0436\u0437\u0005\u0184\u00c3\u0002\u0437\u00ab",
    "\u0003\u0002\u0002\u0002\u0438\u043b\u0003\u0002\u0002\u0002\u0439\u043b",
    "\u0005\u00aeX\u0002\u043a\u0438\u0003\u0002\u0002\u0002\u043a\u0439",
    "\u0003\u0002\u0002\u0002\u043b\u00ad\u0003\u0002\u0002\u0002\u043c\u043d",
    "\u0007\u009f\u0002\u0002\u043d\u043e\u00074\u0002\u0002\u043e\u043f",
    "\u0005\u00b0Y\u0002\u043f\u00af\u0003\u0002\u0002\u0002\u0440\u0441",
    "\bY\u0001\u0002\u0441\u0442\u0005\u00b2Z\u0002\u0442\u0448\u0003\u0002",
    "\u0002\u0002\u0443\u0444\f\u0003\u0002\u0002\u0444\u0445\u0007\u001b",
    "\u0002\u0002\u0445\u0447\u0005\u00b2Z\u0002\u0446\u0443\u0003\u0002",
    "\u0002\u0002\u0447\u044a\u0003\u0002\u0002\u0002\u0448\u0446\u0003\u0002",
    "\u0002\u0002\u0448\u0449\u0003\u0002\u0002\u0002\u0449\u00b1\u0003\u0002",
    "\u0002\u0002\u044a\u0448\u0003\u0002\u0002\u0002\u044b\u044c\u0005\u0184",
    "\u00c3\u0002\u044c\u044d\u0005\u00b4[\u0002\u044d\u044e\u0005\u00b8",
    "]\u0002\u044e\u00b3\u0003\u0002\u0002\u0002\u044f\u0452\u0003\u0002",
    "\u0002\u0002\u0450\u0452\u0005\u00b6\\\u0002\u0451\u044f\u0003\u0002",
    "\u0002\u0002\u0451\u0450\u0003\u0002\u0002\u0002\u0452\u00b5\u0003\u0002",
    "\u0002\u0002\u0453\u0454\t\u0006\u0002\u0002\u0454\u00b7\u0003\u0002",
    "\u0002\u0002\u0455\u045a\u0003\u0002\u0002\u0002\u0456\u0457\u0005\u00bc",
    "_\u0002\u0457\u0458\u0005\u00ba^\u0002\u0458\u045a\u0003\u0002\u0002",
    "\u0002\u0459\u0455\u0003\u0002\u0002\u0002\u0459\u0456\u0003\u0002\u0002",
    "\u0002\u045a\u00b9\u0003\u0002\u0002\u0002\u045b\u045c\t\u0007\u0002",
    "\u0002\u045c\u00bb\u0003\u0002\u0002\u0002\u045d\u045e\u0007\u0097\u0002",
    "\u0002\u045e\u00bd\u0003\u0002\u0002\u0002\u045f\u0462\u0003\u0002\u0002",
    "\u0002\u0460\u0462\u0005\u00c0a\u0002\u0461\u045f\u0003\u0002\u0002",
    "\u0002\u0461\u0460\u0003\u0002\u0002\u0002\u0462\u00bf\u0003\u0002\u0002",
    "\u0002\u0463\u0464\u0007\u0088\u0002\u0002\u0464\u0465\u0005\u0184\u00c3",
    "\u0002\u0465\u00c1\u0003\u0002\u0002\u0002\u0466\u0469\u0003\u0002\u0002",
    "\u0002\u0467\u0469\u0005\u00c4c\u0002\u0468\u0466\u0003\u0002\u0002",
    "\u0002\u0468\u0467\u0003\u0002\u0002\u0002\u0469\u00c3\u0003\u0002\u0002",
    "\u0002\u046a\u046b\u0007\u009a\u0002\u0002\u046b\u046c\u0005\u0184\u00c3",
    "\u0002\u046c\u00c5\u0003\u0002\u0002\u0002\u046d\u046e\u0007v\u0002",
    "\u0002\u046e\u046f\u0007x\u0002\u0002\u046f\u0470\u0005\u00caf\u0002",
    "\u0470\u0471\u0005\u00ccg\u0002\u0471\u0472\u0005\u00d0i\u0002\u0472",
    "\u0473\u0005\u00dan\u0002\u0473\u047e\u0003\u0002\u0002\u0002\u0474",
    "\u0475\u0007v\u0002\u0002\u0475\u0476\u0007x\u0002\u0002\u0476\u0477",
    "\u0005\u00caf\u0002\u0477\u0478\u0007\u0017\u0002\u0002\u0478\u0479",
    "\u0005\u00e6t\u0002\u0479\u047a\u0007\u0018\u0002\u0002\u047a\u047b",
    "\u00058\u001d\u0002\u047b\u047c\u0005\u00dan\u0002\u047c\u047e\u0003",
    "\u0002\u0002\u0002\u047d\u046d\u0003\u0002\u0002\u0002\u047d\u0474\u0003",
    "\u0002\u0002\u0002\u047e\u00c7\u0003\u0002\u0002\u0002\u047f\u0480\u0005",
    "l7\u0002\u0480\u0481\u0005P)\u0002\u0481\u048d\u0003\u0002\u0002\u0002",
    "\u0482\u0483\u0005b2\u0002\u0483\u0484\u0005P)\u0002\u0484\u048d\u0003",
    "\u0002\u0002\u0002\u0485\u0486\u0005h5\u0002\u0486\u0487\u0007\t\u0002",
    "\u0002\u0487\u0488\u0005j6\u0002\u0488\u0489\u0007\t\u0002\u0002\u0489",
    "\u048a\u0005l7\u0002\u048a\u048b\u0005P)\u0002\u048b\u048d\u0003\u0002",
    "\u0002\u0002\u048c\u047f\u0003\u0002\u0002\u0002\u048c\u0482\u0003\u0002",
    "\u0002\u0002\u048c\u0485\u0003\u0002\u0002\u0002\u048d\u00c9\u0003\u0002",
    "\u0002\u0002\u048e\u0493\u0005\u00c8e\u0002\u048f\u0490\u0005\u019e",
    "\u00d0\u0002\u0490\u0491\u0005P)\u0002\u0491\u0493\u0003\u0002\u0002",
    "\u0002\u0492\u048e\u0003\u0002\u0002\u0002\u0492\u048f\u0003\u0002\u0002",
    "\u0002\u0493\u00cb\u0003\u0002\u0002\u0002\u0494\u04a6\u0003\u0002\u0002",
    "\u0002\u0495\u0496\u0007\u0017\u0002\u0002\u0496\u0497\u0005x=\u0002",
    "\u0497\u0498\u0007}\u0002\u0002\u0498\u0499\u0007\u001b\u0002\u0002",
    "\u0499\u049a\u0007\u00e2\u0002\u0002\u049a\u049b\u0007\u0018\u0002\u0002",
    "\u049b\u04a6\u0003\u0002\u0002\u0002\u049c\u049d\u0007\u0017\u0002\u0002",
    "\u049d\u049e\u0005x=\u0002\u049e\u049f\u0007}\u0002\u0002\u049f\u04a0",
    "\u0007\u001b\u0002\u0002\u04a0\u04a1\u0007\u00e2\u0002\u0002\u04a1\u04a2",
    "\u0007\u001b\u0002\u0002\u04a2\u04a3\u0007\u009d\u0002\u0002\u04a3\u04a4",
    "\u0007\u0018\u0002\u0002\u04a4\u04a6\u0003\u0002\u0002\u0002\u04a5\u0494",
    "\u0003\u0002\u0002\u0002\u04a5\u0495\u0003\u0002\u0002\u0002\u04a5\u049c",
    "\u0003\u0002\u0002\u0002\u04a6\u00cd\u0003\u0002\u0002\u0002\u04a7\u04a8",
    "\u0005x=\u0002\u04a8\u04a9\u0007}\u0002\u0002\u04a9\u00cf\u0003\u0002",
    "\u0002\u0002\u04aa\u04ab\bi\u0001\u0002\u04ab\u04ac\u0005\u00d2j\u0002",
    "\u04ac\u04b2\u0003\u0002\u0002\u0002\u04ad\u04ae\f\u0003\u0002\u0002",
    "\u04ae\u04af\u0007\u001b\u0002\u0002\u04af\u04b1\u0005\u00d4k\u0002",
    "\u04b0\u04ad\u0003\u0002\u0002\u0002\u04b1\u04b4\u0003\u0002\u0002\u0002",
    "\u04b2\u04b0\u0003\u0002\u0002\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002",
    "\u04b3\u00d1\u0003\u0002\u0002\u0002\u04b4\u04b2\u0003\u0002\u0002\u0002",
    "\u04b5\u04b6\u0007\u00e4\u0002\u0002\u04b6\u04ba\u0005\u00d6l\u0002",
    "\u04b7\u04b8\u0007\u00e4\u0002\u0002\u04b8\u04ba\u0005\u00d8m\u0002",
    "\u04b9\u04b5\u0003\u0002\u0002\u0002\u04b9\u04b7\u0003\u0002\u0002\u0002",
    "\u04ba\u00d3\u0003\u0002\u0002\u0002\u04bb\u04bf\u0005\u00d2j\u0002",
    "\u04bc\u04bf\u0005\u00d6l\u0002\u04bd\u04bf\u0005\u00d8m\u0002\u04be",
    "\u04bb\u0003\u0002\u0002\u0002\u04be\u04bc\u0003\u0002\u0002\u0002\u04be",
    "\u04bd\u0003\u0002\u0002\u0002\u04bf\u00d5\u0003\u0002\u0002\u0002\u04c0",
    "\u04c1\u0007\u0017\u0002\u0002\u04c1\u04c2\u0005\u0184\u00c3\u0002\u04c2",
    "\u04c3\u0007\u001b\u0002\u0002\u04c3\u04c4\u0005\u0184\u00c3\u0002\u04c4",
    "\u04c5\u0007\u0018\u0002\u0002\u04c5\u00d7\u0003\u0002\u0002\u0002\u04c6",
    "\u04c7\u0007\u0017\u0002\u0002\u04c7\u04c8\u0005\u0184\u00c3\u0002\u04c8",
    "\u04c9\u0007\u001b\u0002\u0002\u04c9\u04ca\u0005\u0184\u00c3\u0002\u04ca",
    "\u04cb\u0007\u001b\u0002\u0002\u04cb\u04cc\u0005\u0184\u00c3\u0002\u04cc",
    "\u04cd\u0007\u0018\u0002\u0002\u04cd\u00d9\u0003\u0002\u0002\u0002\u04ce",
    "\u04d1\u0003\u0002\u0002\u0002\u04cf\u04d1\u0005\u00dco\u0002\u04d0",
    "\u04ce\u0003\u0002\u0002\u0002\u04d0\u04cf\u0003\u0002\u0002\u0002\u04d1",
    "\u00db\u0003\u0002\u0002\u0002\u04d2\u04d3\u0007\u00b9\u0002\u0002\u04d3",
    "\u04d4\u0005\u00dep\u0002\u04d4\u00dd\u0003\u0002\u0002\u0002\u04d5",
    "\u04da\u0005L\'\u0002\u04d6\u04d7\u0005J&\u0002\u04d7\u04d8\u0005\u0184",
    "\u00c3\u0002\u04d8\u04da\u0003\u0002\u0002\u0002\u04d9\u04d5\u0003\u0002",
    "\u0002\u0002\u04d9\u04d6\u0003\u0002\u0002\u0002\u04da\u00df\u0003\u0002",
    "\u0002\u0002\u04db\u04dc\u0005\u00ceh\u0002\u04dc\u04dd\u0005\u0184",
    "\u00c3\u0002\u04dd\u00e1\u0003\u0002\u0002\u0002\u04de\u04df\u0007\u00e2",
    "\u0002\u0002\u04df\u04e0\u0005\u0184\u00c3\u0002\u04e0\u00e3\u0003\u0002",
    "\u0002\u0002\u04e1\u04e2\u0007\u009d\u0002\u0002\u04e2\u04e3\u0005\u0184",
    "\u00c3\u0002\u04e3\u00e5\u0003\u0002\u0002\u0002\u04e4\u04f4\u0005\u00e0",
    "q\u0002\u04e5\u04e6\u0005\u00e0q\u0002\u04e6\u04e7\u0007\u001b\u0002",
    "\u0002\u04e7\u04e8\u0005\u00e2r\u0002\u04e8\u04f4\u0003\u0002\u0002",
    "\u0002\u04e9\u04ea\u0005\u00e0q\u0002\u04ea\u04eb\u0007\u001b\u0002",
    "\u0002\u04eb\u04ec\u0005\u00e2r\u0002\u04ec\u04ed\u0007\u001b\u0002",
    "\u0002\u04ed\u04ee\u0005\u00e4s\u0002\u04ee\u04f4\u0003\u0002\u0002",
    "\u0002\u04ef\u04f0\u0005\u00e0q\u0002\u04f0\u04f1\u0007\u001b\u0002",
    "\u0002\u04f1\u04f2\u0005\u00e4s\u0002\u04f2\u04f4\u0003\u0002\u0002",
    "\u0002\u04f3\u04e4\u0003\u0002\u0002\u0002\u04f3\u04e5\u0003\u0002\u0002",
    "\u0002\u04f3\u04e9\u0003\u0002\u0002\u0002\u04f3\u04ef\u0003\u0002\u0002",
    "\u0002\u04f4\u00e7\u0003\u0002\u0002\u0002\u04f5\u04f6\u0007\u00dd\u0002",
    "\u0002\u04f6\u04f7\u0007x\u0002\u0002\u04f7\u04f8\u0005\u00caf\u0002",
    "\u04f8\u04f9\u0005\u00ccg\u0002\u04f9\u04fa\u0005\u00d0i\u0002\u04fa",
    "\u04fb\u0005\u00dan\u0002\u04fb\u0506\u0003\u0002\u0002\u0002\u04fc",
    "\u04fd\u0007\u00dd\u0002\u0002\u04fd\u04fe\u0007x\u0002\u0002\u04fe",
    "\u04ff\u0005\u00caf\u0002\u04ff\u0500\u0007\u0017\u0002\u0002\u0500",
    "\u0501\u0005\u00e6t\u0002\u0501\u0502\u0007\u0018\u0002\u0002\u0502",
    "\u0503\u00058\u001d\u0002\u0503\u0504\u0005\u00dan\u0002\u0504\u0506",
    "\u0003\u0002\u0002\u0002\u0505\u04f5\u0003\u0002\u0002\u0002\u0505\u04fc",
    "\u0003\u0002\u0002\u0002\u0506\u00e9\u0003\u0002\u0002\u0002\u0507\u0508",
    "\u0007H\u0002\u0002\u0508\u0509\u0007b\u0002\u0002\u0509\u050a\u0005",
    "\u00caf\u0002\u050a\u050b\u0005\u0080A\u0002\u050b\u050c\u0005\u0098",
    "M\u0002\u050c\u050d\u0005\u00be`\u0002\u050d\u050e\u0005\u00dan\u0002",
    "\u050e\u00eb\u0003\u0002\u0002\u0002\u050f\u0510\u0007\u00dc\u0002\u0002",
    "\u0510\u0511\u0005\u00caf\u0002\u0511\u0512\u0005\u0080A\u0002\u0512",
    "\u0513\u0005\u00eex\u0002\u0513\u0514\u0005\u0104\u0083\u0002\u0514",
    "\u0515\u0005\u0098M\u0002\u0515\u0516\u0005\u00be`\u0002\u0516\u0517",
    "\u0005\u00dan\u0002\u0517\u0529\u0003\u0002\u0002\u0002\u0518\u0519",
    "\u0007\u00dc\u0002\u0002\u0519\u051a\u0005\u00caf\u0002\u051a\u051b",
    "\u0005\u0080A\u0002\u051b\u051c\u0005\u00eex\u0002\u051c\u051d\u0005",
    "\u0098M\u0002\u051d\u051e\u0005\u00be`\u0002\u051e\u051f\u0005\u00da",
    "n\u0002\u051f\u0529\u0003\u0002\u0002\u0002\u0520\u0521\u0007\u00dc",
    "\u0002\u0002\u0521\u0522\u0005\u00caf\u0002\u0522\u0523\u0005\u0080",
    "A\u0002\u0523\u0524\u0005\u0104\u0083\u0002\u0524\u0525\u0005\u0098",
    "M\u0002\u0525\u0526\u0005\u00be`\u0002\u0526\u0527\u0005\u00dan\u0002",
    "\u0527\u0529\u0003\u0002\u0002\u0002\u0528\u050f\u0003\u0002\u0002\u0002",
    "\u0528\u0518\u0003\u0002\u0002\u0002\u0528\u0520\u0003\u0002\u0002\u0002",
    "\u0529\u00ed\u0003\u0002\u0002\u0002\u052a\u052b\u0007\u00c6\u0002\u0002",
    "\u052b\u052c\u0005\u00f0y\u0002\u052c\u00ef\u0003\u0002\u0002\u0002",
    "\u052d\u052e\by\u0001\u0002\u052e\u052f\u0005\u00f2z\u0002\u052f\u0535",
    "\u0003\u0002\u0002\u0002\u0530\u0531\f\u0003\u0002\u0002\u0531\u0532",
    "\u0007\u001b\u0002\u0002\u0532\u0534\u0005\u00f2z\u0002\u0533\u0530",
    "\u0003\u0002\u0002\u0002\u0534\u0537\u0003\u0002\u0002\u0002\u0535\u0533",
    "\u0003\u0002\u0002\u0002\u0535\u0536\u0003\u0002\u0002\u0002\u0536\u00f1",
    "\u0003\u0002\u0002\u0002\u0537\u0535\u0003\u0002\u0002\u0002\u0538\u0539",
    "\u0005\u0182\u00c2\u0002\u0539\u053a\u0007\u0010\u0002\u0002\u053a\u053b",
    "\u0005\u0184\u00c3\u0002\u053b\u053c\u0005\u00f6|\u0002\u053c\u0544",
    "\u0003\u0002\u0002\u0002\u053d\u053e\u0005\u00f4{\u0002\u053e\u053f",
    "\u0007\t\u0002\u0002\u053f\u0540\u0005\u0182\u00c2\u0002\u0540\u0541",
    "\u0007\u0010\u0002\u0002\u0541\u0542\u0005\u0184\u00c3\u0002\u0542\u0544",
    "\u0003\u0002\u0002\u0002\u0543\u0538\u0003\u0002\u0002\u0002\u0543\u053d",
    "\u0003\u0002\u0002\u0002\u0544\u00f3\u0003\u0002\u0002\u0002\u0545\u0546",
    "\u0005\u01ae\u00d8\u0002\u0546\u0547\u0007\u0017\u0002\u0002\u0547\u0548",
    "\u0005\u019a\u00ce\u0002\u0548\u0549\u0007\u0018\u0002\u0002\u0549\u00f5",
    "\u0003\u0002\u0002\u0002\u054a\u054d\u0003\u0002\u0002\u0002\u054b\u054d",
    "\u0005\u00f8}\u0002\u054c\u054a\u0003\u0002\u0002\u0002\u054c\u054b",
    "\u0003\u0002\u0002\u0002\u054d\u00f7\u0003\u0002\u0002\u0002\u054e\u054f",
    "\u0005\u00fa~\u0002\u054f\u0550\u0005\u0102\u0082\u0002\u0550\u0551",
    "\u0007R\u0002\u0002\u0551\u00f9\u0003\u0002\u0002\u0002\u0552\u0553",
    "\b~\u0001\u0002\u0553\u0554\u0007`\u0002\u0002\u0554\u0555\u0005\u00fc",
    "\u007f\u0002\u0555\u055b\u0003\u0002\u0002\u0002\u0556\u0557\f\u0003",
    "\u0002\u0002\u0557\u0558\u0007`\u0002\u0002\u0558\u055a\u0005\u00fc",
    "\u007f\u0002\u0559\u0556\u0003\u0002\u0002\u0002\u055a\u055d\u0003\u0002",
    "\u0002\u0002\u055b\u0559\u0003\u0002\u0002\u0002\u055b\u055c\u0003\u0002",
    "\u0002\u0002\u055c\u00fb\u0003\u0002\u0002\u0002\u055d\u055b\u0003\u0002",
    "\u0002\u0002\u055e\u055f\b\u007f\u0001\u0002\u055f\u0560\u0005\u00fe",
    "\u0080\u0002\u0560\u0566\u0003\u0002\u0002\u0002\u0561\u0562\f\u0003",
    "\u0002\u0002\u0562\u0563\u0007\u001b\u0002\u0002\u0563\u0565\u0005\u00fe",
    "\u0080\u0002\u0564\u0561\u0003\u0002\u0002\u0002\u0565\u0568\u0003\u0002",
    "\u0002\u0002\u0566\u0564\u0003\u0002\u0002\u0002\u0566\u0567\u0003\u0002",
    "\u0002\u0002\u0567\u00fd\u0003\u0002\u0002\u0002\u0568\u0566\u0003\u0002",
    "\u0002\u0002\u0569\u056a\u0005\u0100\u0081\u0002\u056a\u056b\u0007o",
    "\u0002\u0002\u056b\u056c\u0005\u0184\u00c3\u0002\u056c\u057e\u0003\u0002",
    "\u0002\u0002\u056d\u056e\u0005\u0100\u0081\u0002\u056e\u056f\u0007\u00ec",
    "\u0002\u0002\u056f\u0570\u0005\u0184\u00c3\u0002\u0570\u057e\u0003\u0002",
    "\u0002\u0002\u0571\u0572\u0005\u0100\u0081\u0002\u0572\u0573\u0007\u001c",
    "\u0002\u0002\u0573\u0574\u0005\u0100\u0081\u0002\u0574\u0575\u0007o",
    "\u0002\u0002\u0575\u0576\u0005\u0184\u00c3\u0002\u0576\u057e\u0003\u0002",
    "\u0002\u0002\u0577\u0578\u0005\u0100\u0081\u0002\u0578\u0579\u0007\u001c",
    "\u0002\u0002\u0579\u057a\u0005\u0100\u0081\u0002\u057a\u057b\u0007\u00ec",
    "\u0002\u0002\u057b\u057c\u0005\u0184\u00c3\u0002\u057c\u057e\u0003\u0002",
    "\u0002\u0002\u057d\u0569\u0003\u0002\u0002\u0002\u057d\u056d\u0003\u0002",
    "\u0002\u0002\u057d\u0571\u0003\u0002\u0002\u0002\u057d\u0577\u0003\u0002",
    "\u0002\u0002\u057e\u00ff\u0003\u0002\u0002\u0002\u057f\u0580\u0007\u00f0",
    "\u0002\u0002\u0580\u0101\u0003\u0002\u0002\u0002\u0581\u0585\u0003\u0002",
    "\u0002\u0002\u0582\u0583\u0007\u00e7\u0002\u0002\u0583\u0585\u0005\u0184",
    "\u00c3\u0002\u0584\u0581\u0003\u0002\u0002\u0002\u0584\u0582\u0003\u0002",
    "\u0002\u0002\u0585\u0103\u0003\u0002\u0002\u0002\u0586\u0587\u0007\u00db",
    "\u0002\u0002\u0587\u0588\u0005\u0106\u0084\u0002\u0588\u0105\u0003\u0002",
    "\u0002\u0002\u0589\u058a\b\u0084\u0001\u0002\u058a\u058b\u0005\u0108",
    "\u0085\u0002\u058b\u0591\u0003\u0002\u0002\u0002\u058c\u058d\f\u0003",
    "\u0002\u0002\u058d\u058e\u0007\u001b\u0002\u0002\u058e\u0590\u0005\u0108",
    "\u0085\u0002\u058f\u058c\u0003\u0002\u0002\u0002\u0590\u0593\u0003\u0002",
    "\u0002\u0002\u0591\u058f\u0003\u0002\u0002\u0002\u0591\u0592\u0003\u0002",
    "\u0002\u0002\u0592\u0107\u0003\u0002\u0002\u0002\u0593\u0591\u0003\u0002",
    "\u0002\u0002\u0594\u0595\u0005\u0182\u00c2\u0002\u0595\u0596\u0005\u00f6",
    "|\u0002\u0596\u0109\u0003\u0002\u0002\u0002\u0597\u0598\u0007\u008e",
    "\u0002\u0002\u0598\u0599\u0007x\u0002\u0002\u0599\u059a\u0005\u00c8",
    "e\u0002\u059a\u059b\u0005\u010c\u0087\u0002\u059b\u059c\u0007\u00e0",
    "\u0002\u0002\u059c\u059d\u0005\\/\u0002\u059d\u059e\u0007\u009b\u0002",
    "\u0002\u059e\u059f\u0005\u010e\u0088\u0002\u059f\u05a0\u0005\u0184\u00c3",
    "\u0002\u05a0\u05a1\u0005\u0110\u0089\u0002\u05a1\u05a2\u0005\u00be`",
    "\u0002\u05a2\u05a3\u0005\u00dan\u0002\u05a3\u010b\u0003\u0002\u0002",
    "\u0002\u05a4\u05a5\u0005n8\u0002\u05a5\u010d\u0003\u0002\u0002\u0002",
    "\u05a6\u05a9\u0003\u0002\u0002\u0002\u05a7\u05a9\u0005\u00ceh\u0002",
    "\u05a8\u05a6\u0003\u0002\u0002\u0002\u05a8\u05a7\u0003\u0002\u0002\u0002",
    "\u05a9\u010f\u0003\u0002\u0002\u0002\u05aa\u05c0\u0003\u0002\u0002\u0002",
    "\u05ab\u05ac\u0007\u00e7\u0002\u0002\u05ac\u05ad\u0007\u008c\u0002\u0002",
    "\u05ad\u05ae\u0007\u00cd\u0002\u0002\u05ae\u05af\u0007\u00dc\u0002\u0002",
    "\u05af\u05b0\u0005\u0116\u008c\u0002\u05b0\u05b1\u0005\u0112\u008a\u0002",
    "\u05b1\u05c0\u0003\u0002\u0002\u0002\u05b2\u05b3\u0007\u00e7\u0002\u0002",
    "\u05b3\u05b4\u0007\u008c\u0002\u0002\u05b4\u05b5\u0007\u00cd\u0002\u0002",
    "\u05b5\u05b6\u0007H\u0002\u0002\u05b6\u05b7\u0005\u0118\u008d\u0002",
    "\u05b7\u05b8\u0005\u0114\u008b\u0002\u05b8\u05c0\u0003\u0002\u0002\u0002",
    "\u05b9\u05ba\u0007\u00e7\u0002\u0002\u05ba\u05bb\u0007\u0094\u0002\u0002",
    "\u05bb\u05bc\u0007\u008c\u0002\u0002\u05bc\u05bd\u0007\u00cd\u0002\u0002",
    "\u05bd\u05be\u0007v\u0002\u0002\u05be\u05c0\u0005\u011a\u008e\u0002",
    "\u05bf\u05aa\u0003\u0002\u0002\u0002\u05bf\u05ab\u0003\u0002\u0002\u0002",
    "\u05bf\u05b2\u0003\u0002\u0002\u0002\u05bf\u05b9\u0003\u0002\u0002\u0002",
    "\u05c0\u0111\u0003\u0002\u0002\u0002\u05c1\u05d0\u0003\u0002\u0002\u0002",
    "\u05c2\u05c3\u0007\u00e7\u0002\u0002\u05c3\u05c4\u0007\u008c\u0002\u0002",
    "\u05c4\u05c5\u0007\u00cd\u0002\u0002\u05c5\u05c6\u0007H\u0002\u0002",
    "\u05c6\u05c7\u0005\u0118\u008d\u0002\u05c7\u05c8\u0005\u0114\u008b\u0002",
    "\u05c8\u05d0\u0003\u0002\u0002\u0002\u05c9\u05ca\u0007\u00e7\u0002\u0002",
    "\u05ca\u05cb\u0007\u0094\u0002\u0002\u05cb\u05cc\u0007\u008c\u0002\u0002",
    "\u05cc\u05cd\u0007\u00cd\u0002\u0002\u05cd\u05ce\u0007v\u0002\u0002",
    "\u05ce\u05d0\u0005\u011a\u008e\u0002\u05cf\u05c1\u0003\u0002\u0002\u0002",
    "\u05cf\u05c2\u0003\u0002\u0002\u0002\u05cf\u05c9\u0003\u0002\u0002\u0002",
    "\u05d0\u0113\u0003\u0002\u0002\u0002\u05d1\u05d9\u0003\u0002\u0002\u0002",
    "\u05d2\u05d3\u0007\u00e7\u0002\u0002\u05d3\u05d4\u0007\u0094\u0002\u0002",
    "\u05d4\u05d5\u0007\u008c\u0002\u0002\u05d5\u05d6\u0007\u00cd\u0002\u0002",
    "\u05d6\u05d7\u0007v\u0002\u0002\u05d7\u05d9\u0005\u011a\u008e\u0002",
    "\u05d8\u05d1\u0003\u0002\u0002\u0002\u05d8\u05d2\u0003\u0002\u0002\u0002",
    "\u05d9\u0115\u0003\u0002\u0002\u0002\u05da\u05db\u0005\u00eex\u0002",
    "\u05db\u05dc\u0005\u0098M\u0002\u05dc\u05e5\u0003\u0002\u0002\u0002",
    "\u05dd\u05de\u0005\u00eex\u0002\u05de\u05df\u0005\u0104\u0083\u0002",
    "\u05df\u05e0\u0005\u0098M\u0002\u05e0\u05e5\u0003\u0002\u0002\u0002",
    "\u05e1\u05e2\u0005\u0104\u0083\u0002\u05e2\u05e3\u0005\u0098M\u0002",
    "\u05e3\u05e5\u0003\u0002\u0002\u0002\u05e4\u05da\u0003\u0002\u0002\u0002",
    "\u05e4\u05dd\u0003\u0002\u0002\u0002\u05e4\u05e1\u0003\u0002\u0002\u0002",
    "\u05e5\u0117\u0003\u0002\u0002\u0002\u05e6\u05e7\u0005\u0098M\u0002",
    "\u05e7\u0119\u0003\u0002\u0002\u0002\u05e8\u05e9\u0005\u0184\u00c3\u0002",
    "\u05e9\u05ea\u0005\u0098M\u0002\u05ea\u05f7\u0003\u0002\u0002\u0002",
    "\u05eb\u05ec\u0005\u00d6l\u0002\u05ec\u05ed\u0005\u0098M\u0002\u05ed",
    "\u05f7\u0003\u0002\u0002\u0002\u05ee\u05ef\u0005\u00d8m\u0002\u05ef",
    "\u05f0\u0005\u0098M\u0002\u05f0\u05f7\u0003\u0002\u0002\u0002\u05f1",
    "\u05f2\u0007\u0017\u0002\u0002\u05f2\u05f3\u0005\u00e6t\u0002\u05f3",
    "\u05f4\u0007\u0018\u0002\u0002\u05f4\u05f5\u0005\u0098M\u0002\u05f5",
    "\u05f7\u0003\u0002\u0002\u0002\u05f6\u05e8\u0003\u0002\u0002\u0002\u05f6",
    "\u05eb\u0003\u0002\u0002\u0002\u05f6\u05ee\u0003\u0002\u0002\u0002\u05f6",
    "\u05f1\u0003\u0002\u0002\u0002\u05f7\u011b\u0003\u0002\u0002\u0002\u05f8",
    "\u05f9\u0007f\u0002\u0002\u05f9\u05fa\u0005\u011e\u0090\u0002\u05fa",
    "\u05fb\u0007\u00cf\u0002\u0002\u05fb\u05fc\u0005\u0126\u0094\u0002\u05fc",
    "\u0605\u0003\u0002\u0002\u0002\u05fd\u05fe\u0007f\u0002\u0002\u05fe",
    "\u05ff\u0005\u011e\u0090\u0002\u05ff\u0600\u0007\u009b\u0002\u0002\u0600",
    "\u0601\u0005\u0122\u0092\u0002\u0601\u0602\u0007\u00cf\u0002\u0002\u0602",
    "\u0603\u0005\u0126\u0094\u0002\u0603\u0605\u0003\u0002\u0002\u0002\u0604",
    "\u05f8\u0003\u0002\u0002\u0002\u0604\u05fd\u0003\u0002\u0002\u0002\u0605",
    "\u011d\u0003\u0002\u0002\u0002\u0606\u0607\b\u0090\u0001\u0002\u0607",
    "\u0608\u0005\u0120\u0091\u0002\u0608\u060e\u0003\u0002\u0002\u0002\u0609",
    "\u060a\f\u0003\u0002\u0002\u060a\u060b\u0007\u001b\u0002\u0002\u060b",
    "\u060d\u0005\u0120\u0091\u0002\u060c\u0609\u0003\u0002\u0002\u0002\u060d",
    "\u0610\u0003\u0002\u0002\u0002\u060e\u060c\u0003\u0002\u0002\u0002\u060e",
    "\u060f\u0003\u0002\u0002\u0002\u060f\u011f\u0003\u0002\u0002\u0002\u0610",
    "\u060e\u0003\u0002\u0002\u0002\u0611\u0612\t\b\u0002\u0002\u0612\u0121",
    "\u0003\u0002\u0002\u0002\u0613\u0614\b\u0092\u0001\u0002\u0614\u0615",
    "\u0005\u0124\u0093\u0002\u0615\u061b\u0003\u0002\u0002\u0002\u0616\u0617",
    "\f\u0003\u0002\u0002\u0617\u0618\u0007\u001b\u0002\u0002\u0618\u061a",
    "\u0005\u0124\u0093\u0002\u0619\u0616\u0003\u0002\u0002\u0002\u061a\u061d",
    "\u0003\u0002\u0002\u0002\u061b\u0619\u0003\u0002\u0002\u0002\u061b\u061c",
    "\u0003\u0002\u0002\u0002\u061c\u0123\u0003\u0002\u0002\u0002\u061d\u061b",
    "\u0003\u0002\u0002\u0002\u061e\u0639\u0005l7\u0002\u061f\u0620\u0005",
    "f4\u0002\u0620\u0621\u0005l7\u0002\u0621\u0639\u0003\u0002\u0002\u0002",
    "\u0622\u0623\u0005f4\u0002\u0623\u0624\u0005h5\u0002\u0624\u0625\u0007",
    "\t\u0002\u0002\u0625\u0626\u0005j6\u0002\u0626\u0627\u0007\t\u0002\u0002",
    "\u0627\u0628\u0005l7\u0002\u0628\u0639\u0003\u0002\u0002\u0002\u0629",
    "\u062a\u0005h5\u0002\u062a\u062b\u0007\t\u0002\u0002\u062b\u062c\u0005",
    "j6\u0002\u062c\u062d\u0007\t\u0002\u0002\u062d\u062e\u0005l7\u0002\u062e",
    "\u0639\u0003\u0002\u0002\u0002\u062f\u0630\u0005f4\u0002\u0630\u0631",
    "\u0005h5\u0002\u0631\u0632\u0007\t\u0002\u0002\u0632\u0633\u0005j6\u0002",
    "\u0633\u0639\u0003\u0002\u0002\u0002\u0634\u0635\u0005h5\u0002\u0635",
    "\u0636\u0007\t\u0002\u0002\u0636\u0637\u0005j6\u0002\u0637\u0639\u0003",
    "\u0002\u0002\u0002\u0638\u061e\u0003\u0002\u0002\u0002\u0638\u061f\u0003",
    "\u0002\u0002\u0002\u0638\u0622\u0003\u0002\u0002\u0002\u0638\u0629\u0003",
    "\u0002\u0002\u0002\u0638\u062f\u0003\u0002\u0002\u0002\u0638\u0634\u0003",
    "\u0002\u0002\u0002\u0639\u0125\u0003\u0002\u0002\u0002\u063a\u063b\b",
    "\u0094\u0001\u0002\u063b\u063c\u0005\u0128\u0095\u0002\u063c\u0642\u0003",
    "\u0002\u0002\u0002\u063d\u063e\f\u0003\u0002\u0002\u063e\u063f\u0007",
    "\u001b\u0002\u0002\u063f\u0641\u0005\u0128\u0095\u0002\u0640\u063d\u0003",
    "\u0002\u0002\u0002\u0641\u0644\u0003\u0002\u0002\u0002\u0642\u0640\u0003",
    "\u0002\u0002\u0002\u0642\u0643\u0003\u0002\u0002\u0002\u0643\u0127\u0003",
    "\u0002\u0002\u0002\u0644\u0642\u0003\u0002\u0002\u0002\u0645\u064a\u0007",
    "\u00f0\u0002\u0002\u0646\u0647\u0007\u00f0\u0002\u0002\u0647\u0648\u0007",
    "\u001c\u0002\u0002\u0648\u064a\u0007\u00f0\u0002\u0002\u0649\u0645\u0003",
    "\u0002\u0002\u0002\u0649\u0646\u0003\u0002\u0002\u0002\u064a\u0129\u0003",
    "\u0002\u0002\u0002\u064b\u064c\u0007\u00ba\u0002\u0002\u064c\u064d\u0005",
    "\u011e\u0090\u0002\u064d\u064e\u0007b\u0002\u0002\u064e\u064f\u0005",
    "\u0126\u0094\u0002\u064f\u0658\u0003\u0002\u0002\u0002\u0650\u0651\u0007",
    "\u00ba\u0002\u0002\u0651\u0652\u0005\u011e\u0090\u0002\u0652\u0653\u0007",
    "\u009b\u0002\u0002\u0653\u0654\u0005\u0122\u0092\u0002\u0654\u0655\u0007",
    "b\u0002\u0002\u0655\u0656\u0005\u0126\u0094\u0002\u0656\u0658\u0003",
    "\u0002\u0002\u0002\u0657\u064b\u0003\u0002\u0002\u0002\u0657\u0650\u0003",
    "\u0002\u0002\u0002\u0658\u012b\u0003\u0002\u0002\u0002\u0659\u065a\u0007",
    "A\u0002\u0002\u065a\u065b\u0007\u00c3\u0002\u0002\u065b\u065c\u0005",
    "\u0144\u00a3\u0002\u065c\u012d\u0003\u0002\u0002\u0002\u065d\u065e\u0007",
    "N\u0002\u0002\u065e\u065f\u0007\u00c3\u0002\u0002\u065f\u0660\u0005",
    "\u0144\u00a3\u0002\u0660\u012f\u0003\u0002\u0002\u0002\u0661\u0662\u0007",
    "A\u0002\u0002\u0662\u0663\u0007:\u0002\u0002\u0663\u0664\u0005\u0140",
    "\u00a1\u0002\u0664\u0131\u0003\u0002\u0002\u0002\u0665\u0666\u0007N",
    "\u0002\u0002\u0666\u0667\u0007:\u0002\u0002\u0667\u0668\u0005\u0140",
    "\u00a1\u0002\u0668\u0133\u0003\u0002\u0002\u0002\u0669\u066a\u0005\u0136",
    "\u009c\u0002\u066a\u066b\u0007:\u0002\u0002\u066b\u066c\u0005\u0140",
    "\u00a1\u0002\u066c\u0135\u0003\u0002\u0002\u0002\u066d\u066e\t\t\u0002",
    "\u0002\u066e\u0137\u0003\u0002\u0002\u0002\u066f\u0670\u0007A\u0002",
    "\u0002\u0670\u0671\u0007\u00aa\u0002\u0002\u0671\u0672\u0007r\u0002",
    "\u0002\u0672\u0673\u0005\u013a\u009e\u0002\u0673\u0674\u0007\u009b\u0002",
    "\u0002\u0674\u0675\u0005\u0140\u00a1\u0002\u0675\u0676\u0005\u0146\u00a4",
    "\u0002\u0676\u0677\u0005\u0148\u00a5\u0002\u0677\u0678\u0005\u014c\u00a7",
    "\u0002\u0678\u0687\u0003\u0002\u0002\u0002\u0679\u067a\u0007A\u0002",
    "\u0002\u067a\u067b\u0007r\u0002\u0002\u067b\u067c\u0005\u013c\u009f",
    "\u0002\u067c\u067d\u0007\u009b\u0002\u0002\u067d\u067e\u0005\u0140\u00a1",
    "\u0002\u067e\u067f\u0007\u0017\u0002\u0002\u067f\u0680\u0005\u0150\u00a9",
    "\u0002\u0680\u0681\u0007\u0018\u0002\u0002\u0681\u0682\u0005\u0146\u00a4",
    "\u0002\u0682\u0683\u0005\u015a\u00ae\u0002\u0683\u0684\u0005\u0148\u00a5",
    "\u0002\u0684\u0685\u0005\u014c\u00a7\u0002\u0685\u0687\u0003\u0002\u0002",
    "\u0002\u0686\u066f\u0003\u0002\u0002\u0002\u0686\u0679\u0003\u0002\u0002",
    "\u0002\u0687\u0139\u0003\u0002\u0002\u0002\u0688\u068b\u0003\u0002\u0002",
    "\u0002\u0689\u068b\u0005\u013c\u009f\u0002\u068a\u0688\u0003\u0002\u0002",
    "\u0002\u068a\u0689\u0003\u0002\u0002\u0002\u068b\u013b\u0003\u0002\u0002",
    "\u0002\u068c\u068d\u0007\u00f0\u0002\u0002\u068d\u013d\u0003\u0002\u0002",
    "\u0002\u068e\u0691\u0003\u0002\u0002\u0002\u068f\u0691\u0005\u013c\u009f",
    "\u0002\u0690\u068e\u0003\u0002\u0002\u0002\u0690\u068f\u0003\u0002\u0002",
    "\u0002\u0691\u013f\u0003\u0002\u0002\u0002\u0692\u069d\u0005\u0142\u00a2",
    "\u0002\u0693\u0694\u0005f4\u0002\u0694\u0695\u0005h5\u0002\u0695\u069d",
    "\u0003\u0002\u0002\u0002\u0696\u0697\u0005h5\u0002\u0697\u0698\u0007",
    "\t\u0002\u0002\u0698\u0699\u0005j6\u0002\u0699\u069a\u0007\t\u0002\u0002",
    "\u069a\u069b\u0005l7\u0002\u069b\u069d\u0003\u0002\u0002\u0002\u069c",
    "\u0692\u0003\u0002\u0002\u0002\u069c\u0693\u0003\u0002\u0002\u0002\u069c",
    "\u0696\u0003\u0002\u0002\u0002\u069d\u0141\u0003\u0002\u0002\u0002\u069e",
    "\u06a7\u0005l7\u0002\u069f\u06a0\u0005f4\u0002\u06a0\u06a1\u0005h5\u0002",
    "\u06a1\u06a2\u0007\t\u0002\u0002\u06a2\u06a3\u0005j6\u0002\u06a3\u06a4",
    "\u0007\t\u0002\u0002\u06a4\u06a5\u0005l7\u0002\u06a5\u06a7\u0003\u0002",
    "\u0002\u0002\u06a6\u069e\u0003\u0002\u0002\u0002\u06a6\u069f\u0003\u0002",
    "\u0002\u0002\u06a7\u0143\u0003\u0002\u0002\u0002\u06a8\u06a9\u0005f",
    "4\u0002\u06a9\u06aa\u0005h5\u0002\u06aa\u06ab\u0007\t\u0002\u0002\u06ab",
    "\u06ac\u0005j6\u0002\u06ac\u06b2\u0003\u0002\u0002\u0002\u06ad\u06ae",
    "\u0005h5\u0002\u06ae\u06af\u0007\t\u0002\u0002\u06af\u06b0\u0005j6\u0002",
    "\u06b0\u06b2\u0003\u0002\u0002\u0002\u06b1\u06a8\u0003\u0002\u0002\u0002",
    "\u06b1\u06ad\u0003\u0002\u0002\u0002\u06b2\u0145\u0003\u0002\u0002\u0002",
    "\u06b3\u06bc\u0003\u0002\u0002\u0002\u06b4\u06b5\u0007\u00a4\u0002\u0002",
    "\u06b5\u06b6\u00074\u0002\u0002\u06b6\u06b7\u0007j\u0002\u0002\u06b7",
    "\u06b8\u0007\u0017\u0002\u0002\u06b8\u06b9\u0005\u019c\u00cf\u0002\u06b9",
    "\u06ba\u0007\u0018\u0002\u0002\u06ba\u06bc\u0003\u0002\u0002\u0002\u06bb",
    "\u06b3\u0003\u0002\u0002\u0002\u06bb\u06b4\u0003\u0002\u0002\u0002\u06bc",
    "\u0147\u0003\u0002\u0002\u0002\u06bd\u06c0\u0003\u0002\u0002\u0002\u06be",
    "\u06c0\u0005\u014a\u00a6\u0002\u06bf\u06bd\u0003\u0002\u0002\u0002\u06bf",
    "\u06be\u0003\u0002\u0002\u0002\u06c0\u0149\u0003\u0002\u0002\u0002\u06c1",
    "\u06c2\u0007\u00e0\u0002\u0002\u06c2\u06c8\u0007\u00e6\u0002\u0002\u06c3",
    "\u06c4\u0007\u00e0\u0002\u0002\u06c4\u06c8\u0007i\u0002\u0002\u06c5",
    "\u06c6\u0007\u00e0\u0002\u0002\u06c6\u06c8\u0007c\u0002\u0002\u06c7",
    "\u06c1\u0003\u0002\u0002\u0002\u06c7\u06c3\u0003\u0002\u0002\u0002\u06c7",
    "\u06c5\u0003\u0002\u0002\u0002\u06c8\u014b\u0003\u0002\u0002\u0002\u06c9",
    "\u06cc\u0003\u0002\u0002\u0002\u06ca\u06cc\u0005\u014e\u00a8\u0002\u06cb",
    "\u06c9\u0003\u0002\u0002\u0002\u06cb\u06ca\u0003\u0002\u0002\u0002\u06cc",
    "\u014d\u0003\u0002\u0002\u0002\u06cd\u06ce\u0007\u00eb\u0002\u0002\u06ce",
    "\u06cf\u0005\u0184\u00c3\u0002\u06cf\u014f\u0003\u0002\u0002\u0002\u06d0",
    "\u06d1\b\u00a9\u0001\u0002\u06d1\u06d2\u0005\u0152\u00aa\u0002\u06d2",
    "\u06d8\u0003\u0002\u0002\u0002\u06d3\u06d4\f\u0003\u0002\u0002\u06d4",
    "\u06d5\u0007\u001b\u0002\u0002\u06d5\u06d7\u0005\u0152\u00aa\u0002\u06d6",
    "\u06d3\u0003\u0002\u0002\u0002\u06d7\u06da\u0003\u0002\u0002\u0002\u06d8",
    "\u06d6\u0003\u0002\u0002\u0002\u06d8\u06d9\u0003\u0002\u0002\u0002\u06d9",
    "\u0151\u0003\u0002\u0002\u0002\u06da\u06d8\u0003\u0002\u0002\u0002\u06db",
    "\u06dc\u0005\u0154\u00ab\u0002\u06dc\u06dd\u0005\u015c\u00af\u0002\u06dd",
    "\u0153\u0003\u0002\u0002\u0002\u06de\u06e9\u0005\u0156\u00ac\u0002\u06df",
    "\u06e0\u0005\u0158\u00ad\u0002\u06e0\u06e1\u0005\u0156\u00ac\u0002\u06e1",
    "\u06e9\u0003\u0002\u0002\u0002\u06e2\u06e3\u0005\u0158\u00ad\u0002\u06e3",
    "\u06e4\u0007L\u0002\u0002\u06e4\u06e5\u0005\u0156\u00ac\u0002\u06e5",
    "\u06e9\u0003\u0002\u0002\u0002\u06e6\u06e7\u0007L\u0002\u0002\u06e7",
    "\u06e9\u0005\u0156\u00ac\u0002\u06e8\u06de\u0003\u0002\u0002\u0002\u06e8",
    "\u06df\u0003\u0002\u0002\u0002\u06e8\u06e2\u0003\u0002\u0002\u0002\u06e8",
    "\u06e6\u0003\u0002\u0002\u0002\u06e9\u0155\u0003\u0002\u0002\u0002\u06ea",
    "\u06eb\u0005\u0184\u00c3\u0002\u06eb\u0157\u0003\u0002\u0002\u0002\u06ec",
    "\u06ed\t\n\u0002\u0002\u06ed\u0159\u0003\u0002\u0002\u0002\u06ee\u06f2",
    "\u0003\u0002\u0002\u0002\u06ef\u06f0\u0007\u00e8\u0002\u0002\u06f0\u06f2",
    "\u0005\u0156\u00ac\u0002\u06f1\u06ee\u0003\u0002\u0002\u0002\u06f1\u06ef",
    "\u0003\u0002\u0002\u0002\u06f2\u015b\u0003\u0002\u0002\u0002\u06f3\u06f9",
    "\u0003\u0002\u0002\u0002\u06f4\u06f9\u0005\u015e\u00b0\u0002\u06f5\u06f6",
    "\u0005\u015e\u00b0\u0002\u06f6\u06f7\u0005\u015e\u00b0\u0002\u06f7\u06f9",
    "\u0003\u0002\u0002\u0002\u06f8\u06f3\u0003\u0002\u0002\u0002\u06f8\u06f4",
    "\u0003\u0002\u0002\u0002\u06f8\u06f5\u0003\u0002\u0002\u0002\u06f9\u015d",
    "\u0003\u0002\u0002\u0002\u06fa\u06fb\t\u000b\u0002\u0002\u06fb\u015f",
    "\u0003\u0002\u0002\u0002\u06fc\u06fd\u0007N\u0002\u0002\u06fd\u06fe",
    "\u0007\u00aa\u0002\u0002\u06fe\u06ff\u0007r\u0002\u0002\u06ff\u0700",
    "\u0007\u009b\u0002\u0002\u0700\u0701\u0005\u0140\u00a1\u0002\u0701\u0702",
    "\u0005\u0148\u00a5\u0002\u0702\u0712\u0003\u0002\u0002\u0002\u0703\u0704",
    "\u0007N\u0002\u0002\u0704\u0705\u0007r\u0002\u0002\u0705\u0706\u0005",
    "\u0142\u00a2\u0002\u0706\u0707\u0007\t\u0002\u0002\u0707\u0708\u0005",
    "\u013c\u009f\u0002\u0708\u0709\u0005\u0148\u00a5\u0002\u0709\u0712\u0003",
    "\u0002\u0002\u0002\u070a\u070b\u0007N\u0002\u0002\u070b\u070c\u0007",
    "r\u0002\u0002\u070c\u070d\u0005\u013c\u009f\u0002\u070d\u070e\u0007",
    "\u009b\u0002\u0002\u070e\u070f\u0005\u0140\u00a1\u0002\u070f\u0710\u0005",
    "\u0148\u00a5\u0002\u0710\u0712\u0003\u0002\u0002\u0002\u0711\u06fc\u0003",
    "\u0002\u0002\u0002\u0711\u0703\u0003\u0002\u0002\u0002\u0711\u070a\u0003",
    "\u0002\u0002\u0002\u0712\u0161\u0003\u0002\u0002\u0002\u0713\u0714\u0007",
    "%\u0002\u0002\u0714\u0715\u0007r\u0002\u0002\u0715\u0716\u0005\u0142",
    "\u00a2\u0002\u0716\u0717\u0007\t\u0002\u0002\u0717\u0718\u0005\u013c",
    "\u009f\u0002\u0718\u0719\u0005\u0148\u00a5\u0002\u0719\u071a\u0005\u014e",
    "\u00a8\u0002\u071a\u0724\u0003\u0002\u0002\u0002\u071b\u071c\u0007%",
    "\u0002\u0002\u071c\u071d\u0007r\u0002\u0002\u071d\u071e\u0005\u013c",
    "\u009f\u0002\u071e\u071f\u0007\u009b\u0002\u0002\u071f\u0720\u0005\u0140",
    "\u00a1\u0002\u0720\u0721\u0005\u0148\u00a5\u0002\u0721\u0722\u0005\u014e",
    "\u00a8\u0002\u0722\u0724\u0003\u0002\u0002\u0002\u0723\u0713\u0003\u0002",
    "\u0002\u0002\u0723\u071b\u0003\u0002\u0002\u0002\u0724\u0163\u0003\u0002",
    "\u0002\u0002\u0725\u0726\u00073\u0002\u0002\u0726\u0727\u0007r\u0002",
    "\u0002\u0727\u0728\u0007\u009b\u0002\u0002\u0728\u0729\u0005\u0140\u00a1",
    "\u0002\u0729\u072a\u0007\u0017\u0002\u0002\u072a\u072b\u0005\u019c\u00cf",
    "\u0002\u072b\u072c\u0007\u0018\u0002\u0002\u072c\u072d\u0005\u0148\u00a5",
    "\u0002\u072d\u0165\u0003\u0002\u0002\u0002\u072e\u072f\u0007A\u0002",
    "\u0002\u072f\u0730\u0005\u0168\u00b5\u0002\u0730\u0731\u0007d\u0002",
    "\u0002\u0731\u0732\u0005\u016a\u00b6\u0002\u0732\u0733\u0007\u0017\u0002",
    "\u0002\u0733\u0734\u0005\u0170\u00b9\u0002\u0734\u0735\u0007\u0018\u0002",
    "\u0002\u0735\u0736\u0005\u0174\u00bb\u0002\u0736\u0167\u0003\u0002\u0002",
    "\u0002\u0737\u073b\u0003\u0002\u0002\u0002\u0738\u0739\u0007\u009e\u0002",
    "\u0002\u0739\u073b\u0007\u00b6\u0002\u0002\u073a\u0737\u0003\u0002\u0002",
    "\u0002\u073a\u0738\u0003\u0002\u0002\u0002\u073b\u0169\u0003\u0002\u0002",
    "\u0002\u073c\u073f\u0005\u016c\u00b7\u0002\u073d\u073f\u0005\u016e\u00b8",
    "\u0002\u073e\u073c\u0003\u0002\u0002\u0002\u073e\u073d\u0003\u0002\u0002",
    "\u0002\u073f\u016b\u0003\u0002\u0002\u0002\u0740\u0741\u0005l7\u0002",
    "\u0741\u016d\u0003\u0002\u0002\u0002\u0742\u0743\u0005d3\u0002\u0743",
    "\u0744\u0005l7\u0002\u0744\u074d\u0003\u0002\u0002\u0002\u0745\u0746",
    "\u0005d3\u0002\u0746\u0747\u0005h5\u0002\u0747\u0748\u0007\t\u0002\u0002",
    "\u0748\u0749\u0005j6\u0002\u0749\u074a\u0007\t\u0002\u0002\u074a\u074b",
    "\u0005l7\u0002\u074b\u074d\u0003\u0002\u0002\u0002\u074c\u0742\u0003",
    "\u0002\u0002\u0002\u074c\u0745\u0003\u0002\u0002\u0002\u074d\u016f\u0003",
    "\u0002\u0002\u0002\u074e\u0754\u0003\u0002\u0002\u0002\u074f\u0750\u0007",
    "\t\u0002\u0002\u0750\u0751\u0007\t\u0002\u0002\u0751\u0754\u0007\t\u0002",
    "\u0002\u0752\u0754\u0005\u0172\u00ba\u0002\u0753\u074e\u0003\u0002\u0002",
    "\u0002\u0753\u074f\u0003\u0002\u0002\u0002\u0753\u0752\u0003\u0002\u0002",
    "\u0002\u0754\u0171\u0003\u0002\u0002\u0002\u0755\u0756\b\u00ba\u0001",
    "\u0002\u0756\u0757\u0007\u00f0\u0002\u0002\u0757\u075d\u0003\u0002\u0002",
    "\u0002\u0758\u0759\f\u0003\u0002\u0002\u0759\u075a\u0007\u001b\u0002",
    "\u0002\u075a\u075c\u0007\u00f0\u0002\u0002\u075b\u0758\u0003\u0002\u0002",
    "\u0002\u075c\u075f\u0003\u0002\u0002\u0002\u075d\u075b\u0003\u0002\u0002",
    "\u0002\u075d\u075e\u0003\u0002\u0002\u0002\u075e\u0173\u0003\u0002\u0002",
    "\u0002\u075f\u075d\u0003\u0002\u0002\u0002\u0760\u0761\u0007\u0019\u0002",
    "\u0002\u0761\u0762\u0005\u0184\u00c3\u0002\u0762\u0763\u0007\u001a\u0002",
    "\u0002\u0763\u0775\u0003\u0002\u0002\u0002\u0764\u0765\u0007\u0081\u0002",
    "\u0002\u0765\u0766\u0007t\u0002\u0002\u0766\u0767\u0007*\u0002\u0002",
    "\u0767\u0775\u0005\u0184\u00c3\u0002\u0768\u0769\u0007\u0081\u0002\u0002",
    "\u0769\u076a\u0007e\u0002\u0002\u076a\u076b\u0007*\u0002\u0002\u076b",
    "\u076c\u0007\u0003\u0002\u0002\u076c\u076d\u0007,\u0002\u0002\u076d",
    "\u0775\u0007\u0003\u0002\u0002\u076e\u076f\u0007\u0081\u0002\u0002\u076f",
    "\u0770\u0007{\u0002\u0002\u0770\u0771\u0007*\u0002\u0002\u0771\u0772",
    "\u0007\u0003\u0002\u0002\u0772\u0773\u0007,\u0002\u0002\u0773\u0775",
    "\u0007\u0003\u0002\u0002\u0774\u0760\u0003\u0002\u0002\u0002\u0774\u0764",
    "\u0003\u0002\u0002\u0002\u0774\u0768\u0003\u0002\u0002\u0002\u0774\u076e",
    "\u0003\u0002\u0002\u0002\u0775\u0175\u0003\u0002\u0002\u0002\u0776\u0777",
    "\u0007N\u0002\u0002\u0777\u0778\u0007d\u0002\u0002\u0778\u0779\u0005",
    "\u016a\u00b6\u0002\u0779\u0177\u0003\u0002\u0002\u0002\u077a\u077b\u0007",
    "V\u0002\u0002\u077b\u077c\u0007d\u0002\u0002\u077c\u077d\u0005\u016a",
    "\u00b6\u0002\u077d\u077e\u0007\u0017\u0002\u0002\u077e\u077f\u0005\u019a",
    "\u00ce\u0002\u077f\u0780\u0007\u0018\u0002\u0002\u0780\u0179\u0003\u0002",
    "\u0002\u0002\u0781\u0782\u0007\u00dc\u0002\u0002\u0782\u0783\u0007\u00ca",
    "\u0002\u0002\u0783\u0784\u0005\u017c\u00bf\u0002\u0784\u0785\u0005\u0140",
    "\u00a1\u0002\u0785\u0786\u0007\u0017\u0002\u0002\u0786\u0787\u0005\u017e",
    "\u00c0\u0002\u0787\u0788\u0007\u0018\u0002\u0002\u0788\u0789\u0005\"",
    "\u0012\u0002\u0789\u07fc\u0003\u0002\u0002\u0002\u078a\u078b\u0007\u00dc",
    "\u0002\u0002\u078b\u078c\u0007\u00ca\u0002\u0002\u078c\u078d\u0005\u017c",
    "\u00bf\u0002\u078d\u078e\u0005\u0140\u00a1\u0002\u078e\u078f\u0007H",
    "\u0002\u0002\u078f\u0790\u0007\u0017\u0002\u0002\u0790\u0791\u0005\u017e",
    "\u00c0\u0002\u0791\u0792\u0007\u0018\u0002\u0002\u0792\u07fc\u0003\u0002",
    "\u0002\u0002\u0793\u0794\u0007\u00dc\u0002\u0002\u0794\u0795\u0007\u00ca",
    "\u0002\u0002\u0795\u0796\u0005\u017c\u00bf\u0002\u0796\u0797\u0005\u0140",
    "\u00a1\u0002\u0797\u0798\u0007H\u0002\u0002\u0798\u0799\u0007$\u0002",
    "\u0002\u0799\u07fc\u0003\u0002\u0002\u0002\u079a\u079b\u0007\u00dc\u0002",
    "\u0002\u079b\u079c\u0007\u00ca\u0002\u0002\u079c\u079d\u0005\u017c\u00bf",
    "\u0002\u079d\u079e\u0005\u0140\u00a1\u0002\u079e\u079f\u0007r\u0002",
    "\u0002\u079f\u07a0\u0007\u0017\u0002\u0002\u07a0\u07a1\u0005\u019c\u00cf",
    "\u0002\u07a1\u07a2\u0007\u0018\u0002\u0002\u07a2\u07a3\u0005\u0148\u00a5",
    "\u0002\u07a3\u07a4\u0005\"\u0012\u0002\u07a4\u07fc\u0003\u0002\u0002",
    "\u0002\u07a5\u07a6\u0007\u00dc\u0002\u0002\u07a6\u07a7\u0007\u00ca\u0002",
    "\u0002\u07a7\u07a8\u0005\u017c\u00bf\u0002\u07a8\u07a9\u0005\u0140\u00a1",
    "\u0002\u07a9\u07aa\u0007r\u0002\u0002\u07aa\u07ab\u0007$\u0002\u0002",
    "\u07ab\u07ac\u0005\u0148\u00a5\u0002\u07ac\u07ad\u0005\"\u0012\u0002",
    "\u07ad\u07fc\u0003\u0002\u0002\u0002\u07ae\u07af\u0007\u00dc\u0002\u0002",
    "\u07af\u07b0\u0007\u00ca\u0002\u0002\u07b0\u07b1\u0007`\u0002\u0002",
    "\u07b1\u07b2\u0007r\u0002\u0002\u07b2\u07b3\u0005\u0142\u00a2\u0002",
    "\u07b3\u07b4\u0007\t\u0002\u0002\u07b4\u07b5\u0005\u013c\u009f\u0002",
    "\u07b5\u07b6\u0005\u0148\u00a5\u0002\u07b6\u07b7\u0005\"\u0012\u0002",
    "\u07b7\u07fc\u0003\u0002\u0002\u0002\u07b8\u07b9\u0007\u00dc\u0002\u0002",
    "\u07b9\u07ba\u0007\u00ca\u0002\u0002\u07ba\u07bb\u0007`\u0002\u0002",
    "\u07bb\u07bc\u0007r\u0002\u0002\u07bc\u07bd\u0005\u013c\u009f\u0002",
    "\u07bd\u07be\u0007\u009b\u0002\u0002\u07be\u07bf\u0005\u0140\u00a1\u0002",
    "\u07bf\u07c0\u0005\u0148\u00a5\u0002\u07c0\u07c1\u0005\"\u0012\u0002",
    "\u07c1\u07fc\u0003\u0002\u0002\u0002\u07c2\u07c3\u0007&\u0002\u0002",
    "\u07c3\u07c4\u0005\u001e\u0010\u0002\u07c4\u07c5\u0005\u0140\u00a1\u0002",
    "\u07c5\u07c6\u0007\u0017\u0002\u0002\u07c6\u07c7\u0005\u017e\u00c0\u0002",
    "\u07c7\u07c8\u0007\u0018\u0002\u0002\u07c8\u07c9\u0005\"\u0012\u0002",
    "\u07c9\u07fc\u0003\u0002\u0002\u0002\u07ca\u07cb\u0007&\u0002\u0002",
    "\u07cb\u07cc\u0005\u001e\u0010\u0002\u07cc\u07cd\u0005\u0140\u00a1\u0002",
    "\u07cd\u07ce\u0007H\u0002\u0002\u07ce\u07cf\u0007\u00ca\u0002\u0002",
    "\u07cf\u07d0\u0007\u0017\u0002\u0002\u07d0\u07d1\u0005\u017e\u00c0\u0002",
    "\u07d1\u07d2\u0007\u0018\u0002\u0002\u07d2\u07fc\u0003\u0002\u0002\u0002",
    "\u07d3\u07d4\u0007&\u0002\u0002\u07d4\u07d5\u0005\u001e\u0010\u0002",
    "\u07d5\u07d6\u0005\u0140\u00a1\u0002\u07d6\u07d7\u0007H\u0002\u0002",
    "\u07d7\u07d8\u0007\u00ca\u0002\u0002\u07d8\u07fc\u0003\u0002\u0002\u0002",
    "\u07d9\u07da\u0007&\u0002\u0002\u07da\u07db\u0005\u001e\u0010\u0002",
    "\u07db\u07dc\u0005\u0140\u00a1\u0002\u07dc\u07dd\u0007r\u0002\u0002",
    "\u07dd\u07de\u0007\u0017\u0002\u0002\u07de\u07df\u0005\u019c\u00cf\u0002",
    "\u07df\u07e0\u0007\u0018\u0002\u0002\u07e0\u07e1\u0005\u0148\u00a5\u0002",
    "\u07e1\u07e2\u0005\"\u0012\u0002\u07e2\u07fc\u0003\u0002\u0002\u0002",
    "\u07e3\u07e4\u0007&\u0002\u0002\u07e4\u07e5\u0005\u001e\u0010\u0002",
    "\u07e5\u07e6\u0005\u0140\u00a1\u0002\u07e6\u07e7\u0007r\u0002\u0002",
    "\u07e7\u07e8\u0007$\u0002\u0002\u07e8\u07e9\u0005\u0148\u00a5\u0002",
    "\u07e9\u07ea\u0005\"\u0012\u0002\u07ea\u07fc\u0003\u0002\u0002\u0002",
    "\u07eb\u07ec\u0007&\u0002\u0002\u07ec\u07ed\u0007r\u0002\u0002\u07ed",
    "\u07ee\u0005\u0142\u00a2\u0002\u07ee\u07ef\u0007\t\u0002\u0002\u07ef",
    "\u07f0\u0005\u013c\u009f\u0002\u07f0\u07f1\u0005\u0148\u00a5\u0002\u07f1",
    "\u07f2\u0005\"\u0012\u0002\u07f2\u07fc\u0003\u0002\u0002\u0002\u07f3",
    "\u07f4\u0007&\u0002\u0002\u07f4\u07f5\u0007r\u0002\u0002\u07f5\u07f6",
    "\u0005\u013c\u009f\u0002\u07f6\u07f7\u0007\u009b\u0002\u0002\u07f7\u07f8",
    "\u0005\u0140\u00a1\u0002\u07f8\u07f9\u0005\u0148\u00a5\u0002\u07f9\u07fa",
    "\u0005\"\u0012\u0002\u07fa\u07fc\u0003\u0002\u0002\u0002\u07fb\u0781",
    "\u0003\u0002\u0002\u0002\u07fb\u078a\u0003\u0002\u0002\u0002\u07fb\u0793",
    "\u0003\u0002\u0002\u0002\u07fb\u079a\u0003\u0002\u0002\u0002\u07fb\u07a5",
    "\u0003\u0002\u0002\u0002\u07fb\u07ae\u0003\u0002\u0002\u0002\u07fb\u07b8",
    "\u0003\u0002\u0002\u0002\u07fb\u07c2\u0003\u0002\u0002\u0002\u07fb\u07ca",
    "\u0003\u0002\u0002\u0002\u07fb\u07d3\u0003\u0002\u0002\u0002\u07fb\u07d9",
    "\u0003\u0002\u0002\u0002\u07fb\u07e3\u0003\u0002\u0002\u0002\u07fb\u07eb",
    "\u0003\u0002\u0002\u0002\u07fb\u07f3\u0003\u0002\u0002\u0002\u07fc\u017b",
    "\u0003\u0002\u0002\u0002\u07fd\u0800\u0003\u0002\u0002\u0002\u07fe\u0800",
    "\u0007`\u0002\u0002\u07ff\u07fd\u0003\u0002\u0002\u0002\u07ff\u07fe",
    "\u0003\u0002\u0002\u0002\u0800\u017d\u0003\u0002\u0002\u0002\u0801\u0802",
    "\b\u00c0\u0001\u0002\u0802\u0803\u0005\u0180\u00c1\u0002\u0803\u0809",
    "\u0003\u0002\u0002\u0002\u0804\u0805\f\u0003\u0002\u0002\u0805\u0806",
    "\u0007\u001b\u0002\u0002\u0806\u0808\u0005\u0180\u00c1\u0002\u0807\u0804",
    "\u0003\u0002\u0002\u0002\u0808\u080b\u0003\u0002\u0002\u0002\u0809\u0807",
    "\u0003\u0002\u0002\u0002\u0809\u080a\u0003\u0002\u0002\u0002\u080a\u017f",
    "\u0003\u0002\u0002\u0002\u080b\u0809\u0003\u0002\u0002\u0002\u080c\u080d",
    "\u0005\u0154\u00ab\u0002\u080d\u0181\u0003\u0002\u0002\u0002\u080e\u080f",
    "\b\u00c2\u0001\u0002\u080f\u0810\u0007\u00f0\u0002\u0002\u0810\u082a",
    "\u0003\u0002\u0002\u0002\u0811\u0812\f\u0007\u0002\u0002\u0812\u0813",
    "\u0007\t\u0002\u0002\u0813\u0829\u0007\u00f0\u0002\u0002\u0814\u0815",
    "\f\u0006\u0002\u0002\u0815\u0816\u0007\t\u0002\u0002\u0816\u0829\u0007",
    "\u00ef\u0002\u0002\u0817\u0818\f\u0005\u0002\u0002\u0818\u0819\u0007",
    "\t\u0002\u0002\u0819\u081a\u0007\u001d\u0002\u0002\u081a\u081b\u0005",
    "\u0184\u00c3\u0002\u081b\u081c\u0007\u001e\u0002\u0002\u081c\u0829\u0003",
    "\u0002\u0002\u0002\u081d\u081e\f\u0004\u0002\u0002\u081e\u081f\u0007",
    "\t\u0002\u0002\u081f\u0820\u0007\u001d\u0002\u0002\u0820\u0821\u0005",
    "\u0184\u00c3\u0002\u0821\u0822\u0007\u001f\u0002\u0002\u0822\u0829\u0003",
    "\u0002\u0002\u0002\u0823\u0824\f\u0003\u0002\u0002\u0824\u0825\u0007",
    "\u001d\u0002\u0002\u0825\u0826\u0005\u0184\u00c3\u0002\u0826\u0827\u0007",
    "\u001e\u0002\u0002\u0827\u0829\u0003\u0002\u0002\u0002\u0828\u0811\u0003",
    "\u0002\u0002\u0002\u0828\u0814\u0003\u0002\u0002\u0002\u0828\u0817\u0003",
    "\u0002\u0002\u0002\u0828\u081d\u0003\u0002\u0002\u0002\u0828\u0823\u0003",
    "\u0002\u0002\u0002\u0829\u082c\u0003\u0002\u0002\u0002\u082a\u0828\u0003",
    "\u0002\u0002\u0002\u082a\u082b\u0003\u0002\u0002\u0002\u082b\u0183\u0003",
    "\u0002\u0002\u0002\u082c\u082a\u0003\u0002\u0002\u0002\u082d\u082e\b",
    "\u00c3\u0001\u0002\u082e\u0834\u0005\u0188\u00c5\u0002\u082f\u0830\u0007",
    "\u0094\u0002\u0002\u0830\u0834\u0005\u0184\u00c3\u0019\u0831\u0832\u0007",
    "W\u0002\u0002\u0832\u0834\u0005\u0184\u00c3\u0003\u0833\u082d\u0003",
    "\u0002\u0002\u0002\u0833\u082f\u0003\u0002\u0002\u0002\u0833\u0831\u0003",
    "\u0002\u0002\u0002\u0834\u08c3\u0003\u0002\u0002\u0002\u0835\u0836\f",
    "!\u0002\u0002\u0836\u0837\u0007\n\u0002\u0002\u0837\u08c2\u0005\u0184",
    "\u00c3\"\u0838\u0839\f \u0002\u0002\u0839\u083a\u0007\u000b\u0002\u0002",
    "\u083a\u08c2\u0005\u0184\u00c3!\u083b\u083c\f\u001f\u0002\u0002\u083c",
    "\u083d\u0007\f\u0002\u0002\u083d\u08c2\u0005\u0184\u00c3 \u083e\u083f",
    "\f\u001e\u0002\u0002\u083f\u0840\u0007\r\u0002\u0002\u0840\u08c2\u0005",
    "\u0184\u00c3\u001f\u0841\u0842\f\u001d\u0002\u0002\u0842\u0843\u0007",
    "\u000e\u0002\u0002\u0843\u08c2\u0005\u0184\u00c3\u001e\u0844\u0845\f",
    "\u001c\u0002\u0002\u0845\u0846\u0007\u0016\u0002\u0002\u0846\u08c2\u0005",
    "\u0184\u00c3\u001d\u0847\u0848\f\u001b\u0002\u0002\u0848\u0849\u0007",
    "\'\u0002\u0002\u0849\u08c2\u0005\u0184\u00c3\u001c\u084a\u084b\f\u001a",
    "\u0002\u0002\u084b\u084c\u0007\u009e\u0002\u0002\u084c\u08c2\u0005\u0184",
    "\u00c3\u001b\u084d\u084e\f\u0018\u0002\u0002\u084e\u084f\u0007\u0010",
    "\u0002\u0002\u084f\u08c2\u0005\u0184\u00c3\u0019\u0850\u0851\f\u0017",
    "\u0002\u0002\u0851\u0852\u0007\u000f\u0002\u0002\u0852\u08c2\u0005\u0184",
    "\u00c3\u0018\u0853\u0854\f\u0016\u0002\u0002\u0854\u0855\u0007\u0011",
    "\u0002\u0002\u0855\u08c2\u0005\u0184\u00c3\u0017\u0856\u0857\f\u0015",
    "\u0002\u0002\u0857\u0858\u0007\u0012\u0002\u0002\u0858\u08c2\u0005\u0184",
    "\u00c3\u0016\u0859\u085a\f\u0014\u0002\u0002\u085a\u085b\u0007\u0014",
    "\u0002\u0002\u085b\u08c2\u0005\u0184\u00c3\u0015\u085c\u085d\f\u0013",
    "\u0002\u0002\u085d\u085e\u0007\u0013\u0002\u0002\u085e\u08c2\u0005\u0184",
    "\u00c3\u0014\u085f\u0860\f\u0012\u0002\u0002\u0860\u0861\u0007\u0015",
    "\u0002\u0002\u0861\u08c2\u0005\u0184\u00c3\u0013\u0862\u0863\f\u000f",
    "\u0002\u0002\u0863\u0864\u0007\u0087\u0002\u0002\u0864\u08c2\u0005\u0184",
    "\u00c3\u0010\u0865\u0866\f\u000e\u0002\u0002\u0866\u0867\u0007\u0094",
    "\u0002\u0002\u0867\u0868\u0007\u0087\u0002\u0002\u0868\u08c2\u0005\u0184",
    "\u00c3\u000f\u0869\u086a\f\r\u0002\u0002\u086a\u086b\u0007o\u0002\u0002",
    "\u086b\u08c2\u0005\u0184\u00c3\u000e\u086c\u086d\f\f\u0002\u0002\u086d",
    "\u086e\u0007\u0094\u0002\u0002\u086e\u086f\u0007o\u0002\u0002\u086f",
    "\u08c2\u0005\u0184\u00c3\r\u0870\u0871\f\u000b\u0002\u0002\u0871\u0872",
    "\u0007\u00ec\u0002\u0002\u0872\u08c2\u0005\u0184\u00c3\f\u0873\u0874",
    "\f\n\u0002\u0002\u0874\u0875\u0007\u0094\u0002\u0002\u0875\u0876\u0007",
    "\u00ec\u0002\u0002\u0876\u08c2\u0005\u0184\u00c3\u000b\u0877\u0878\f",
    ")\u0002\u0002\u0878\u0879\u0007\t\u0002\u0002\u0879\u08c2\u0007\u00f0",
    "\u0002\u0002\u087a\u087b\f(\u0002\u0002\u087b\u087c\u0007\t\u0002\u0002",
    "\u087c\u08c2\u0007\u00ef\u0002\u0002\u087d\u087e\f\'\u0002\u0002\u087e",
    "\u087f\u0007\t\u0002\u0002\u087f\u0880\u0007\u001d\u0002\u0002\u0880",
    "\u0881\u0005\u0184\u00c3\u0002\u0881\u0882\u0007\u001e\u0002\u0002\u0882",
    "\u08c2\u0003\u0002\u0002\u0002\u0883\u0884\f&\u0002\u0002\u0884\u0885",
    "\u0007\t\u0002\u0002\u0885\u0886\u0007\u001d\u0002\u0002\u0886\u0887",
    "\u0005\u0184\u00c3\u0002\u0887\u0888\u0007\u001f\u0002\u0002\u0888\u08c2",
    "\u0003\u0002\u0002\u0002\u0889\u088a\f%\u0002\u0002\u088a\u088b\u0007",
    "\u001d\u0002\u0002\u088b\u088c\u0005\u0184\u00c3\u0002\u088c\u088d\u0007",
    "\u001e\u0002\u0002\u088d\u08c2\u0003\u0002\u0002\u0002\u088e\u088f\f",
    "$\u0002\u0002\u088f\u0890\u0007\u001d\u0002\u0002\u0890\u0891\u0005",
    "\u0184\u00c3\u0002\u0891\u0892\u0007\u001c\u0002\u0002\u0892\u0893\u0007",
    "\u001e\u0002\u0002\u0893\u08c2\u0003\u0002\u0002\u0002\u0894\u0895\f",
    "#\u0002\u0002\u0895\u0896\u0007\u001d\u0002\u0002\u0896\u0897\u0005",
    "\u0184\u00c3\u0002\u0897\u0898\u0007\u001c\u0002\u0002\u0898\u0899\u0005",
    "\u0184\u00c3\u0002\u0899\u089a\u0007\u001e\u0002\u0002\u089a\u08c2\u0003",
    "\u0002\u0002\u0002\u089b\u089c\f\"\u0002\u0002\u089c\u089d\u0007\u001d",
    "\u0002\u0002\u089d\u089e\u0007\f\u0002\u0002\u089e\u08c2\u0007\u001e",
    "\u0002\u0002\u089f\u08a0\f\u0011\u0002\u0002\u08a0\u08a1\u0007.\u0002",
    "\u0002\u08a1\u08a2\u0005\u018a\u00c6\u0002\u08a2\u08a3\u0007\'\u0002",
    "\u0002\u08a3\u08a4\u0005\u018a\u00c6\u0002\u08a4\u08c2\u0003\u0002\u0002",
    "\u0002\u08a5\u08a6\f\u0010\u0002\u0002\u08a6\u08a7\u0007\u0094\u0002",
    "\u0002\u08a7\u08a8\u0007.\u0002\u0002\u08a8\u08a9\u0005\u018a\u00c6",
    "\u0002\u08a9\u08aa\u0007\'\u0002\u0002\u08aa\u08ab\u0005\u018a\u00c6",
    "\u0002\u08ab\u08c2\u0003\u0002\u0002\u0002\u08ac\u08ad\f\t\u0002\u0002",
    "\u08ad\u08ae\u0007y\u0002\u0002\u08ae\u08c2\u0007\u0096\u0002\u0002",
    "\u08af\u08b0\f\b\u0002\u0002\u08b0\u08b1\u0007y\u0002\u0002\u08b1\u08b2",
    "\u0007\u0094\u0002\u0002\u08b2\u08c2\u0007\u0096\u0002\u0002\u08b3\u08b4",
    "\f\u0007\u0002\u0002\u08b4\u08b5\u0007y\u0002\u0002\u08b5\u08c2\u0007",
    "\u008f\u0002\u0002\u08b6\u08b7\f\u0006\u0002\u0002\u08b7\u08b8\u0007",
    "y\u0002\u0002\u08b8\u08b9\u0007\u0094\u0002\u0002\u08b9\u08c2\u0007",
    "\u008f\u0002\u0002\u08ba\u08bb\f\u0005\u0002\u0002\u08bb\u08bc\u0007",
    "y\u0002\u0002\u08bc\u08c2\u0005\u0186\u00c4\u0002\u08bd\u08be\f\u0004",
    "\u0002\u0002\u08be\u08bf\u0007y\u0002\u0002\u08bf\u08c0\u0007\u0094",
    "\u0002\u0002\u08c0\u08c2\u0005\u0186\u00c4\u0002\u08c1\u0835\u0003\u0002",
    "\u0002\u0002\u08c1\u0838\u0003\u0002\u0002\u0002\u08c1\u083b\u0003\u0002",
    "\u0002\u0002\u08c1\u083e\u0003\u0002\u0002\u0002\u08c1\u0841\u0003\u0002",
    "\u0002\u0002\u08c1\u0844\u0003\u0002\u0002\u0002\u08c1\u0847\u0003\u0002",
    "\u0002\u0002\u08c1\u084a\u0003\u0002\u0002\u0002\u08c1\u084d\u0003\u0002",
    "\u0002\u0002\u08c1\u0850\u0003\u0002\u0002\u0002\u08c1\u0853\u0003\u0002",
    "\u0002\u0002\u08c1\u0856\u0003\u0002\u0002\u0002\u08c1\u0859\u0003\u0002",
    "\u0002\u0002\u08c1\u085c\u0003\u0002\u0002\u0002\u08c1\u085f\u0003\u0002",
    "\u0002\u0002\u08c1\u0862\u0003\u0002\u0002\u0002\u08c1\u0865\u0003\u0002",
    "\u0002\u0002\u08c1\u0869\u0003\u0002\u0002\u0002\u08c1\u086c\u0003\u0002",
    "\u0002\u0002\u08c1\u0870\u0003\u0002\u0002\u0002\u08c1\u0873\u0003\u0002",
    "\u0002\u0002\u08c1\u0877\u0003\u0002\u0002\u0002\u08c1\u087a\u0003\u0002",
    "\u0002\u0002\u08c1\u087d\u0003\u0002\u0002\u0002\u08c1\u0883\u0003\u0002",
    "\u0002\u0002\u08c1\u0889\u0003\u0002\u0002\u0002\u08c1\u088e\u0003\u0002",
    "\u0002\u0002\u08c1\u0894\u0003\u0002\u0002\u0002\u08c1\u089b\u0003\u0002",
    "\u0002\u0002\u08c1\u089f\u0003\u0002\u0002\u0002\u08c1\u08a5\u0003\u0002",
    "\u0002\u0002\u08c1\u08ac\u0003\u0002\u0002\u0002\u08c1\u08af\u0003\u0002",
    "\u0002\u0002\u08c1\u08b3\u0003\u0002\u0002\u0002\u08c1\u08b6\u0003\u0002",
    "\u0002\u0002\u08c1\u08ba\u0003\u0002\u0002\u0002\u08c1\u08bd\u0003\u0002",
    "\u0002\u0002\u08c2\u08c5\u0003\u0002\u0002\u0002\u08c3\u08c1\u0003\u0002",
    "\u0002\u0002\u08c3\u08c4\u0003\u0002\u0002\u0002\u08c4\u0185\u0003\u0002",
    "\u0002\u0002\u08c5\u08c3\u0003\u0002\u0002\u0002\u08c6\u08c7\t\f\u0002",
    "\u0002\u08c7\u0187\u0003\u0002\u0002\u0002\u08c8\u08d9\u0005\u018c\u00c7",
    "\u0002\u08c9\u08d9\u0005\u018e\u00c8\u0002\u08ca\u08d9\u0007\u00f0\u0002",
    "\u0002\u08cb\u08d9\u0007\u00ef\u0002\u0002\u08cc\u08d9\u0007\u00c5\u0002",
    "\u0002\u08cd\u08d9\u0005\u019e\u00d0\u0002\u08ce\u08d9\u0005\u01ac\u00d7",
    "\u0002\u08cf\u08d9\u0007\u000b\u0002\u0002\u08d0\u08d9\u0005\u01a0\u00d1",
    "\u0002\u08d1\u08d9\u0005\u01b0\u00d9\u0002\u08d2\u08d9\u0005\u01bc\u00df",
    "\u0002\u08d3\u08d4\u0007@\u0002\u0002\u08d4\u08d5\u0007\u0017\u0002",
    "\u0002\u08d5\u08d6\u0005\u0184\u00c3\u0002\u08d6\u08d7\u0007\u0018\u0002",
    "\u0002\u08d7\u08d9\u0003\u0002\u0002\u0002\u08d8\u08c8\u0003\u0002\u0002",
    "\u0002\u08d8\u08c9\u0003\u0002\u0002\u0002\u08d8\u08ca\u0003\u0002\u0002",
    "\u0002\u08d8\u08cb\u0003\u0002\u0002\u0002\u08d8\u08cc\u0003\u0002\u0002",
    "\u0002\u08d8\u08cd\u0003\u0002\u0002\u0002\u08d8\u08ce\u0003\u0002\u0002",
    "\u0002\u08d8\u08cf\u0003\u0002\u0002\u0002\u08d8\u08d0\u0003\u0002\u0002",
    "\u0002\u08d8\u08d1\u0003\u0002\u0002\u0002\u08d8\u08d2\u0003\u0002\u0002",
    "\u0002\u08d8\u08d3\u0003\u0002\u0002\u0002\u08d9\u0189\u0003\u0002\u0002",
    "\u0002\u08da\u08db\b\u00c6\u0001\u0002\u08db\u08dc\u0005\u0188\u00c5",
    "\u0002\u08dc\u0919\u0003\u0002\u0002\u0002\u08dd\u08de\f\b\u0002\u0002",
    "\u08de\u08df\u0007\n\u0002\u0002\u08df\u0918\u0005\u018a\u00c6\t\u08e0",
    "\u08e1\f\u0007\u0002\u0002\u08e1\u08e2\u0007\u000b\u0002\u0002\u08e2",
    "\u0918\u0005\u018a\u00c6\b\u08e3\u08e4\f\u0006\u0002\u0002\u08e4\u08e5",
    "\u0007\f\u0002\u0002\u08e5\u0918\u0005\u018a\u00c6\u0007\u08e6\u08e7",
    "\f\u0005\u0002\u0002\u08e7\u08e8\u0007\r\u0002\u0002\u08e8\u0918\u0005",
    "\u018a\u00c6\u0006\u08e9\u08ea\f\u0004\u0002\u0002\u08ea\u08eb\u0007",
    "\u000e\u0002\u0002\u08eb\u0918\u0005\u018a\u00c6\u0005\u08ec\u08ed\f",
    "\u0003\u0002\u0002\u08ed\u08ee\u0007\u0016\u0002\u0002\u08ee\u0918\u0005",
    "\u018a\u00c6\u0004\u08ef\u08f0\f\u0010\u0002\u0002\u08f0\u08f1\u0007",
    "\t\u0002\u0002\u08f1\u0918\u0007\u00f0\u0002\u0002\u08f2\u08f3\f\u000f",
    "\u0002\u0002\u08f3\u08f4\u0007\t\u0002\u0002\u08f4\u0918\u0007\u00ef",
    "\u0002\u0002\u08f5\u08f6\f\u000e\u0002\u0002\u08f6\u08f7\u0007\t\u0002",
    "\u0002\u08f7\u08f8\u0007\u001d\u0002\u0002\u08f8\u08f9\u0005\u0184\u00c3",
    "\u0002\u08f9\u08fa\u0007\u001e\u0002\u0002\u08fa\u0918\u0003\u0002\u0002",
    "\u0002\u08fb\u08fc\f\r\u0002\u0002\u08fc\u08fd\u0007\t\u0002\u0002\u08fd",
    "\u08fe\u0007\u001d\u0002\u0002\u08fe\u08ff\u0005\u0184\u00c3\u0002\u08ff",
    "\u0900\u0007\u001f\u0002\u0002\u0900\u0918\u0003\u0002\u0002\u0002\u0901",
    "\u0902\f\f\u0002\u0002\u0902\u0903\u0007\u001d\u0002\u0002\u0903\u0904",
    "\u0005\u0184\u00c3\u0002\u0904\u0905\u0007\u001e\u0002\u0002\u0905\u0918",
    "\u0003\u0002\u0002\u0002\u0906\u0907\f\u000b\u0002\u0002\u0907\u0908",
    "\u0007\u001d\u0002\u0002\u0908\u0909\u0005\u0184\u00c3\u0002\u0909\u090a",
    "\u0007\u001c\u0002\u0002\u090a\u090b\u0007\u001e\u0002\u0002\u090b\u0918",
    "\u0003\u0002\u0002\u0002\u090c\u090d\f\n\u0002\u0002\u090d\u090e\u0007",
    "\u001d\u0002\u0002\u090e\u090f\u0005\u0184\u00c3\u0002\u090f\u0910\u0007",
    "\u001c\u0002\u0002\u0910\u0911\u0005\u0184\u00c3\u0002\u0911\u0912\u0007",
    "\u001e\u0002\u0002\u0912\u0918\u0003\u0002\u0002\u0002\u0913\u0914\f",
    "\t\u0002\u0002\u0914\u0915\u0007\u001d\u0002\u0002\u0915\u0916\u0007",
    "\f\u0002\u0002\u0916\u0918\u0007\u001e\u0002\u0002\u0917\u08dd\u0003",
    "\u0002\u0002\u0002\u0917\u08e0\u0003\u0002\u0002\u0002\u0917\u08e3\u0003",
    "\u0002\u0002\u0002\u0917\u08e6\u0003\u0002\u0002\u0002\u0917\u08e9\u0003",
    "\u0002\u0002\u0002\u0917\u08ec\u0003\u0002\u0002\u0002\u0917\u08ef\u0003",
    "\u0002\u0002\u0002\u0917\u08f2\u0003\u0002\u0002\u0002\u0917\u08f5\u0003",
    "\u0002\u0002\u0002\u0917\u08fb\u0003\u0002\u0002\u0002\u0917\u0901\u0003",
    "\u0002\u0002\u0002\u0917\u0906\u0003\u0002\u0002\u0002\u0917\u090c\u0003",
    "\u0002\u0002\u0002\u0917\u0913\u0003\u0002\u0002\u0002\u0918\u091b\u0003",
    "\u0002\u0002\u0002\u0919\u0917\u0003\u0002\u0002\u0002\u0919\u091a\u0003",
    "\u0002\u0002\u0002\u091a\u018b\u0003\u0002\u0002\u0002\u091b\u0919\u0003",
    "\u0002\u0002\u0002\u091c\u091d\t\r\u0002\u0002\u091d\u018d\u0003\u0002",
    "\u0002\u0002\u091e\u0921\u0005\u0190\u00c9\u0002\u091f\u0921\u0005\u0198",
    "\u00cd\u0002\u0920\u091e\u0003\u0002\u0002\u0002\u0920\u091f\u0003\u0002",
    "\u0002\u0002\u0921\u018f\u0003\u0002\u0002\u0002\u0922\u0923\u0007\u0019",
    "\u0002\u0002\u0923\u0924\u0005\u0192\u00ca\u0002\u0924\u0925\u0007\u001a",
    "\u0002\u0002\u0925\u0191\u0003\u0002\u0002\u0002\u0926\u0929\u0003\u0002",
    "\u0002\u0002\u0927\u0929\u0005\u0194\u00cb\u0002\u0928\u0926\u0003\u0002",
    "\u0002\u0002\u0928\u0927\u0003\u0002\u0002\u0002\u0929\u0193\u0003\u0002",
    "\u0002\u0002\u092a\u092b\b\u00cb\u0001\u0002\u092b\u092c\u0005\u0196",
    "\u00cc\u0002\u092c\u0932\u0003\u0002\u0002\u0002\u092d\u092e\f\u0003",
    "\u0002\u0002\u092e\u092f\u0007\u001b\u0002\u0002\u092f\u0931\u0005\u0196",
    "\u00cc\u0002\u0930\u092d\u0003\u0002\u0002\u0002\u0931\u0934\u0003\u0002",
    "\u0002\u0002\u0932\u0930\u0003\u0002\u0002\u0002\u0932\u0933\u0003\u0002",
    "\u0002\u0002\u0933\u0195\u0003\u0002\u0002\u0002\u0934\u0932\u0003\u0002",
    "\u0002\u0002\u0935\u0936\u0005\u0184\u00c3\u0002\u0936\u0937\u0007\u001c",
    "\u0002\u0002\u0937\u0938\u0005\u0184\u00c3\u0002\u0938\u093b\u0003\u0002",
    "\u0002\u0002\u0939\u093b\u0005\u0184\u00c3\u0002\u093a\u0935\u0003\u0002",
    "\u0002\u0002\u093a\u0939\u0003\u0002\u0002\u0002\u093b\u0197\u0003\u0002",
    "\u0002\u0002\u093c\u093d\u0007\u001d\u0002\u0002\u093d\u093e\u0005\u019a",
    "\u00ce\u0002\u093e\u093f\u0007\u001e\u0002\u0002\u093f\u0199\u0003\u0002",
    "\u0002\u0002\u0940\u0943\u0003\u0002\u0002\u0002\u0941\u0943\u0005\u019c",
    "\u00cf\u0002\u0942\u0940\u0003\u0002\u0002\u0002\u0942\u0941\u0003\u0002",
    "\u0002\u0002\u0943\u019b\u0003\u0002\u0002\u0002\u0944\u0945\b\u00cf",
    "\u0001\u0002\u0945\u0946\u0005\u0184\u00c3\u0002\u0946\u094c\u0003\u0002",
    "\u0002\u0002\u0947\u0948\f\u0003\u0002\u0002\u0948\u0949\u0007\u001b",
    "\u0002\u0002\u0949\u094b\u0005\u0184\u00c3\u0002\u094a\u0947\u0003\u0002",
    "\u0002\u0002\u094b\u094e\u0003\u0002\u0002\u0002\u094c\u094a\u0003\u0002",
    "\u0002\u0002\u094c\u094d\u0003\u0002\u0002\u0002\u094d\u019d\u0003\u0002",
    "\u0002\u0002\u094e\u094c\u0003\u0002\u0002\u0002\u094f\u0950\t\u000e",
    "\u0002\u0002\u0950\u019f\u0003\u0002\u0002\u0002\u0951\u0952\u00076",
    "\u0002\u0002\u0952\u0953\u0005\u01a2\u00d2\u0002\u0953\u0954\u0007R",
    "\u0002\u0002\u0954\u01a1\u0003\u0002\u0002\u0002\u0955\u0958\u0005\u01a4",
    "\u00d3\u0002\u0956\u0958\u0005\u01a8\u00d5\u0002\u0957\u0955\u0003\u0002",
    "\u0002\u0002\u0957\u0956\u0003\u0002\u0002\u0002\u0958\u01a3\u0003\u0002",
    "\u0002\u0002\u0959\u095a\u0005\u0184\u00c3\u0002\u095a\u095b\u0005\u01a6",
    "\u00d4\u0002\u095b\u095c\u0005\u01aa\u00d6\u0002\u095c\u01a5\u0003\u0002",
    "\u0002\u0002\u095d\u095e\b\u00d4\u0001\u0002\u095e\u095f\u0007\u00e7",
    "\u0002\u0002\u095f\u0960\u0005\u0184\u00c3\u0002\u0960\u0961\u0007\u00cd",
    "\u0002\u0002\u0961\u0962\u0005\u0184\u00c3\u0002\u0962\u096b\u0003\u0002",
    "\u0002\u0002\u0963\u0964\f\u0003\u0002\u0002\u0964\u0965\u0007\u00e7",
    "\u0002\u0002\u0965\u0966\u0005\u0184\u00c3\u0002\u0966\u0967\u0007\u00cd",
    "\u0002\u0002\u0967\u0968\u0005\u0184\u00c3\u0002\u0968\u096a\u0003\u0002",
    "\u0002\u0002\u0969\u0963\u0003\u0002\u0002\u0002\u096a\u096d\u0003\u0002",
    "\u0002\u0002\u096b\u0969\u0003\u0002\u0002\u0002\u096b\u096c\u0003\u0002",
    "\u0002\u0002\u096c\u01a7\u0003\u0002\u0002\u0002\u096d\u096b\u0003\u0002",
    "\u0002\u0002\u096e\u096f\u0005\u01a6\u00d4\u0002\u096f\u0970\u0005\u01aa",
    "\u00d6\u0002\u0970\u01a9\u0003\u0002\u0002\u0002\u0971\u0975\u0003\u0002",
    "\u0002\u0002\u0972\u0973\u0007Q\u0002\u0002\u0973\u0975\u0005\u0184",
    "\u00c3\u0002\u0974\u0971\u0003\u0002\u0002\u0002\u0974\u0972\u0003\u0002",
    "\u0002\u0002\u0975\u01ab\u0003\u0002\u0002\u0002\u0976\u0977\u0007\u0095",
    "\u0002\u0002\u0977\u0978\u0007\u0017\u0002\u0002\u0978\u0979\u0005\u019c",
    "\u00cf\u0002\u0979\u097a\u0007\u0018\u0002\u0002\u097a\u097b\u0005\u01e0",
    "\u00f1\u0002\u097b\u097c\u0005\u01dc\u00ef\u0002\u097c\u097d\u0005\u01e8",
    "\u00f5\u0002\u097d\u099b\u0003\u0002\u0002\u0002\u097e\u097f\u0005\u01ae",
    "\u00d8\u0002\u097f\u0980\u0007\u0017\u0002\u0002\u0980\u0981\u0005\u019a",
    "\u00ce\u0002\u0981\u0982\u0007\u0018\u0002\u0002\u0982\u0983\u0005\u01e4",
    "\u00f3\u0002\u0983\u0984\u0005\u01dc\u00ef\u0002\u0984\u0985\u0005\u01e6",
    "\u00f4\u0002\u0985\u099b\u0003\u0002\u0002\u0002\u0986\u0987\u0005\u01ae",
    "\u00d8\u0002\u0987\u0988\u0007\u0017\u0002\u0002\u0988\u0989\u0005\u01e2",
    "\u00f2\u0002\u0989\u098a\u0005\u0184\u00c3\u0002\u098a\u098b\u0007\u0018",
    "\u0002\u0002\u098b\u098c\u0005\u01e4\u00f3\u0002\u098c\u098d\u0005\u01e6",
    "\u00f4\u0002\u098d\u099b\u0003\u0002\u0002\u0002\u098e\u098f\u0005\u01ae",
    "\u00d8\u0002\u098f\u0990\u0007\u0017\u0002\u0002\u0990\u0991\u0007\f",
    "\u0002\u0002\u0991\u0992\u0007\u0018\u0002\u0002\u0992\u0993\u0005\u01e4",
    "\u00f3\u0002\u0993\u0994\u0005\u01e6\u00f4\u0002\u0994\u099b\u0003\u0002",
    "\u0002\u0002\u0995\u0996\u0005\u016e\u00b8\u0002\u0996\u0997\u0007\u0017",
    "\u0002\u0002\u0997\u0998\u0005\u019a\u00ce\u0002\u0998\u0999\u0007\u0018",
    "\u0002\u0002\u0999\u099b\u0003\u0002\u0002\u0002\u099a\u0976\u0003\u0002",
    "\u0002\u0002\u099a\u097e\u0003\u0002\u0002\u0002\u099a\u0986\u0003\u0002",
    "\u0002\u0002\u099a\u098e\u0003\u0002\u0002\u0002\u099a\u0995\u0003\u0002",
    "\u0002\u0002\u099b\u01ad\u0003\u0002\u0002\u0002\u099c\u099d\t\u000f",
    "\u0002\u0002\u099d\u01af\u0003\u0002\u0002\u0002\u099e\u09a1\u0005\u01b2",
    "\u00da\u0002\u099f\u09a1\u0005\u01ba\u00de\u0002\u09a0\u099e\u0003\u0002",
    "\u0002\u0002\u09a0\u099f\u0003\u0002\u0002\u0002\u09a1\u01b1\u0003\u0002",
    "\u0002\u0002\u09a2\u09a3\u0007(\u0002\u0002\u09a3\u09a4\u0005\u01b4",
    "\u00db\u0002\u09a4\u09a5\u0005\u01b8\u00dd\u0002\u09a5\u09a6\u0007R",
    "\u0002\u0002\u09a6\u09c0\u0003\u0002\u0002\u0002\u09a7\u09a8\u0007\u00c8",
    "\u0002\u0002\u09a8\u09a9\u0005\u01b4\u00db\u0002\u09a9\u09aa\u0005\u01b8",
    "\u00dd\u0002\u09aa\u09ab\u0007R\u0002\u0002\u09ab\u09c0\u0003\u0002",
    "\u0002\u0002\u09ac\u09ad\u0007S\u0002\u0002\u09ad\u09ae\u0005\u01b4",
    "\u00db\u0002\u09ae\u09af\u0005\u01b8\u00dd\u0002\u09af\u09b0\u0007R",
    "\u0002\u0002\u09b0\u09c0\u0003\u0002\u0002\u0002\u09b1\u09b2\u0007(",
    "\u0002\u0002\u09b2\u09b3\u0007\'\u0002\u0002\u09b3\u09b4\u0007S\u0002",
    "\u0002\u09b4\u09b5\u0005\u01b4\u00db\u0002\u09b5\u09b6\u0005\u01b8\u00dd",
    "\u0002\u09b6\u09b7\u0007R\u0002\u0002\u09b7\u09c0\u0003\u0002\u0002",
    "\u0002\u09b8\u09b9\u0007\u00c8\u0002\u0002\u09b9\u09ba\u0007\'\u0002",
    "\u0002\u09ba\u09bb\u0007S\u0002\u0002\u09bb\u09bc\u0005\u01b4\u00db",
    "\u0002\u09bc\u09bd\u0005\u01b8\u00dd\u0002\u09bd\u09be\u0007R\u0002",
    "\u0002\u09be\u09c0\u0003\u0002\u0002\u0002\u09bf\u09a2\u0003\u0002\u0002",
    "\u0002\u09bf\u09a7\u0003\u0002\u0002\u0002\u09bf\u09ac\u0003\u0002\u0002",
    "\u0002\u09bf\u09b1\u0003\u0002\u0002\u0002\u09bf\u09b8\u0003\u0002\u0002",
    "\u0002\u09c0\u01b3\u0003\u0002\u0002\u0002\u09c1\u09c2\b\u00db\u0001",
    "\u0002\u09c2\u09c3\u0005\u01b6\u00dc\u0002\u09c3\u09c9\u0003\u0002\u0002",
    "\u0002\u09c4\u09c5\f\u0003\u0002\u0002\u09c5\u09c6\u0007\u001b\u0002",
    "\u0002\u09c6\u09c8\u0005\u01b6\u00dc\u0002\u09c7\u09c4\u0003\u0002\u0002",
    "\u0002\u09c8\u09cb\u0003\u0002\u0002\u0002\u09c9\u09c7\u0003\u0002\u0002",
    "\u0002\u09c9\u09ca\u0003\u0002\u0002\u0002\u09ca\u01b5\u0003\u0002\u0002",
    "\u0002\u09cb\u09c9\u0003\u0002\u0002\u0002\u09cc\u09cd\u0005\u0100\u0081",
    "\u0002\u09cd\u09ce\u0007o\u0002\u0002\u09ce\u09cf\u0005\u0184\u00c3",
    "\u0002\u09cf\u09e1\u0003\u0002\u0002\u0002\u09d0\u09d1\u0005\u0100\u0081",
    "\u0002\u09d1\u09d2\u0007\u00ec\u0002\u0002\u09d2\u09d3\u0005\u0184\u00c3",
    "\u0002\u09d3\u09e1\u0003\u0002\u0002\u0002\u09d4\u09d5\u0005\u0100\u0081",
    "\u0002\u09d5\u09d6\u0007\u001c\u0002\u0002\u09d6\u09d7\u0005\u0100\u0081",
    "\u0002\u09d7\u09d8\u0007o\u0002\u0002\u09d8\u09d9\u0005\u0184\u00c3",
    "\u0002\u09d9\u09e1\u0003\u0002\u0002\u0002\u09da\u09db\u0005\u0100\u0081",
    "\u0002\u09db\u09dc\u0007\u001c\u0002\u0002\u09dc\u09dd\u0005\u0100\u0081",
    "\u0002\u09dd\u09de\u0007\u00ec\u0002\u0002\u09de\u09df\u0005\u0184\u00c3",
    "\u0002\u09df\u09e1\u0003\u0002\u0002\u0002\u09e0\u09cc\u0003\u0002\u0002",
    "\u0002\u09e0\u09d0\u0003\u0002\u0002\u0002\u09e0\u09d4\u0003\u0002\u0002",
    "\u0002\u09e0\u09da\u0003\u0002\u0002\u0002\u09e1\u01b7\u0003\u0002\u0002",
    "\u0002\u09e2\u09e3\u0007\u00c0\u0002\u0002\u09e3\u09e4\u0005\u0184\u00c3",
    "\u0002\u09e4\u01b9\u0003\u0002\u0002\u0002\u09e5\u09e6\u0007)\u0002",
    "\u0002\u09e6\u09e7\u0005\u0184\u00c3\u0002\u09e7\u09e8\u0007`\u0002",
    "\u0002\u09e8\u09e9\u0005\u01b4\u00db\u0002\u09e9\u09ea\u0005\u0102\u0082",
    "\u0002\u09ea\u09eb\u0007R\u0002\u0002\u09eb\u09fd\u0003\u0002\u0002",
    "\u0002\u09ec\u09ed\u0007\\\u0002\u0002\u09ed\u09ee\u0005\u0184\u00c3",
    "\u0002\u09ee\u09ef\u0007`\u0002\u0002\u09ef\u09f0\u0005\u01b4\u00db",
    "\u0002\u09f0\u09f1\u0005\u0102\u0082\u0002\u09f1\u09f2\u0007R\u0002",
    "\u0002\u09f2\u09fd\u0003\u0002\u0002\u0002\u09f3\u09f4\u0007\u0099\u0002",
    "\u0002\u09f4\u09f5\u0005\u0184\u00c3\u0002\u09f5\u09f6\u0007\u001c\u0002",
    "\u0002\u09f6\u09f7\u0005\u0184\u00c3\u0002\u09f7\u09f8\u0007`\u0002",
    "\u0002\u09f8\u09f9\u0005\u01b4\u00db\u0002\u09f9\u09fa\u0005\u0102\u0082",
    "\u0002\u09fa\u09fb\u0007R\u0002\u0002\u09fb\u09fd\u0003\u0002\u0002",
    "\u0002\u09fc\u09e5\u0003\u0002\u0002\u0002\u09fc\u09ec\u0003\u0002\u0002",
    "\u0002\u09fc\u09f3\u0003\u0002\u0002\u0002\u09fd\u01bb\u0003\u0002\u0002",
    "\u0002\u09fe\u09ff\u0007\u0017\u0002\u0002\u09ff\u0a00\u0005\u0184\u00c3",
    "\u0002\u0a00\u0a01\u0007\u0018\u0002\u0002\u0a01\u0a08\u0003\u0002\u0002",
    "\u0002\u0a02\u0a03\u0007\u0017\u0002\u0002\u0a03\u0a04\u0005\u01c2\u00e2",
    "\u0002\u0a04\u0a05\u0007\u0018\u0002\u0002\u0a05\u0a08\u0003\u0002\u0002",
    "\u0002\u0a06\u0a08\u0005\u01be\u00e0\u0002\u0a07\u09fe\u0003\u0002\u0002",
    "\u0002\u0a07\u0a02\u0003\u0002\u0002\u0002\u0a07\u0a06\u0003\u0002\u0002",
    "\u0002\u0a08\u01bd\u0003\u0002\u0002\u0002\u0a09\u0a0a\u0007?\u0002",
    "\u0002\u0a0a\u0a0b\u0007\u0017\u0002\u0002\u0a0b\u0a0c\u00058\u001d",
    "\u0002\u0a0c\u0a0d\u0007\u0018\u0002\u0002\u0a0d\u0a13\u0003\u0002\u0002",
    "\u0002\u0a0e\u0a0f\u0007\u0017\u0002\u0002\u0a0f\u0a10\u00058\u001d",
    "\u0002\u0a10\u0a11\u0007\u0018\u0002\u0002\u0a11\u0a13\u0003\u0002\u0002",
    "\u0002\u0a12\u0a09\u0003\u0002\u0002\u0002\u0a12\u0a0e\u0003\u0002\u0002",
    "\u0002\u0a13\u01bf\u0003\u0002\u0002\u0002\u0a14\u0a17\u0005\u0184\u00c3",
    "\u0002\u0a15\u0a17\u0005\u01c2\u00e2\u0002\u0a16\u0a14\u0003\u0002\u0002",
    "\u0002\u0a16\u0a15\u0003\u0002\u0002\u0002\u0a17\u01c1\u0003\u0002\u0002",
    "\u0002\u0a18\u0a19\u0005\u0158\u00ad\u0002\u0a19\u0a1a\u0005\u0184\u00c3",
    "\u0002\u0a1a\u0a22\u0003\u0002\u0002\u0002\u0a1b\u0a1c\u0005\u0158\u00ad",
    "\u0002\u0a1c\u0a1d\u0007L\u0002\u0002\u0a1d\u0a1e\u0005\u0184\u00c3",
    "\u0002\u0a1e\u0a22\u0003\u0002\u0002\u0002\u0a1f\u0a20\u0007L\u0002",
    "\u0002\u0a20\u0a22\u0005\u0184\u00c3\u0002\u0a21\u0a18\u0003\u0002\u0002",
    "\u0002\u0a21\u0a1b\u0003\u0002\u0002\u0002\u0a21\u0a1f\u0003\u0002\u0002",
    "\u0002\u0a22\u01c3\u0003\u0002\u0002\u0002\u0a23\u0a27\u0003\u0002\u0002",
    "\u0002\u0a24\u0a25\u0007\u00ea\u0002\u0002\u0a25\u0a27\u0005\u01c6\u00e4",
    "\u0002\u0a26\u0a23\u0003\u0002\u0002\u0002\u0a26\u0a24\u0003\u0002\u0002",
    "\u0002\u0a27\u01c5\u0003\u0002\u0002\u0002\u0a28\u0a29\b\u00e4\u0001",
    "\u0002\u0a29\u0a2a\u0005\u01c8\u00e5\u0002\u0a2a\u0a30\u0003\u0002\u0002",
    "\u0002\u0a2b\u0a2c\f\u0003\u0002\u0002\u0a2c\u0a2d\u0007\u001b\u0002",
    "\u0002\u0a2d\u0a2f\u0005\u01c8\u00e5\u0002\u0a2e\u0a2b\u0003\u0002\u0002",
    "\u0002\u0a2f\u0a32\u0003\u0002\u0002\u0002\u0a30\u0a2e\u0003\u0002\u0002",
    "\u0002\u0a30\u0a31\u0003\u0002\u0002\u0002\u0a31\u01c7\u0003\u0002\u0002",
    "\u0002\u0a32\u0a30\u0003\u0002\u0002\u0002\u0a33\u0a34\u0007\u00f0\u0002",
    "\u0002\u0a34\u0a35\u0007*\u0002\u0002\u0a35\u0a36\u0005\u01ca\u00e6",
    "\u0002\u0a36\u01c9\u0003\u0002\u0002\u0002\u0a37\u0a38\u0007\u0017\u0002",
    "\u0002\u0a38\u0a39\u0005\u01cc\u00e7\u0002\u0a39\u0a3a\u0005\u01ce\u00e8",
    "\u0002\u0a3a\u0a3b\u0005\u00acW\u0002\u0a3b\u0a3c\u0005\u01d0\u00e9",
    "\u0002\u0a3c\u0a3d\u0007\u0018\u0002\u0002\u0a3d\u01cb\u0003\u0002\u0002",
    "\u0002\u0a3e\u0a41\u0003\u0002\u0002\u0002\u0a3f\u0a41\u0007\u00f0\u0002",
    "\u0002\u0a40\u0a3e\u0003\u0002\u0002\u0002\u0a40\u0a3f\u0003\u0002\u0002",
    "\u0002\u0a41\u01cd\u0003\u0002\u0002\u0002\u0a42\u0a47\u0003\u0002\u0002",
    "\u0002\u0a43\u0a44\u0007\u00a4\u0002\u0002\u0a44\u0a45\u00074\u0002",
    "\u0002\u0a45\u0a47\u0005\u019c\u00cf\u0002\u0a46\u0a42\u0003\u0002\u0002",
    "\u0002\u0a46\u0a43\u0003\u0002\u0002\u0002\u0a47\u01cf\u0003\u0002\u0002",
    "\u0002\u0a48\u0a4e\u0003\u0002\u0002\u0002\u0a49\u0a4a\u0005\u01d2\u00ea",
    "\u0002\u0a4a\u0a4b\u0005\u01d6\u00ec\u0002\u0a4b\u0a4c\u0005\u01d4\u00eb",
    "\u0002\u0a4c\u0a4e\u0003\u0002\u0002\u0002\u0a4d\u0a48\u0003\u0002\u0002",
    "\u0002\u0a4d\u0a49\u0003\u0002\u0002\u0002\u0a4e\u01d1\u0003\u0002\u0002",
    "\u0002\u0a4f\u0a50\t\u0010\u0002\u0002\u0a50\u01d3\u0003\u0002\u0002",
    "\u0002\u0a51\u0a5d\u0003\u0002\u0002\u0002\u0a52\u0a53\u0007U\u0002",
    "\u0002\u0a53\u0a54\u0007\u0093\u0002\u0002\u0a54\u0a5d\u0007\u00a0\u0002",
    "\u0002\u0a55\u0a56\u0007U\u0002\u0002\u0a56\u0a57\u0007B\u0002\u0002",
    "\u0a57\u0a5d\u0007\u00be\u0002\u0002\u0a58\u0a59\u0007U\u0002\u0002",
    "\u0a59\u0a5d\u0007\u00ce\u0002\u0002\u0a5a\u0a5b\u0007U\u0002\u0002",
    "\u0a5b\u0a5d\u0007g\u0002\u0002\u0a5c\u0a51\u0003\u0002\u0002\u0002",
    "\u0a5c\u0a52\u0003\u0002\u0002\u0002\u0a5c\u0a55\u0003\u0002\u0002\u0002",
    "\u0a5c\u0a58\u0003\u0002\u0002\u0002\u0a5c\u0a5a\u0003\u0002\u0002\u0002",
    "\u0a5d\u01d5\u0003\u0002\u0002\u0002\u0a5e\u0a65\u0005\u01d8\u00ed\u0002",
    "\u0a5f\u0a60\u0007.\u0002\u0002\u0a60\u0a61\u0005\u01d8\u00ed\u0002",
    "\u0a61\u0a62\u0007\'\u0002\u0002\u0a62\u0a63\u0005\u01d8\u00ed\u0002",
    "\u0a63\u0a65\u0003\u0002\u0002\u0002\u0a64\u0a5e\u0003\u0002\u0002\u0002",
    "\u0a64\u0a5f\u0003\u0002\u0002\u0002\u0a65\u01d7\u0003\u0002\u0002\u0002",
    "\u0a66\u0a67\u0007\u00d5\u0002\u0002\u0a67\u0a70\u0007\u00a8\u0002\u0002",
    "\u0a68\u0a69\u0007\u00d5\u0002\u0002\u0a69\u0a70\u0007_\u0002\u0002",
    "\u0a6a\u0a6b\u0007B\u0002\u0002\u0a6b\u0a70\u0007\u00be\u0002\u0002",
    "\u0a6c\u0a6d\u0005\u0184\u00c3\u0002\u0a6d\u0a6e\u0005\u01da\u00ee\u0002",
    "\u0a6e\u0a70\u0003\u0002\u0002\u0002\u0a6f\u0a66\u0003\u0002\u0002\u0002",
    "\u0a6f\u0a68\u0003\u0002\u0002\u0002\u0a6f\u0a6a\u0003\u0002\u0002\u0002",
    "\u0a6f\u0a6c\u0003\u0002\u0002\u0002\u0a70\u01d9\u0003\u0002\u0002\u0002",
    "\u0a71\u0a72\t\u0011\u0002\u0002\u0a72\u01db\u0003\u0002\u0002\u0002",
    "\u0a73\u0a76\u0003\u0002\u0002\u0002\u0a74\u0a76\u0005\u01de\u00f0\u0002",
    "\u0a75\u0a73\u0003\u0002\u0002\u0002\u0a75\u0a74\u0003\u0002\u0002\u0002",
    "\u0a76\u01dd\u0003\u0002\u0002\u0002\u0a77\u0a78\u0007\u00b7\u0002\u0002",
    "\u0a78\u0a7c\u0007\u0097\u0002\u0002\u0a79\u0a7a\u0007m\u0002\u0002",
    "\u0a7a\u0a7c\u0007\u0097\u0002\u0002\u0a7b\u0a77\u0003\u0002\u0002\u0002",
    "\u0a7b\u0a79\u0003\u0002\u0002\u0002\u0a7c\u01df\u0003\u0002\u0002\u0002",
    "\u0a7d\u0a81\u0003\u0002\u0002\u0002\u0a7e\u0a7f\u0007b\u0002\u0002",
    "\u0a7f\u0a81\u0005\u00ba^\u0002\u0a80\u0a7d\u0003\u0002\u0002\u0002",
    "\u0a80\u0a7e\u0003\u0002\u0002\u0002\u0a81\u01e1\u0003\u0002\u0002\u0002",
    "\u0a82\u0a83\t\u0012\u0002\u0002\u0a83\u01e3\u0003\u0002\u0002\u0002",
    "\u0a84\u0a8b\u0003\u0002\u0002\u0002\u0a85\u0a86\u0007[\u0002\u0002",
    "\u0a86\u0a87\u0007\u0017\u0002\u0002\u0a87\u0a88\u0005\u009aN\u0002",
    "\u0a88\u0a89\u0007\u0018\u0002\u0002\u0a89\u0a8b\u0003\u0002\u0002\u0002",
    "\u0a8a\u0a84\u0003\u0002\u0002\u0002\u0a8a\u0a85\u0003\u0002\u0002\u0002",
    "\u0a8b\u01e5\u0003\u0002\u0002\u0002\u0a8c\u0a8f\u0003\u0002\u0002\u0002",
    "\u0a8d\u0a8f\u0005\u01e8\u00f5\u0002\u0a8e\u0a8c\u0003\u0002\u0002\u0002",
    "\u0a8e\u0a8d\u0003\u0002\u0002\u0002\u0a8f\u01e7\u0003\u0002\u0002\u0002",
    "\u0a90\u0a91\u0007\u00a2\u0002\u0002\u0a91\u0a95\u0007\u00f0\u0002\u0002",
    "\u0a92\u0a93\u0007\u00a2\u0002\u0002\u0a93\u0a95\u0005\u01ca\u00e6\u0002",
    "\u0a94\u0a90\u0003\u0002\u0002\u0002\u0a94\u0a92\u0003\u0002\u0002\u0002",
    "\u0a95\u01e9\u0003\u0002\u0002\u0002\u0a96\u0a97\u0005\u01f0\u00f9\u0002",
    "\u0a97\u0a98\u0005\u01f4\u00fb\u0002\u0a98\u0a99\u0005\u01fa\u00fe\u0002",
    "\u0a99\u01eb\u0003\u0002\u0002\u0002\u0a9a\u0a9b\u0007;\u0002\u0002",
    "\u0a9b\u0a9c\u0005\u01f2\u00fa\u0002\u0a9c\u01ed\u0003\u0002\u0002\u0002",
    "\u0a9d\u0a9e\u0007\u00bd\u0002\u0002\u0a9e\u0a9f\u0005\u01f2\u00fa\u0002",
    "\u0a9f\u0aa0\u0005\u01f6\u00fc\u0002\u0aa0\u01ef\u0003\u0002\u0002\u0002",
    "\u0aa1\u0aa2\t\u0013\u0002\u0002\u0aa2\u01f1\u0003\u0002\u0002\u0002",
    "\u0aa3\u0aa6\u0003\u0002\u0002\u0002\u0aa4\u0aa6\u0005\u01f4\u00fb\u0002",
    "\u0aa5\u0aa3\u0003\u0002\u0002\u0002\u0aa5\u0aa4\u0003\u0002\u0002\u0002",
    "\u0aa6\u01f3\u0003\u0002\u0002\u0002\u0aa7\u0aa8\t\u0014\u0002\u0002",
    "\u0aa8\u01f5\u0003\u0002\u0002\u0002\u0aa9\u0aae\u0003\u0002\u0002\u0002",
    "\u0aaa\u0aab\u0007\u00cf\u0002\u0002\u0aab\u0aac\u0007\u00c1\u0002\u0002",
    "\u0aac\u0aae\u0005\u01f8\u00fd\u0002\u0aad\u0aa9\u0003\u0002\u0002\u0002",
    "\u0aad\u0aaa\u0003\u0002\u0002\u0002\u0aae\u01f7\u0003\u0002\u0002\u0002",
    "\u0aaf\u0ab0\u0007\u00f0\u0002\u0002\u0ab0\u01f9\u0003\u0002\u0002\u0002",
    "\u0ab1\u0ab4\u0003\u0002\u0002\u0002\u0ab2\u0ab4\u0005\u01fc\u00ff\u0002",
    "\u0ab3\u0ab1\u0003\u0002\u0002\u0002\u0ab3\u0ab2\u0003\u0002\u0002\u0002",
    "\u0ab4\u01fb\u0003\u0002\u0002\u0002\u0ab5\u0ab6\u0007z\u0002\u0002",
    "\u0ab6\u0ab7\u0007\u0086\u0002\u0002\u0ab7\u0ab8\u0005\u01fe\u0100\u0002",
    "\u0ab8\u01fd\u0003\u0002\u0002\u0002\u0ab9\u0aba\u0007\u00b2\u0002\u0002",
    "\u0aba\u0abb\u0007<\u0002\u0002\u0abb\u01ff\u0003\u0002\u0002\u0002",
    "\u0abc\u0abd\u0007\u00c6\u0002\u0002\u0abd\u0abe\u0007\u00d1\u0002\u0002",
    "\u0abe\u0abf\u0005\u01fc\u00ff\u0002\u0abf\u0201\u0003\u0002\u0002\u0002",
    "\u0ac0\u0ac1\u0007\u00c1\u0002\u0002\u0ac1\u0ac2\u0005\u01f8\u00fd\u0002",
    "\u0ac2\u0203\u0003\u0002\u0002\u0002\u00a4\u0208\u020f\u0217\u0221\u0229",
    "\u0235\u023c\u0247\u0252\u0258\u0264\u0269\u026d\u0273\u0277\u027c\u0281",
    "\u0288\u0297\u02b6\u02cd\u02cf\u02d4\u02d8\u02f5\u02fa\u0306\u0311\u0315",
    "\u031a\u0320\u032f\u0361\u0363\u036b\u037d\u0382\u0390\u03a1\u03b2\u03b6",
    "\u03c0\u03ce\u03d2\u03e0\u03ed\u03f7\u0401\u040a\u0411\u041a\u0424\u042c",
    "\u0433\u043a\u0448\u0451\u0459\u0461\u0468\u047d\u048c\u0492\u04a5\u04b2",
    "\u04b9\u04be\u04d0\u04d9\u04f3\u0505\u0528\u0535\u0543\u054c\u055b\u0566",
    "\u057d\u0584\u0591\u05a8\u05bf\u05cf\u05d8\u05e4\u05f6\u0604\u060e\u061b",
    "\u0638\u0642\u0649\u0657\u0686\u068a\u0690\u069c\u06a6\u06b1\u06bb\u06bf",
    "\u06c7\u06cb\u06d8\u06e8\u06f1\u06f8\u0711\u0723\u073a\u073e\u074c\u0753",
    "\u075d\u0774\u07fb\u07ff\u0809\u0828\u082a\u0833\u08c1\u08c3\u08d8\u0917",
    "\u0919\u0920\u0928\u0932\u093a\u0942\u094c\u0957\u096b\u0974\u099a\u09a0",
    "\u09bf\u09c9\u09e0\u09fc\u0a07\u0a12\u0a16\u0a21\u0a26\u0a30\u0a40\u0a46",
    "\u0a4d\u0a5c\u0a64\u0a6f\u0a75\u0a7b\u0a80\u0a8a\u0a8e\u0a94\u0aa5\u0aad",
    "\u0ab3"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class n1qlParser extends antlr4.Parser {

    static grammarFileName = "n1ql.g4";
    static literalNames = [ null, null, null, null, null, null, null, "'.'", 
                            "'+'", null, "'*'", "'/'", "'%'", "'=='", "'='", 
                            null, "'<'", "'<='", "'>'", "'>='", "'||'", 
                            "'('", "')'", "'{'", "'}'", "','", "':'", "'['", 
                            "']'", "']i'", "';'", "'!'", null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, "'?'" ];
    static symbolicNames = [ null, "STR", "INT", "NUM", "BLOCK_COMMENT", 
                             "LINE_COMMENT", "WHITESPACE", "DOT", "PLUS", 
                             "MINUS", "STAR", "DIV", "MOD", "DEQ", "EQ", 
                             "NE", "LT", "LE", "GT", "GE", "CONCAT", "LPAREN", 
                             "RPAREN", "LBRACE", "RBRACE", "COMMA", "COLON", 
                             "LBRACKET", "RBRACKET", "RBRACKET_ICASE", "SEMI", 
                             "NOT_A_TOKEN", "NAMESPACE_ID", "ADVISE", "ALL", 
                             "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", 
                             "AS", "ASC", "AT", "BEGIN", "BETWEEN", "BINARY", 
                             "BOOLEAN", "BREAK", "BUCKET", "BUILD", "BY", 
                             "CALL", "CASE", "CAST", "CLUSTER", "COLLATE", 
                             "COLLECTION", "COMMIT", "COMMITTED", "CONNECT", 
                             "CONTINUE", "CORRELATED", "COVER", "CREATE", 
                             "CURRENT", "DATABASE", "DATASET", "DATASTORE", 
                             "DECLARE", "DECREMENT", "DELETE_", "DERIVED", 
                             "DESC", "DESCRIBE", "DISTINCT", "DO", "DROP", 
                             "EACH", "ELEMENT", "ELSE", "END", "EVERY", 
                             "EXCEPT", "EXCLUDE", "EXECUTE", "EXISTS", "EXPLAIN", 
                             "FALSE", "FETCH", "FILTER", "FIRST", "FLATTEN", 
                             "FLUSH", "FOLLOWING", "FOR", "FORCE", "FROM", 
                             "FTS", "FUNCTION", "GOLANG", "GRANT", "GROUP", 
                             "GROUPS", "GSI", "HASH", "HAVING", "IF", "IGNORE", 
                             "ILIKE", "IN", "INCLUDE", "INCREMENT", "INDEX", 
                             "INFER", "INLINE", "INNER", "INSERT", "INTERSECT", 
                             "INTO", "IS", "ISOLATION", "JAVASCRIPT", "JOIN", 
                             "KEY", "KEYS", "KEYSPACE", "KNOWN", "LANGUAGE", 
                             "LAST", "LEFT", "LET_", "LETTING", "LEVEL", 
                             "LIKE", "LIMIT", "LSM", "MAP", "MAPPING", "MATCHED", 
                             "MATERIALIZED", "MERGE", "MISSING", "NAMESPACE", 
                             "NEST", "NL", "NO", "NOT", "NTH_VALUE", "NULL", 
                             "NULLS", "NUMBER", "OBJECT", "OFFSET", "ON", 
                             "OPTION", "OPTIONS", "OR", "ORDER", "OTHERS", 
                             "OUTER", "OVER", "PARSE", "PARTITION", "PASSWORD", 
                             "PATH", "POOL", "PRECEDING", "PREPARE", "PRIMARY", 
                             "PRIVATE", "PRIVILEGE", "PROCEDURE", "PROBE", 
                             "PUBLIC", "RANGE", "RAW", "READ", "REALM", 
                             "REDUCE", "RENAME", "REPLACE", "RESPECT", "RETURN", 
                             "RETURNING", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", 
                             "ROW", "ROWS", "SATISFIES", "SAVEPOINT", "SCHEMA", 
                             "SCOPE", "SELECT", "SELF", "SET", "SHOW", "SOME", 
                             "START", "STATISTICS", "STRING", "SYSTEM", 
                             "THEN", "TIES", "TO", "TRAN", "TRANSACTION", 
                             "TRIGGER", "TRUE", "TRUNCATE", "UNBOUNDED", 
                             "UNDER", "UNION", "UNIQUE", "UNKNOWN", "UNNEST", 
                             "UNSET", "UPDATE", "UPSERT", "USE", "USER", 
                             "USING", "VALIDATE", "VALUE", "VALUED", "VALUES", 
                             "VIA", "VIEW", "WHEN", "WHERE", "WHILE", "WINDOW", 
                             "WITH", "WITHIN", "WORK", "XOR", "IDENT_ICASE", 
                             "IDENT", "NAMED_PARAM", "POSITIONAL_PARAM", 
                             "NEXT_PARAM" ];
    static ruleNames = [ "input", "opt_trailer", "stmt_body", "stmt", "advise", 
                         "opt_index", "explain", "prepare", "opt_force", 
                         "opt_name", "from_or_as", "execute", "execute_using", 
                         "infer", "opt_keyspace_collection", "opt_infer_using", 
                         "opt_infer_ustat_with", "infer_ustat_with", "select_stmt", 
                         "dml_stmt", "ddl_stmt", "role_stmt", "index_stmt", 
                         "scope_stmt", "collection_stmt", "function_stmt", 
                         "transaction_stmt", "fullselect", "select_terms", 
                         "select_term", "subselect", "from_select", "select_from", 
                         "select_clause", "projection", "opt_quantifier", 
                         "raw", "projects", "project", "opt_as_alias", "as_alias", 
                         "alias", "opt_from", "from", "from_term", "simple_from_term", 
                         "unnest", "keyspace_term", "keyspace_path", "namespace_term", 
                         "namespace_name", "bucket_name", "scope_name", 
                         "keyspace_name", "opt_use", "use_options", "use_keys", 
                         "use_index", "join_hint", "opt_primary", "index_refs", 
                         "index_ref", "use_hash_option", "opt_use_del_upd", 
                         "opt_join_type", "opt_outer", "on_keys", "on_key", 
                         "opt_let", "let_", "bindings", "binding", "opt_with", 
                         "with_list", "with_term", "opt_where", "where", 
                         "opt_group", "group", "group_terms", "group_term", 
                         "opt_letting", "letting", "opt_having", "having", 
                         "opt_order_by", "order_by", "sort_terms", "sort_term", 
                         "opt_dir", "dir", "opt_order_nulls", "first_last", 
                         "nulls", "opt_limit", "limit", "opt_offset", "offset", 
                         "insert", "simple_keyspace_ref", "keyspace_ref", 
                         "opt_values_header", "key", "values_list", "values", 
                         "next_values", "key_val_expr", "key_val_options_expr", 
                         "opt_returning", "returning", "returns_", "key_expr_header", 
                         "value_expr_header", "options_expr_header", "key_val_options_expr_header", 
                         "upsert", "delete_", "update", "set", "set_terms", 
                         "set_term", "function_meta_expr", "opt_update_for", 
                         "update_for", "update_dimensions", "update_dimension", 
                         "update_binding", "variable", "opt_when", "unset", 
                         "unset_terms", "unset_term", "merge", "opt_use_merge", 
                         "opt_key", "merge_actions", "opt_merge_delete_insert", 
                         "opt_merge_insert", "merge_update", "merge_delete", 
                         "merge_insert", "grant_role", "role_list", "role_name", 
                         "keyspace_scope_list", "keyspace_scope", "user_list", 
                         "user", "revoke_role", "create_scope", "drop_scope", 
                         "create_collection", "drop_collection", "flush_collection", 
                         "flush_or_truncate", "create_index", "opt_primary_name", 
                         "index_name", "opt_index_name", "named_keyspace_ref", 
                         "simple_named_keyspace_ref", "named_scope_ref", 
                         "index_partition", "opt_index_using", "index_using", 
                         "opt_index_with", "index_with", "index_terms", 
                         "index_term", "index_term_expr", "index_expr", 
                         "all", "index_where", "opt_ikattr", "ikattr", "drop_index", 
                         "alter_index", "build_index", "create_function", 
                         "opt_replace", "func_name", "short_func_name", 
                         "long_func_name", "parm_list", "parameter_terms", 
                         "func_body", "drop_function", "execute_function", 
                         "update_statistics", "opt_for", "update_stat_terms", 
                         "update_stat_term", "path", "expr", "valued", "c_expr", 
                         "b_expr", "literal", "construction_expr", "object", 
                         "opt_members", "members", "member", "array", "opt_exprs", 
                         "exprs", "param_expr", "case_expr", "simple_or_searched_case", 
                         "simple_case", "when_thens", "searched_case", "opt_else", 
                         "function_expr", "function_name", "collection_expr", 
                         "collection_cond", "coll_bindings", "coll_binding", 
                         "satisfies", "collection_xform", "paren_expr", 
                         "subquery_expr", "expr_input", "all_expr", "opt_window_clause", 
                         "window_list", "window_term", "window_specification", 
                         "opt_window_name", "opt_window_partition", "opt_window_frame", 
                         "window_frame_modifier", "opt_window_frame_exclusion", 
                         "window_frame_extents", "window_frame_extent", 
                         "window_frame_valexpr_modifier", "opt_nulls_treatment", 
                         "nulls_treatment", "opt_from_first_last", "agg_quantifier", 
                         "opt_filter", "opt_window_function", "window_function_details", 
                         "start_transaction", "commit_transaction", "rollback_transaction", 
                         "start_or_begin", "opt_transaction", "transaction", 
                         "opt_savepoint", "savepoint_name", "opt_isolation_level", 
                         "isolation_level", "isolation_val", "set_transaction_isolation", 
                         "savepoint" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = n1qlParser.ruleNames;
        this.literalNames = n1qlParser.literalNames;
        this.symbolicNames = n1qlParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 1:
    	    		return this.opt_trailer_sempred(localctx, predIndex);
    	case 28:
    	    		return this.select_terms_sempred(localctx, predIndex);
    	case 37:
    	    		return this.projects_sempred(localctx, predIndex);
    	case 44:
    	    		return this.from_term_sempred(localctx, predIndex);
    	case 60:
    	    		return this.index_refs_sempred(localctx, predIndex);
    	case 70:
    	    		return this.bindings_sempred(localctx, predIndex);
    	case 73:
    	    		return this.with_list_sempred(localctx, predIndex);
    	case 79:
    	    		return this.group_terms_sempred(localctx, predIndex);
    	case 87:
    	    		return this.sort_terms_sempred(localctx, predIndex);
    	case 103:
    	    		return this.values_list_sempred(localctx, predIndex);
    	case 119:
    	    		return this.set_terms_sempred(localctx, predIndex);
    	case 124:
    	    		return this.update_dimensions_sempred(localctx, predIndex);
    	case 125:
    	    		return this.update_dimension_sempred(localctx, predIndex);
    	case 130:
    	    		return this.unset_terms_sempred(localctx, predIndex);
    	case 142:
    	    		return this.role_list_sempred(localctx, predIndex);
    	case 144:
    	    		return this.keyspace_scope_list_sempred(localctx, predIndex);
    	case 146:
    	    		return this.user_list_sempred(localctx, predIndex);
    	case 167:
    	    		return this.index_terms_sempred(localctx, predIndex);
    	case 184:
    	    		return this.parameter_terms_sempred(localctx, predIndex);
    	case 190:
    	    		return this.update_stat_terms_sempred(localctx, predIndex);
    	case 192:
    	    		return this.path_sempred(localctx, predIndex);
    	case 193:
    	    		return this.expr_sempred(localctx, predIndex);
    	case 196:
    	    		return this.b_expr_sempred(localctx, predIndex);
    	case 201:
    	    		return this.members_sempred(localctx, predIndex);
    	case 205:
    	    		return this.exprs_sempred(localctx, predIndex);
    	case 210:
    	    		return this.when_thens_sempred(localctx, predIndex);
    	case 217:
    	    		return this.coll_bindings_sempred(localctx, predIndex);
    	case 226:
    	    		return this.window_list_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    opt_trailer_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    select_terms_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 12);
    		case 2:
    			return this.precpred(this._ctx, 11);
    		case 3:
    			return this.precpred(this._ctx, 10);
    		case 4:
    			return this.precpred(this._ctx, 9);
    		case 5:
    			return this.precpred(this._ctx, 8);
    		case 6:
    			return this.precpred(this._ctx, 7);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    projects_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    from_term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 8);
    		case 9:
    			return this.precpred(this._ctx, 7);
    		case 10:
    			return this.precpred(this._ctx, 6);
    		case 11:
    			return this.precpred(this._ctx, 5);
    		case 12:
    			return this.precpred(this._ctx, 4);
    		case 13:
    			return this.precpred(this._ctx, 3);
    		case 14:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    index_refs_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 15:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    bindings_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 16:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    with_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 17:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    group_terms_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 18:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    sort_terms_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 19:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    values_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 20:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    set_terms_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 21:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    update_dimensions_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 22:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    update_dimension_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 23:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    unset_terms_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 24:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    role_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 25:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    keyspace_scope_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 26:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    user_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 27:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    index_terms_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 28:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    parameter_terms_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 29:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    update_stat_terms_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 30:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    path_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 31:
    			return this.precpred(this._ctx, 5);
    		case 32:
    			return this.precpred(this._ctx, 4);
    		case 33:
    			return this.precpred(this._ctx, 3);
    		case 34:
    			return this.precpred(this._ctx, 2);
    		case 35:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 36:
    			return this.precpred(this._ctx, 31);
    		case 37:
    			return this.precpred(this._ctx, 30);
    		case 38:
    			return this.precpred(this._ctx, 29);
    		case 39:
    			return this.precpred(this._ctx, 28);
    		case 40:
    			return this.precpred(this._ctx, 27);
    		case 41:
    			return this.precpred(this._ctx, 26);
    		case 42:
    			return this.precpred(this._ctx, 25);
    		case 43:
    			return this.precpred(this._ctx, 24);
    		case 44:
    			return this.precpred(this._ctx, 22);
    		case 45:
    			return this.precpred(this._ctx, 21);
    		case 46:
    			return this.precpred(this._ctx, 20);
    		case 47:
    			return this.precpred(this._ctx, 19);
    		case 48:
    			return this.precpred(this._ctx, 18);
    		case 49:
    			return this.precpred(this._ctx, 17);
    		case 50:
    			return this.precpred(this._ctx, 16);
    		case 51:
    			return this.precpred(this._ctx, 13);
    		case 52:
    			return this.precpred(this._ctx, 12);
    		case 53:
    			return this.precpred(this._ctx, 11);
    		case 54:
    			return this.precpred(this._ctx, 10);
    		case 55:
    			return this.precpred(this._ctx, 9);
    		case 56:
    			return this.precpred(this._ctx, 8);
    		case 57:
    			return this.precpred(this._ctx, 39);
    		case 58:
    			return this.precpred(this._ctx, 38);
    		case 59:
    			return this.precpred(this._ctx, 37);
    		case 60:
    			return this.precpred(this._ctx, 36);
    		case 61:
    			return this.precpred(this._ctx, 35);
    		case 62:
    			return this.precpred(this._ctx, 34);
    		case 63:
    			return this.precpred(this._ctx, 33);
    		case 64:
    			return this.precpred(this._ctx, 32);
    		case 65:
    			return this.precpred(this._ctx, 15);
    		case 66:
    			return this.precpred(this._ctx, 14);
    		case 67:
    			return this.precpred(this._ctx, 7);
    		case 68:
    			return this.precpred(this._ctx, 6);
    		case 69:
    			return this.precpred(this._ctx, 5);
    		case 70:
    			return this.precpred(this._ctx, 4);
    		case 71:
    			return this.precpred(this._ctx, 3);
    		case 72:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    b_expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 73:
    			return this.precpred(this._ctx, 6);
    		case 74:
    			return this.precpred(this._ctx, 5);
    		case 75:
    			return this.precpred(this._ctx, 4);
    		case 76:
    			return this.precpred(this._ctx, 3);
    		case 77:
    			return this.precpred(this._ctx, 2);
    		case 78:
    			return this.precpred(this._ctx, 1);
    		case 79:
    			return this.precpred(this._ctx, 14);
    		case 80:
    			return this.precpred(this._ctx, 13);
    		case 81:
    			return this.precpred(this._ctx, 12);
    		case 82:
    			return this.precpred(this._ctx, 11);
    		case 83:
    			return this.precpred(this._ctx, 10);
    		case 84:
    			return this.precpred(this._ctx, 9);
    		case 85:
    			return this.precpred(this._ctx, 8);
    		case 86:
    			return this.precpred(this._ctx, 7);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    members_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 87:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    exprs_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 88:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    when_thens_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 89:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    coll_bindings_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 90:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    window_list_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 91:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	input() {
	    let localctx = new InputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, n1qlParser.RULE_input);
	    try {
	        this.state = 518;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 514;
	            this.stmt_body();
	            this.state = 515;
	            this.opt_trailer(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 517;
	            this.expr_input();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	opt_trailer(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Opt_trailerContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 2;
	    this.enterRecursionRule(localctx, 2, n1qlParser.RULE_opt_trailer, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 525;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Opt_trailerContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_opt_trailer);
	                this.state = 521;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 522;
	                this.match(n1qlParser.SEMI); 
	            }
	            this.state = 527;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	stmt_body() {
	    let localctx = new Stmt_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, n1qlParser.RULE_stmt_body);
	    try {
	        this.state = 533;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 528;
	            this.advise();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 529;
	            this.explain();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 530;
	            this.prepare();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 531;
	            this.execute();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 532;
	            this.stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt() {
	    let localctx = new StmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, n1qlParser.RULE_stmt);
	    try {
	        this.state = 543;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 535;
	            this.select_stmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 536;
	            this.dml_stmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 537;
	            this.ddl_stmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 538;
	            this.infer();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 539;
	            this.update_statistics();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 540;
	            this.role_stmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 541;
	            this.function_stmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 542;
	            this.transaction_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	advise() {
	    let localctx = new AdviseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, n1qlParser.RULE_advise);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 545;
	        this.match(n1qlParser.ADVISE);
	        this.state = 546;
	        this.opt_index();
	        this.state = 547;
	        this.stmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_index() {
	    let localctx = new Opt_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, n1qlParser.RULE_opt_index);
	    try {
	        this.state = 551;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.LPAREN:
	        case n1qlParser.ALTER:
	        case n1qlParser.ANALYZE:
	        case n1qlParser.BEGIN:
	        case n1qlParser.BUILD:
	        case n1qlParser.COMMIT:
	        case n1qlParser.CORRELATED:
	        case n1qlParser.CREATE:
	        case n1qlParser.DELETE_:
	        case n1qlParser.DROP:
	        case n1qlParser.EXECUTE:
	        case n1qlParser.FLUSH:
	        case n1qlParser.FROM:
	        case n1qlParser.GRANT:
	        case n1qlParser.INFER:
	        case n1qlParser.INSERT:
	        case n1qlParser.MERGE:
	        case n1qlParser.REVOKE:
	        case n1qlParser.ROLLBACK:
	        case n1qlParser.SAVEPOINT:
	        case n1qlParser.SELECT:
	        case n1qlParser.SET:
	        case n1qlParser.START:
	        case n1qlParser.TRUNCATE:
	        case n1qlParser.UPDATE:
	        case n1qlParser.UPSERT:
	        case n1qlParser.WITH:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.INDEX:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 550;
	            this.match(n1qlParser.INDEX);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explain() {
	    let localctx = new ExplainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, n1qlParser.RULE_explain);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 553;
	        this.match(n1qlParser.EXPLAIN);
	        this.state = 554;
	        this.stmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prepare() {
	    let localctx = new PrepareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, n1qlParser.RULE_prepare);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 556;
	        this.match(n1qlParser.PREPARE);
	        this.state = 557;
	        this.opt_force();
	        this.state = 558;
	        this.opt_name();
	        this.state = 559;
	        this.stmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_force() {
	    let localctx = new Opt_forceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, n1qlParser.RULE_opt_force);
	    try {
	        this.state = 563;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.STR:
	        case n1qlParser.LPAREN:
	        case n1qlParser.ALTER:
	        case n1qlParser.ANALYZE:
	        case n1qlParser.BEGIN:
	        case n1qlParser.BUILD:
	        case n1qlParser.COMMIT:
	        case n1qlParser.CORRELATED:
	        case n1qlParser.CREATE:
	        case n1qlParser.DELETE_:
	        case n1qlParser.DROP:
	        case n1qlParser.EXECUTE:
	        case n1qlParser.FLUSH:
	        case n1qlParser.FROM:
	        case n1qlParser.GRANT:
	        case n1qlParser.INFER:
	        case n1qlParser.INSERT:
	        case n1qlParser.MERGE:
	        case n1qlParser.REVOKE:
	        case n1qlParser.ROLLBACK:
	        case n1qlParser.SAVEPOINT:
	        case n1qlParser.SELECT:
	        case n1qlParser.SET:
	        case n1qlParser.START:
	        case n1qlParser.TRUNCATE:
	        case n1qlParser.UPDATE:
	        case n1qlParser.UPSERT:
	        case n1qlParser.WITH:
	        case n1qlParser.IDENT:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.FORCE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 562;
	            this.match(n1qlParser.FORCE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_name() {
	    let localctx = new Opt_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, n1qlParser.RULE_opt_name);
	    try {
	        this.state = 570;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.LPAREN:
	        case n1qlParser.ALTER:
	        case n1qlParser.ANALYZE:
	        case n1qlParser.BEGIN:
	        case n1qlParser.BUILD:
	        case n1qlParser.COMMIT:
	        case n1qlParser.CORRELATED:
	        case n1qlParser.CREATE:
	        case n1qlParser.DELETE_:
	        case n1qlParser.DROP:
	        case n1qlParser.EXECUTE:
	        case n1qlParser.FLUSH:
	        case n1qlParser.FROM:
	        case n1qlParser.GRANT:
	        case n1qlParser.INFER:
	        case n1qlParser.INSERT:
	        case n1qlParser.MERGE:
	        case n1qlParser.REVOKE:
	        case n1qlParser.ROLLBACK:
	        case n1qlParser.SAVEPOINT:
	        case n1qlParser.SELECT:
	        case n1qlParser.SET:
	        case n1qlParser.START:
	        case n1qlParser.TRUNCATE:
	        case n1qlParser.UPDATE:
	        case n1qlParser.UPSERT:
	        case n1qlParser.WITH:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.IDENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 566;
	            this.match(n1qlParser.IDENT);
	            this.state = 567;
	            this.from_or_as();
	            break;
	        case n1qlParser.STR:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 568;
	            this.match(n1qlParser.STR);
	            this.state = 569;
	            this.from_or_as();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	from_or_as() {
	    let localctx = new From_or_asContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, n1qlParser.RULE_from_or_as);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 572;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.AS || _la===n1qlParser.FROM)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execute() {
	    let localctx = new ExecuteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, n1qlParser.RULE_execute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 574;
	        this.match(n1qlParser.EXECUTE);
	        this.state = 575;
	        this.expr(0);
	        this.state = 576;
	        this.execute_using();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execute_using() {
	    let localctx = new Execute_usingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, n1qlParser.RULE_execute_using);
	    try {
	        this.state = 581;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 579;
	            this.match(n1qlParser.USING);
	            this.state = 580;
	            this.construction_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infer() {
	    let localctx = new InferContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, n1qlParser.RULE_infer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 583;
	        this.match(n1qlParser.INFER);
	        this.state = 584;
	        this.opt_keyspace_collection();
	        this.state = 585;
	        this.simple_keyspace_ref();
	        this.state = 586;
	        this.opt_infer_using();
	        this.state = 587;
	        this.opt_infer_ustat_with();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_keyspace_collection() {
	    let localctx = new Opt_keyspace_collectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, n1qlParser.RULE_opt_keyspace_collection);
	    try {
	        this.state = 592;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.SYSTEM:
	        case n1qlParser.IDENT:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.KEYSPACE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 590;
	            this.match(n1qlParser.KEYSPACE);
	            break;
	        case n1qlParser.COLLECTION:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 591;
	            this.match(n1qlParser.COLLECTION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_infer_using() {
	    let localctx = new Opt_infer_usingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, n1qlParser.RULE_opt_infer_using);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_infer_ustat_with() {
	    let localctx = new Opt_infer_ustat_withContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, n1qlParser.RULE_opt_infer_ustat_with);
	    try {
	        this.state = 598;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 597;
	            this.infer_ustat_with();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infer_ustat_with() {
	    let localctx = new Infer_ustat_withContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, n1qlParser.RULE_infer_ustat_with);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 600;
	        this.match(n1qlParser.WITH);
	        this.state = 601;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_stmt() {
	    let localctx = new Select_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, n1qlParser.RULE_select_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 603;
	        this.fullselect();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dml_stmt() {
	    let localctx = new Dml_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, n1qlParser.RULE_dml_stmt);
	    try {
	        this.state = 610;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.INSERT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 605;
	            this.insert();
	            break;
	        case n1qlParser.UPSERT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 606;
	            this.upsert();
	            break;
	        case n1qlParser.DELETE_:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 607;
	            this.delete_();
	            break;
	        case n1qlParser.UPDATE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 608;
	            this.update();
	            break;
	        case n1qlParser.MERGE:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 609;
	            this.merge();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ddl_stmt() {
	    let localctx = new Ddl_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, n1qlParser.RULE_ddl_stmt);
	    try {
	        this.state = 615;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 612;
	            this.index_stmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 613;
	            this.scope_stmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 614;
	            this.collection_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	role_stmt() {
	    let localctx = new Role_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, n1qlParser.RULE_role_stmt);
	    try {
	        this.state = 619;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.GRANT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 617;
	            this.grant_role();
	            break;
	        case n1qlParser.REVOKE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 618;
	            this.revoke_role();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_stmt() {
	    let localctx = new Index_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, n1qlParser.RULE_index_stmt);
	    try {
	        this.state = 625;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.CREATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 621;
	            this.create_index();
	            break;
	        case n1qlParser.DROP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 622;
	            this.drop_index();
	            break;
	        case n1qlParser.ALTER:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 623;
	            this.alter_index();
	            break;
	        case n1qlParser.BUILD:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 624;
	            this.build_index();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scope_stmt() {
	    let localctx = new Scope_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, n1qlParser.RULE_scope_stmt);
	    try {
	        this.state = 629;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.CREATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 627;
	            this.create_scope();
	            break;
	        case n1qlParser.DROP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 628;
	            this.drop_scope();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection_stmt() {
	    let localctx = new Collection_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, n1qlParser.RULE_collection_stmt);
	    try {
	        this.state = 634;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.CREATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 631;
	            this.create_collection();
	            break;
	        case n1qlParser.DROP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 632;
	            this.drop_collection();
	            break;
	        case n1qlParser.FLUSH:
	        case n1qlParser.TRUNCATE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 633;
	            this.flush_collection();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_stmt() {
	    let localctx = new Function_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, n1qlParser.RULE_function_stmt);
	    try {
	        this.state = 639;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.CREATE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 636;
	            this.create_function();
	            break;
	        case n1qlParser.DROP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 637;
	            this.drop_function();
	            break;
	        case n1qlParser.EXECUTE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 638;
	            this.execute_function();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transaction_stmt() {
	    let localctx = new Transaction_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, n1qlParser.RULE_transaction_stmt);
	    try {
	        this.state = 646;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.BEGIN:
	        case n1qlParser.START:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 641;
	            this.start_transaction();
	            break;
	        case n1qlParser.COMMIT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 642;
	            this.commit_transaction();
	            break;
	        case n1qlParser.ROLLBACK:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 643;
	            this.rollback_transaction();
	            break;
	        case n1qlParser.SAVEPOINT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 644;
	            this.savepoint();
	            break;
	        case n1qlParser.SET:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 645;
	            this.set_transaction_isolation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullselect() {
	    let localctx = new FullselectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, n1qlParser.RULE_fullselect);
	    try {
	        this.state = 661;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 648;
	            this.select_terms(0);
	            this.state = 649;
	            this.opt_order_by();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 651;
	            this.select_terms(0);
	            this.state = 652;
	            this.opt_order_by();
	            this.state = 653;
	            this.limit();
	            this.state = 654;
	            this.opt_offset();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 656;
	            this.select_terms(0);
	            this.state = 657;
	            this.opt_order_by();
	            this.state = 658;
	            this.offset();
	            this.state = 659;
	            this.opt_limit();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	select_terms(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Select_termsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 56;
	    this.enterRecursionRule(localctx, 56, n1qlParser.RULE_select_terms, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 692;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 664;
	            this.subselect();
	            break;

	        case 2:
	            this.state = 665;
	            this.subquery_expr();
	            this.state = 666;
	            this.match(n1qlParser.UNION);
	            this.state = 667;
	            this.select_term();
	            break;

	        case 3:
	            this.state = 669;
	            this.subquery_expr();
	            this.state = 670;
	            this.match(n1qlParser.UNION);
	            this.state = 671;
	            this.match(n1qlParser.ALL);
	            this.state = 672;
	            this.select_term();
	            break;

	        case 4:
	            this.state = 674;
	            this.subquery_expr();
	            this.state = 675;
	            this.match(n1qlParser.INTERSECT);
	            this.state = 676;
	            this.select_term();
	            break;

	        case 5:
	            this.state = 678;
	            this.subquery_expr();
	            this.state = 679;
	            this.match(n1qlParser.INTERSECT);
	            this.state = 680;
	            this.match(n1qlParser.ALL);
	            this.state = 681;
	            this.select_term();
	            break;

	        case 6:
	            this.state = 683;
	            this.subquery_expr();
	            this.state = 684;
	            this.match(n1qlParser.EXCEPT);
	            this.state = 685;
	            this.select_term();
	            break;

	        case 7:
	            this.state = 687;
	            this.subquery_expr();
	            this.state = 688;
	            this.match(n1qlParser.EXCEPT);
	            this.state = 689;
	            this.match(n1qlParser.ALL);
	            this.state = 690;
	            this.select_term();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 717;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 715;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Select_termsContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_select_terms);
	                    this.state = 694;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 695;
	                    this.match(n1qlParser.UNION);
	                    this.state = 696;
	                    this.select_term();
	                    break;

	                case 2:
	                    localctx = new Select_termsContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_select_terms);
	                    this.state = 697;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 698;
	                    this.match(n1qlParser.UNION);
	                    this.state = 699;
	                    this.match(n1qlParser.ALL);
	                    this.state = 700;
	                    this.select_term();
	                    break;

	                case 3:
	                    localctx = new Select_termsContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_select_terms);
	                    this.state = 701;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 702;
	                    this.match(n1qlParser.INTERSECT);
	                    this.state = 703;
	                    this.select_term();
	                    break;

	                case 4:
	                    localctx = new Select_termsContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_select_terms);
	                    this.state = 704;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 705;
	                    this.match(n1qlParser.INTERSECT);
	                    this.state = 706;
	                    this.match(n1qlParser.ALL);
	                    this.state = 707;
	                    this.select_term();
	                    break;

	                case 5:
	                    localctx = new Select_termsContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_select_terms);
	                    this.state = 708;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 709;
	                    this.match(n1qlParser.EXCEPT);
	                    this.state = 710;
	                    this.select_term();
	                    break;

	                case 6:
	                    localctx = new Select_termsContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_select_terms);
	                    this.state = 711;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 712;
	                    this.match(n1qlParser.EXCEPT);
	                    this.state = 713;
	                    this.match(n1qlParser.ALL);
	                    this.state = 714;
	                    this.select_term();
	                    break;

	                } 
	            }
	            this.state = 719;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	select_term() {
	    let localctx = new Select_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, n1qlParser.RULE_select_term);
	    try {
	        this.state = 722;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.FROM:
	        case n1qlParser.SELECT:
	        case n1qlParser.WITH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 720;
	            this.subselect();
	            break;
	        case n1qlParser.LPAREN:
	        case n1qlParser.CORRELATED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 721;
	            this.subquery_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subselect() {
	    let localctx = new SubselectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, n1qlParser.RULE_subselect);
	    try {
	        this.state = 726;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 724;
	            this.from_select();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 725;
	            this.select_from();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	from_select() {
	    let localctx = new From_selectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, n1qlParser.RULE_from_select);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 728;
	        this.opt_with();
	        this.state = 729;
	        this.from();
	        this.state = 730;
	        this.opt_let();
	        this.state = 731;
	        this.opt_where();
	        this.state = 732;
	        this.opt_group();
	        this.state = 733;
	        this.opt_window_clause();
	        this.state = 734;
	        this.select_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_from() {
	    let localctx = new Select_fromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, n1qlParser.RULE_select_from);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 736;
	        this.opt_with();
	        this.state = 737;
	        this.select_clause();
	        this.state = 738;
	        this.opt_from();
	        this.state = 739;
	        this.opt_let();
	        this.state = 740;
	        this.opt_where();
	        this.state = 741;
	        this.opt_group();
	        this.state = 742;
	        this.opt_window_clause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_clause() {
	    let localctx = new Select_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, n1qlParser.RULE_select_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 744;
	        this.match(n1qlParser.SELECT);
	        this.state = 745;
	        this.projection();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projection() {
	    let localctx = new ProjectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, n1qlParser.RULE_projection);
	    try {
	        this.state = 755;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 747;
	            this.opt_quantifier();
	            this.state = 748;
	            this.projects(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 750;
	            this.opt_quantifier();
	            this.state = 751;
	            this.raw();
	            this.state = 752;
	            this.expr(0);
	            this.state = 753;
	            this.opt_as_alias();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_quantifier() {
	    let localctx = new Opt_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, n1qlParser.RULE_opt_quantifier);
	    try {
	        this.state = 760;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.STR:
	        case n1qlParser.INT:
	        case n1qlParser.NUM:
	        case n1qlParser.MINUS:
	        case n1qlParser.STAR:
	        case n1qlParser.LPAREN:
	        case n1qlParser.LBRACE:
	        case n1qlParser.LBRACKET:
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.ANY:
	        case n1qlParser.ARRAY:
	        case n1qlParser.CASE:
	        case n1qlParser.CORRELATED:
	        case n1qlParser.COVER:
	        case n1qlParser.ELEMENT:
	        case n1qlParser.EVERY:
	        case n1qlParser.EXISTS:
	        case n1qlParser.FALSE:
	        case n1qlParser.FIRST:
	        case n1qlParser.MISSING:
	        case n1qlParser.NOT:
	        case n1qlParser.NTH_VALUE:
	        case n1qlParser.NULL:
	        case n1qlParser.OBJECT:
	        case n1qlParser.RAW:
	        case n1qlParser.REPLACE:
	        case n1qlParser.SELF:
	        case n1qlParser.SOME:
	        case n1qlParser.SYSTEM:
	        case n1qlParser.TRUE:
	        case n1qlParser.VALUE:
	        case n1qlParser.IDENT_ICASE:
	        case n1qlParser.IDENT:
	        case n1qlParser.NAMED_PARAM:
	        case n1qlParser.POSITIONAL_PARAM:
	        case n1qlParser.NEXT_PARAM:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.ALL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 758;
	            this.match(n1qlParser.ALL);
	            break;
	        case n1qlParser.DISTINCT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 759;
	            this.match(n1qlParser.DISTINCT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raw() {
	    let localctx = new RawContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, n1qlParser.RULE_raw);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.ELEMENT || _la===n1qlParser.RAW || _la===n1qlParser.VALUE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	projects(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ProjectsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 74;
	    this.enterRecursionRule(localctx, 74, n1qlParser.RULE_projects, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 765;
	        this.project();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 772;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ProjectsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_projects);
	                this.state = 767;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 768;
	                this.match(n1qlParser.COMMA);
	                this.state = 769;
	                this.project(); 
	            }
	            this.state = 774;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	project() {
	    let localctx = new ProjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, n1qlParser.RULE_project);
	    try {
	        this.state = 783;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 775;
	            this.match(n1qlParser.STAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 776;
	            this.expr(0);
	            this.state = 777;
	            this.match(n1qlParser.DOT);
	            this.state = 778;
	            this.match(n1qlParser.STAR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 780;
	            this.expr(0);
	            this.state = 781;
	            this.opt_as_alias();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_as_alias() {
	    let localctx = new Opt_as_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, n1qlParser.RULE_opt_as_alias);
	    try {
	        this.state = 787;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 786;
	            this.as_alias();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	as_alias() {
	    let localctx = new As_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, n1qlParser.RULE_as_alias);
	    try {
	        this.state = 792;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.IDENT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 789;
	            this.alias();
	            break;
	        case n1qlParser.AS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 790;
	            this.match(n1qlParser.AS);
	            this.state = 791;
	            this.alias();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alias() {
	    let localctx = new AliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, n1qlParser.RULE_alias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 794;
	        this.match(n1qlParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_from() {
	    let localctx = new Opt_fromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, n1qlParser.RULE_opt_from);
	    try {
	        this.state = 798;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 797;
	            this.from();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	from() {
	    let localctx = new FromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, n1qlParser.RULE_from);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 800;
	        this.match(n1qlParser.FROM);
	        this.state = 801;
	        this.from_term(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	from_term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new From_termContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 88;
	    this.enterRecursionRule(localctx, 88, n1qlParser.RULE_from_term, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 813;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 804;
	            this.simple_from_term();
	            break;

	        case 2:
	            this.state = 805;
	            this.simple_from_term();
	            this.state = 806;
	            this.match(n1qlParser.RIGHT);
	            this.state = 807;
	            this.opt_outer();
	            this.state = 808;
	            this.match(n1qlParser.JOIN);
	            this.state = 809;
	            this.simple_from_term();
	            this.state = 810;
	            this.match(n1qlParser.ON);
	            this.state = 811;
	            this.expr(0);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 865;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 863;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new From_termContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_from_term);
	                    this.state = 815;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 816;
	                    this.opt_join_type();
	                    this.state = 817;
	                    this.match(n1qlParser.JOIN);
	                    this.state = 818;
	                    this.simple_from_term();
	                    this.state = 819;
	                    this.on_keys();
	                    break;

	                case 2:
	                    localctx = new From_termContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_from_term);
	                    this.state = 821;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 822;
	                    this.opt_join_type();
	                    this.state = 823;
	                    this.match(n1qlParser.JOIN);
	                    this.state = 824;
	                    this.simple_from_term();
	                    this.state = 825;
	                    this.on_key();
	                    this.state = 826;
	                    this.match(n1qlParser.FOR);
	                    this.state = 827;
	                    this.match(n1qlParser.IDENT);
	                    break;

	                case 3:
	                    localctx = new From_termContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_from_term);
	                    this.state = 829;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 830;
	                    this.opt_join_type();
	                    this.state = 831;
	                    this.match(n1qlParser.NEST);
	                    this.state = 832;
	                    this.simple_from_term();
	                    this.state = 833;
	                    this.on_keys();
	                    break;

	                case 4:
	                    localctx = new From_termContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_from_term);
	                    this.state = 835;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 836;
	                    this.opt_join_type();
	                    this.state = 837;
	                    this.match(n1qlParser.NEST);
	                    this.state = 838;
	                    this.simple_from_term();
	                    this.state = 839;
	                    this.on_key();
	                    this.state = 840;
	                    this.match(n1qlParser.FOR);
	                    this.state = 841;
	                    this.match(n1qlParser.IDENT);
	                    break;

	                case 5:
	                    localctx = new From_termContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_from_term);
	                    this.state = 843;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 844;
	                    this.opt_join_type();
	                    this.state = 845;
	                    this.unnest();
	                    this.state = 846;
	                    this.expr(0);
	                    this.state = 847;
	                    this.opt_as_alias();
	                    break;

	                case 6:
	                    localctx = new From_termContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_from_term);
	                    this.state = 849;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 850;
	                    this.opt_join_type();
	                    this.state = 851;
	                    this.match(n1qlParser.JOIN);
	                    this.state = 852;
	                    this.simple_from_term();
	                    this.state = 853;
	                    this.match(n1qlParser.ON);
	                    this.state = 854;
	                    this.expr(0);
	                    break;

	                case 7:
	                    localctx = new From_termContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_from_term);
	                    this.state = 856;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 857;
	                    this.opt_join_type();
	                    this.state = 858;
	                    this.match(n1qlParser.NEST);
	                    this.state = 859;
	                    this.simple_from_term();
	                    this.state = 860;
	                    this.match(n1qlParser.ON);
	                    this.state = 861;
	                    this.expr(0);
	                    break;

	                } 
	            }
	            this.state = 867;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	simple_from_term() {
	    let localctx = new Simple_from_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, n1qlParser.RULE_simple_from_term);
	    try {
	        this.state = 873;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 868;
	            this.keyspace_term();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 869;
	            this.expr(0);
	            this.state = 870;
	            this.opt_as_alias();
	            this.state = 871;
	            this.opt_use();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unnest() {
	    let localctx = new UnnestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, n1qlParser.RULE_unnest);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 875;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.FLATTEN || _la===n1qlParser.UNNEST)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyspace_term() {
	    let localctx = new Keyspace_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, n1qlParser.RULE_keyspace_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877;
	        this.keyspace_path();
	        this.state = 878;
	        this.opt_as_alias();
	        this.state = 879;
	        this.opt_use();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyspace_path() {
	    let localctx = new Keyspace_pathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, n1qlParser.RULE_keyspace_path);
	    try {
	        this.state = 891;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 881;
	            this.namespace_term();
	            this.state = 882;
	            this.keyspace_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 884;
	            this.namespace_term();
	            this.state = 885;
	            this.bucket_name();
	            this.state = 886;
	            this.match(n1qlParser.DOT);
	            this.state = 887;
	            this.scope_name();
	            this.state = 888;
	            this.match(n1qlParser.DOT);
	            this.state = 889;
	            this.keyspace_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_term() {
	    let localctx = new Namespace_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, n1qlParser.RULE_namespace_term);
	    try {
	        this.state = 896;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.NAMESPACE_ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 893;
	            this.namespace_name();
	            break;
	        case n1qlParser.SYSTEM:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 894;
	            this.match(n1qlParser.SYSTEM);
	            this.state = 895;
	            this.match(n1qlParser.COLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_name() {
	    let localctx = new Namespace_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, n1qlParser.RULE_namespace_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 898;
	        this.match(n1qlParser.NAMESPACE_ID);
	        this.state = 899;
	        this.match(n1qlParser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bucket_name() {
	    let localctx = new Bucket_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, n1qlParser.RULE_bucket_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 901;
	        this.match(n1qlParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scope_name() {
	    let localctx = new Scope_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, n1qlParser.RULE_scope_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.match(n1qlParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyspace_name() {
	    let localctx = new Keyspace_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, n1qlParser.RULE_keyspace_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 905;
	        this.match(n1qlParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_use() {
	    let localctx = new Opt_useContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, n1qlParser.RULE_opt_use);
	    try {
	        this.state = 910;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 908;
	            this.match(n1qlParser.USE);
	            this.state = 909;
	            this.use_options();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_options() {
	    let localctx = new Use_optionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, n1qlParser.RULE_use_options);
	    try {
	        this.state = 927;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 912;
	            this.use_keys();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 913;
	            this.use_index();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 914;
	            this.join_hint();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 915;
	            this.use_index();
	            this.state = 916;
	            this.join_hint();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 918;
	            this.join_hint();
	            this.state = 919;
	            this.use_index();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 921;
	            this.use_keys();
	            this.state = 922;
	            this.join_hint();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 924;
	            this.join_hint();
	            this.state = 925;
	            this.use_keys();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_keys() {
	    let localctx = new Use_keysContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, n1qlParser.RULE_use_keys);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 929;
	        this.opt_primary();
	        this.state = 930;
	        this.match(n1qlParser.KEYS);
	        this.state = 931;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_index() {
	    let localctx = new Use_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, n1qlParser.RULE_use_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 933;
	        this.match(n1qlParser.INDEX);
	        this.state = 934;
	        this.match(n1qlParser.LPAREN);
	        this.state = 935;
	        this.index_refs(0);
	        this.state = 936;
	        this.match(n1qlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	join_hint() {
	    let localctx = new Join_hintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, n1qlParser.RULE_join_hint);
	    try {
	        this.state = 944;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.HASH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 938;
	            this.match(n1qlParser.HASH);
	            this.state = 939;
	            this.match(n1qlParser.LPAREN);
	            this.state = 940;
	            this.use_hash_option();
	            this.state = 941;
	            this.match(n1qlParser.RPAREN);
	            break;
	        case n1qlParser.NL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 943;
	            this.match(n1qlParser.NL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_primary() {
	    let localctx = new Opt_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, n1qlParser.RULE_opt_primary);
	    try {
	        this.state = 948;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.KEY:
	        case n1qlParser.KEYS:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.PRIMARY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 947;
	            this.match(n1qlParser.PRIMARY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	index_refs(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Index_refsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 120;
	    this.enterRecursionRule(localctx, 120, n1qlParser.RULE_index_refs, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 951;
	        this.index_ref();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 958;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Index_refsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_index_refs);
	                this.state = 953;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 954;
	                this.match(n1qlParser.COMMA);
	                this.state = 955;
	                this.index_ref(); 
	            }
	            this.state = 960;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	index_ref() {
	    let localctx = new Index_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, n1qlParser.RULE_index_ref);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 961;
	        this.opt_index_name();
	        this.state = 962;
	        this.opt_index_using();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	use_hash_option() {
	    let localctx = new Use_hash_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, n1qlParser.RULE_use_hash_option);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 964;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.BUILD || _la===n1qlParser.PROBE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_use_del_upd() {
	    let localctx = new Opt_use_del_updContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, n1qlParser.RULE_opt_use_del_upd);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 966;
	        this.opt_use();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_join_type() {
	    let localctx = new Opt_join_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, n1qlParser.RULE_opt_join_type);
	    try {
	        this.state = 972;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.FLATTEN:
	        case n1qlParser.JOIN:
	        case n1qlParser.NEST:
	        case n1qlParser.UNNEST:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.INNER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 969;
	            this.match(n1qlParser.INNER);
	            break;
	        case n1qlParser.LEFT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 970;
	            this.match(n1qlParser.LEFT);
	            this.state = 971;
	            this.opt_outer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_outer() {
	    let localctx = new Opt_outerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, n1qlParser.RULE_opt_outer);
	    try {
	        this.state = 976;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.FLATTEN:
	        case n1qlParser.JOIN:
	        case n1qlParser.NEST:
	        case n1qlParser.UNNEST:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.OUTER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 975;
	            this.match(n1qlParser.OUTER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	on_keys() {
	    let localctx = new On_keysContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, n1qlParser.RULE_on_keys);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 978;
	        this.match(n1qlParser.ON);
	        this.state = 979;
	        this.opt_primary();
	        this.state = 980;
	        this.match(n1qlParser.KEYS);
	        this.state = 981;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	on_key() {
	    let localctx = new On_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, n1qlParser.RULE_on_key);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 983;
	        this.match(n1qlParser.ON);
	        this.state = 984;
	        this.opt_primary();
	        this.state = 985;
	        this.match(n1qlParser.KEY);
	        this.state = 986;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_let() {
	    let localctx = new Opt_letContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, n1qlParser.RULE_opt_let);
	    try {
	        this.state = 990;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 989;
	            this.let_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	let_() {
	    let localctx = new Let_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, n1qlParser.RULE_let_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 992;
	        this.match(n1qlParser.LET_);
	        this.state = 993;
	        this.bindings(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	bindings(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BindingsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 140;
	    this.enterRecursionRule(localctx, 140, n1qlParser.RULE_bindings, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 996;
	        this.binding();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1003;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new BindingsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_bindings);
	                this.state = 998;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 999;
	                this.match(n1qlParser.COMMA);
	                this.state = 1000;
	                this.binding(); 
	            }
	            this.state = 1005;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	binding() {
	    let localctx = new BindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, n1qlParser.RULE_binding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1006;
	        this.alias();
	        this.state = 1007;
	        this.match(n1qlParser.EQ);
	        this.state = 1008;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_with() {
	    let localctx = new Opt_withContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, n1qlParser.RULE_opt_with);
	    try {
	        this.state = 1013;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.FROM:
	        case n1qlParser.SELECT:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.WITH:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1011;
	            this.match(n1qlParser.WITH);
	            this.state = 1012;
	            this.with_list(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	with_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new With_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 146;
	    this.enterRecursionRule(localctx, 146, n1qlParser.RULE_with_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1016;
	        this.with_term();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1023;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new With_listContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_with_list);
	                this.state = 1018;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1019;
	                this.match(n1qlParser.COMMA);
	                this.state = 1020;
	                this.with_term(); 
	            }
	            this.state = 1025;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	with_term() {
	    let localctx = new With_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, n1qlParser.RULE_with_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1026;
	        this.alias();
	        this.state = 1027;
	        this.match(n1qlParser.AS);
	        this.state = 1028;
	        this.paren_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_where() {
	    let localctx = new Opt_whereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, n1qlParser.RULE_opt_where);
	    try {
	        this.state = 1032;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1031;
	            this.where();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where() {
	    let localctx = new WhereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, n1qlParser.RULE_where);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1034;
	        this.match(n1qlParser.WHERE);
	        this.state = 1035;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_group() {
	    let localctx = new Opt_groupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, n1qlParser.RULE_opt_group);
	    try {
	        this.state = 1039;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1038;
	            this.group();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group() {
	    let localctx = new GroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, n1qlParser.RULE_group);
	    try {
	        this.state = 1048;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.GROUP:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1041;
	            this.match(n1qlParser.GROUP);
	            this.state = 1042;
	            this.match(n1qlParser.BY);
	            this.state = 1043;
	            this.group_terms(0);
	            this.state = 1044;
	            this.opt_letting();
	            this.state = 1045;
	            this.opt_having();
	            break;
	        case n1qlParser.LETTING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1047;
	            this.letting();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	group_terms(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Group_termsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 158;
	    this.enterRecursionRule(localctx, 158, n1qlParser.RULE_group_terms, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1051;
	        this.group_term();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1058;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Group_termsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_group_terms);
	                this.state = 1053;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1054;
	                this.match(n1qlParser.COMMA);
	                this.state = 1055;
	                this.group_term(); 
	            }
	            this.state = 1060;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	group_term() {
	    let localctx = new Group_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, n1qlParser.RULE_group_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1061;
	        this.expr(0);
	        this.state = 1062;
	        this.opt_as_alias();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_letting() {
	    let localctx = new Opt_lettingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, n1qlParser.RULE_opt_letting);
	    try {
	        this.state = 1066;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1065;
	            this.letting();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letting() {
	    let localctx = new LettingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, n1qlParser.RULE_letting);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1068;
	        this.match(n1qlParser.LETTING);
	        this.state = 1069;
	        this.bindings(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_having() {
	    let localctx = new Opt_havingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, n1qlParser.RULE_opt_having);
	    try {
	        this.state = 1073;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1072;
	            this.having();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	having() {
	    let localctx = new HavingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, n1qlParser.RULE_having);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1075;
	        this.match(n1qlParser.HAVING);
	        this.state = 1076;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_order_by() {
	    let localctx = new Opt_order_byContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, n1qlParser.RULE_opt_order_by);
	    try {
	        this.state = 1080;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1079;
	            this.order_by();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	order_by() {
	    let localctx = new Order_byContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, n1qlParser.RULE_order_by);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1082;
	        this.match(n1qlParser.ORDER);
	        this.state = 1083;
	        this.match(n1qlParser.BY);
	        this.state = 1084;
	        this.sort_terms(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	sort_terms(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Sort_termsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 174;
	    this.enterRecursionRule(localctx, 174, n1qlParser.RULE_sort_terms, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1087;
	        this.sort_term();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1094;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Sort_termsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_sort_terms);
	                this.state = 1089;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1090;
	                this.match(n1qlParser.COMMA);
	                this.state = 1091;
	                this.sort_term(); 
	            }
	            this.state = 1096;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	sort_term() {
	    let localctx = new Sort_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, n1qlParser.RULE_sort_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1097;
	        this.expr(0);
	        this.state = 1098;
	        this.opt_dir();
	        this.state = 1099;
	        this.opt_order_nulls();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_dir() {
	    let localctx = new Opt_dirContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, n1qlParser.RULE_opt_dir);
	    try {
	        this.state = 1103;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1102;
	            this.dir();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dir() {
	    let localctx = new DirContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, n1qlParser.RULE_dir);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1105;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.ASC || _la===n1qlParser.DESC)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_order_nulls() {
	    let localctx = new Opt_order_nullsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, n1qlParser.RULE_opt_order_nulls);
	    try {
	        this.state = 1111;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1108;
	            this.nulls();
	            this.state = 1109;
	            this.first_last();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	first_last() {
	    let localctx = new First_lastContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, n1qlParser.RULE_first_last);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1113;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.FIRST || _la===n1qlParser.LAST)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nulls() {
	    let localctx = new NullsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, n1qlParser.RULE_nulls);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1115;
	        this.match(n1qlParser.NULLS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_limit() {
	    let localctx = new Opt_limitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, n1qlParser.RULE_opt_limit);
	    try {
	        this.state = 1119;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1118;
	            this.limit();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limit() {
	    let localctx = new LimitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, n1qlParser.RULE_limit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1121;
	        this.match(n1qlParser.LIMIT);
	        this.state = 1122;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_offset() {
	    let localctx = new Opt_offsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, n1qlParser.RULE_opt_offset);
	    try {
	        this.state = 1126;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1125;
	            this.offset();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offset() {
	    let localctx = new OffsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, n1qlParser.RULE_offset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1128;
	        this.match(n1qlParser.OFFSET);
	        this.state = 1129;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insert() {
	    let localctx = new InsertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, n1qlParser.RULE_insert);
	    try {
	        this.state = 1147;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1131;
	            this.match(n1qlParser.INSERT);
	            this.state = 1132;
	            this.match(n1qlParser.INTO);
	            this.state = 1133;
	            this.keyspace_ref();
	            this.state = 1134;
	            this.opt_values_header();
	            this.state = 1135;
	            this.values_list(0);
	            this.state = 1136;
	            this.opt_returning();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1138;
	            this.match(n1qlParser.INSERT);
	            this.state = 1139;
	            this.match(n1qlParser.INTO);
	            this.state = 1140;
	            this.keyspace_ref();
	            this.state = 1141;
	            this.match(n1qlParser.LPAREN);
	            this.state = 1142;
	            this.key_val_options_expr_header();
	            this.state = 1143;
	            this.match(n1qlParser.RPAREN);
	            this.state = 1144;
	            this.fullselect();
	            this.state = 1145;
	            this.opt_returning();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_keyspace_ref() {
	    let localctx = new Simple_keyspace_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, n1qlParser.RULE_simple_keyspace_ref);
	    try {
	        this.state = 1162;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1149;
	            this.keyspace_name();
	            this.state = 1150;
	            this.opt_as_alias();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1152;
	            this.keyspace_path();
	            this.state = 1153;
	            this.opt_as_alias();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1155;
	            this.bucket_name();
	            this.state = 1156;
	            this.match(n1qlParser.DOT);
	            this.state = 1157;
	            this.scope_name();
	            this.state = 1158;
	            this.match(n1qlParser.DOT);
	            this.state = 1159;
	            this.keyspace_name();
	            this.state = 1160;
	            this.opt_as_alias();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyspace_ref() {
	    let localctx = new Keyspace_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, n1qlParser.RULE_keyspace_ref);
	    try {
	        this.state = 1168;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.SYSTEM:
	        case n1qlParser.IDENT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1164;
	            this.simple_keyspace_ref();
	            break;
	        case n1qlParser.NAMED_PARAM:
	        case n1qlParser.POSITIONAL_PARAM:
	        case n1qlParser.NEXT_PARAM:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1165;
	            this.param_expr();
	            this.state = 1166;
	            this.opt_as_alias();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_values_header() {
	    let localctx = new Opt_values_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, n1qlParser.RULE_opt_values_header);
	    try {
	        this.state = 1187;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1171;
	            this.match(n1qlParser.LPAREN);
	            this.state = 1172;
	            this.opt_primary();
	            this.state = 1173;
	            this.match(n1qlParser.KEY);
	            this.state = 1174;
	            this.match(n1qlParser.COMMA);
	            this.state = 1175;
	            this.match(n1qlParser.VALUE);
	            this.state = 1176;
	            this.match(n1qlParser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1178;
	            this.match(n1qlParser.LPAREN);
	            this.state = 1179;
	            this.opt_primary();
	            this.state = 1180;
	            this.match(n1qlParser.KEY);
	            this.state = 1181;
	            this.match(n1qlParser.COMMA);
	            this.state = 1182;
	            this.match(n1qlParser.VALUE);
	            this.state = 1183;
	            this.match(n1qlParser.COMMA);
	            this.state = 1184;
	            this.match(n1qlParser.OPTIONS);
	            this.state = 1185;
	            this.match(n1qlParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key() {
	    let localctx = new KeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, n1qlParser.RULE_key);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1189;
	        this.opt_primary();
	        this.state = 1190;
	        this.match(n1qlParser.KEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	values_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Values_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 206;
	    this.enterRecursionRule(localctx, 206, n1qlParser.RULE_values_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1193;
	        this.values();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1200;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Values_listContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_values_list);
	                this.state = 1195;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1196;
	                this.match(n1qlParser.COMMA);
	                this.state = 1197;
	                this.next_values(); 
	            }
	            this.state = 1202;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	values() {
	    let localctx = new ValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, n1qlParser.RULE_values);
	    try {
	        this.state = 1207;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1203;
	            this.match(n1qlParser.VALUES);
	            this.state = 1204;
	            this.key_val_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1205;
	            this.match(n1qlParser.VALUES);
	            this.state = 1206;
	            this.key_val_options_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	next_values() {
	    let localctx = new Next_valuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, n1qlParser.RULE_next_values);
	    try {
	        this.state = 1212;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1209;
	            this.values();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1210;
	            this.key_val_expr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1211;
	            this.key_val_options_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_val_expr() {
	    let localctx = new Key_val_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, n1qlParser.RULE_key_val_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1214;
	        this.match(n1qlParser.LPAREN);
	        this.state = 1215;
	        this.expr(0);
	        this.state = 1216;
	        this.match(n1qlParser.COMMA);
	        this.state = 1217;
	        this.expr(0);
	        this.state = 1218;
	        this.match(n1qlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_val_options_expr() {
	    let localctx = new Key_val_options_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, n1qlParser.RULE_key_val_options_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1220;
	        this.match(n1qlParser.LPAREN);
	        this.state = 1221;
	        this.expr(0);
	        this.state = 1222;
	        this.match(n1qlParser.COMMA);
	        this.state = 1223;
	        this.expr(0);
	        this.state = 1224;
	        this.match(n1qlParser.COMMA);
	        this.state = 1225;
	        this.expr(0);
	        this.state = 1226;
	        this.match(n1qlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_returning() {
	    let localctx = new Opt_returningContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, n1qlParser.RULE_opt_returning);
	    try {
	        this.state = 1230;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1229;
	            this.returning();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returning() {
	    let localctx = new ReturningContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, n1qlParser.RULE_returning);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1232;
	        this.match(n1qlParser.RETURNING);
	        this.state = 1233;
	        this.returns_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returns_() {
	    let localctx = new Returns_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, n1qlParser.RULE_returns_);
	    try {
	        this.state = 1239;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.STR:
	        case n1qlParser.INT:
	        case n1qlParser.NUM:
	        case n1qlParser.MINUS:
	        case n1qlParser.STAR:
	        case n1qlParser.LPAREN:
	        case n1qlParser.LBRACE:
	        case n1qlParser.LBRACKET:
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.ANY:
	        case n1qlParser.ARRAY:
	        case n1qlParser.CASE:
	        case n1qlParser.CORRELATED:
	        case n1qlParser.COVER:
	        case n1qlParser.EVERY:
	        case n1qlParser.EXISTS:
	        case n1qlParser.FALSE:
	        case n1qlParser.FIRST:
	        case n1qlParser.MISSING:
	        case n1qlParser.NOT:
	        case n1qlParser.NTH_VALUE:
	        case n1qlParser.NULL:
	        case n1qlParser.OBJECT:
	        case n1qlParser.REPLACE:
	        case n1qlParser.SELF:
	        case n1qlParser.SOME:
	        case n1qlParser.SYSTEM:
	        case n1qlParser.TRUE:
	        case n1qlParser.IDENT_ICASE:
	        case n1qlParser.IDENT:
	        case n1qlParser.NAMED_PARAM:
	        case n1qlParser.POSITIONAL_PARAM:
	        case n1qlParser.NEXT_PARAM:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1235;
	            this.projects(0);
	            break;
	        case n1qlParser.ELEMENT:
	        case n1qlParser.RAW:
	        case n1qlParser.VALUE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1236;
	            this.raw();
	            this.state = 1237;
	            this.expr(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_expr_header() {
	    let localctx = new Key_expr_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, n1qlParser.RULE_key_expr_header);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1241;
	        this.key();
	        this.state = 1242;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_expr_header() {
	    let localctx = new Value_expr_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, n1qlParser.RULE_value_expr_header);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1244;
	        this.match(n1qlParser.VALUE);
	        this.state = 1245;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	options_expr_header() {
	    let localctx = new Options_expr_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, n1qlParser.RULE_options_expr_header);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1247;
	        this.match(n1qlParser.OPTIONS);
	        this.state = 1248;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_val_options_expr_header() {
	    let localctx = new Key_val_options_expr_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, n1qlParser.RULE_key_val_options_expr_header);
	    try {
	        this.state = 1265;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1250;
	            this.key_expr_header();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1251;
	            this.key_expr_header();
	            this.state = 1252;
	            this.match(n1qlParser.COMMA);
	            this.state = 1253;
	            this.value_expr_header();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1255;
	            this.key_expr_header();
	            this.state = 1256;
	            this.match(n1qlParser.COMMA);
	            this.state = 1257;
	            this.value_expr_header();
	            this.state = 1258;
	            this.match(n1qlParser.COMMA);
	            this.state = 1259;
	            this.options_expr_header();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1261;
	            this.key_expr_header();
	            this.state = 1262;
	            this.match(n1qlParser.COMMA);
	            this.state = 1263;
	            this.options_expr_header();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	upsert() {
	    let localctx = new UpsertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, n1qlParser.RULE_upsert);
	    try {
	        this.state = 1283;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1267;
	            this.match(n1qlParser.UPSERT);
	            this.state = 1268;
	            this.match(n1qlParser.INTO);
	            this.state = 1269;
	            this.keyspace_ref();
	            this.state = 1270;
	            this.opt_values_header();
	            this.state = 1271;
	            this.values_list(0);
	            this.state = 1272;
	            this.opt_returning();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1274;
	            this.match(n1qlParser.UPSERT);
	            this.state = 1275;
	            this.match(n1qlParser.INTO);
	            this.state = 1276;
	            this.keyspace_ref();
	            this.state = 1277;
	            this.match(n1qlParser.LPAREN);
	            this.state = 1278;
	            this.key_val_options_expr_header();
	            this.state = 1279;
	            this.match(n1qlParser.RPAREN);
	            this.state = 1280;
	            this.fullselect();
	            this.state = 1281;
	            this.opt_returning();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delete_() {
	    let localctx = new Delete_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, n1qlParser.RULE_delete_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1285;
	        this.match(n1qlParser.DELETE_);
	        this.state = 1286;
	        this.match(n1qlParser.FROM);
	        this.state = 1287;
	        this.keyspace_ref();
	        this.state = 1288;
	        this.opt_use_del_upd();
	        this.state = 1289;
	        this.opt_where();
	        this.state = 1290;
	        this.opt_limit();
	        this.state = 1291;
	        this.opt_returning();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update() {
	    let localctx = new UpdateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, n1qlParser.RULE_update);
	    try {
	        this.state = 1318;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1293;
	            this.match(n1qlParser.UPDATE);
	            this.state = 1294;
	            this.keyspace_ref();
	            this.state = 1295;
	            this.opt_use_del_upd();
	            this.state = 1296;
	            this.set();
	            this.state = 1297;
	            this.unset();
	            this.state = 1298;
	            this.opt_where();
	            this.state = 1299;
	            this.opt_limit();
	            this.state = 1300;
	            this.opt_returning();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1302;
	            this.match(n1qlParser.UPDATE);
	            this.state = 1303;
	            this.keyspace_ref();
	            this.state = 1304;
	            this.opt_use_del_upd();
	            this.state = 1305;
	            this.set();
	            this.state = 1306;
	            this.opt_where();
	            this.state = 1307;
	            this.opt_limit();
	            this.state = 1308;
	            this.opt_returning();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1310;
	            this.match(n1qlParser.UPDATE);
	            this.state = 1311;
	            this.keyspace_ref();
	            this.state = 1312;
	            this.opt_use_del_upd();
	            this.state = 1313;
	            this.unset();
	            this.state = 1314;
	            this.opt_where();
	            this.state = 1315;
	            this.opt_limit();
	            this.state = 1316;
	            this.opt_returning();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set() {
	    let localctx = new SetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, n1qlParser.RULE_set);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1320;
	        this.match(n1qlParser.SET);
	        this.state = 1321;
	        this.set_terms(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	set_terms(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Set_termsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 238;
	    this.enterRecursionRule(localctx, 238, n1qlParser.RULE_set_terms, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1324;
	        this.set_term();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1331;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Set_termsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_set_terms);
	                this.state = 1326;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1327;
	                this.match(n1qlParser.COMMA);
	                this.state = 1328;
	                this.set_term(); 
	            }
	            this.state = 1333;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	set_term() {
	    let localctx = new Set_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, n1qlParser.RULE_set_term);
	    try {
	        this.state = 1345;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1334;
	            this.path(0);
	            this.state = 1335;
	            this.match(n1qlParser.EQ);
	            this.state = 1336;
	            this.expr(0);
	            this.state = 1337;
	            this.opt_update_for();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1339;
	            this.function_meta_expr();
	            this.state = 1340;
	            this.match(n1qlParser.DOT);
	            this.state = 1341;
	            this.path(0);
	            this.state = 1342;
	            this.match(n1qlParser.EQ);
	            this.state = 1343;
	            this.expr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_meta_expr() {
	    let localctx = new Function_meta_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, n1qlParser.RULE_function_meta_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1347;
	        this.function_name();
	        this.state = 1348;
	        this.match(n1qlParser.LPAREN);
	        this.state = 1349;
	        this.opt_exprs();
	        this.state = 1350;
	        this.match(n1qlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_update_for() {
	    let localctx = new Opt_update_forContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, n1qlParser.RULE_opt_update_for);
	    try {
	        this.state = 1354;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1353;
	            this.update_for();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_for() {
	    let localctx = new Update_forContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, n1qlParser.RULE_update_for);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1356;
	        this.update_dimensions(0);
	        this.state = 1357;
	        this.opt_when();
	        this.state = 1358;
	        this.match(n1qlParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	update_dimensions(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Update_dimensionsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 248;
	    this.enterRecursionRule(localctx, 248, n1qlParser.RULE_update_dimensions, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1361;
	        this.match(n1qlParser.FOR);
	        this.state = 1362;
	        this.update_dimension(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1369;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Update_dimensionsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_update_dimensions);
	                this.state = 1364;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1365;
	                this.match(n1qlParser.FOR);
	                this.state = 1366;
	                this.update_dimension(0); 
	            }
	            this.state = 1371;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	update_dimension(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Update_dimensionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 250;
	    this.enterRecursionRule(localctx, 250, n1qlParser.RULE_update_dimension, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1373;
	        this.update_binding();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1380;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Update_dimensionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_update_dimension);
	                this.state = 1375;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1376;
	                this.match(n1qlParser.COMMA);
	                this.state = 1377;
	                this.update_binding(); 
	            }
	            this.state = 1382;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	update_binding() {
	    let localctx = new Update_bindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, n1qlParser.RULE_update_binding);
	    try {
	        this.state = 1403;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1383;
	            this.variable();
	            this.state = 1384;
	            this.match(n1qlParser.IN);
	            this.state = 1385;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1387;
	            this.variable();
	            this.state = 1388;
	            this.match(n1qlParser.WITHIN);
	            this.state = 1389;
	            this.expr(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1391;
	            this.variable();
	            this.state = 1392;
	            this.match(n1qlParser.COLON);
	            this.state = 1393;
	            this.variable();
	            this.state = 1394;
	            this.match(n1qlParser.IN);
	            this.state = 1395;
	            this.expr(0);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1397;
	            this.variable();
	            this.state = 1398;
	            this.match(n1qlParser.COLON);
	            this.state = 1399;
	            this.variable();
	            this.state = 1400;
	            this.match(n1qlParser.WITHIN);
	            this.state = 1401;
	            this.expr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable() {
	    let localctx = new VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, n1qlParser.RULE_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1405;
	        this.match(n1qlParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_when() {
	    let localctx = new Opt_whenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, n1qlParser.RULE_opt_when);
	    try {
	        this.state = 1410;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.END:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.WHEN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1408;
	            this.match(n1qlParser.WHEN);
	            this.state = 1409;
	            this.expr(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unset() {
	    let localctx = new UnsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, n1qlParser.RULE_unset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1412;
	        this.match(n1qlParser.UNSET);
	        this.state = 1413;
	        this.unset_terms(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	unset_terms(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Unset_termsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 260;
	    this.enterRecursionRule(localctx, 260, n1qlParser.RULE_unset_terms, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1416;
	        this.unset_term();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1423;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Unset_termsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_unset_terms);
	                this.state = 1418;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1419;
	                this.match(n1qlParser.COMMA);
	                this.state = 1420;
	                this.unset_term(); 
	            }
	            this.state = 1425;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	unset_term() {
	    let localctx = new Unset_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, n1qlParser.RULE_unset_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1426;
	        this.path(0);
	        this.state = 1427;
	        this.opt_update_for();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge() {
	    let localctx = new MergeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, n1qlParser.RULE_merge);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1429;
	        this.match(n1qlParser.MERGE);
	        this.state = 1430;
	        this.match(n1qlParser.INTO);
	        this.state = 1431;
	        this.simple_keyspace_ref();
	        this.state = 1432;
	        this.opt_use_merge();
	        this.state = 1433;
	        this.match(n1qlParser.USING);
	        this.state = 1434;
	        this.simple_from_term();
	        this.state = 1435;
	        this.match(n1qlParser.ON);
	        this.state = 1436;
	        this.opt_key();
	        this.state = 1437;
	        this.expr(0);
	        this.state = 1438;
	        this.merge_actions();
	        this.state = 1439;
	        this.opt_limit();
	        this.state = 1440;
	        this.opt_returning();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_use_merge() {
	    let localctx = new Opt_use_mergeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, n1qlParser.RULE_opt_use_merge);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1442;
	        this.opt_use();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_key() {
	    let localctx = new Opt_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, n1qlParser.RULE_opt_key);
	    try {
	        this.state = 1446;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.STR:
	        case n1qlParser.INT:
	        case n1qlParser.NUM:
	        case n1qlParser.MINUS:
	        case n1qlParser.LPAREN:
	        case n1qlParser.LBRACE:
	        case n1qlParser.LBRACKET:
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.ANY:
	        case n1qlParser.ARRAY:
	        case n1qlParser.CASE:
	        case n1qlParser.CORRELATED:
	        case n1qlParser.COVER:
	        case n1qlParser.EVERY:
	        case n1qlParser.EXISTS:
	        case n1qlParser.FALSE:
	        case n1qlParser.FIRST:
	        case n1qlParser.MISSING:
	        case n1qlParser.NOT:
	        case n1qlParser.NTH_VALUE:
	        case n1qlParser.NULL:
	        case n1qlParser.OBJECT:
	        case n1qlParser.REPLACE:
	        case n1qlParser.SELF:
	        case n1qlParser.SOME:
	        case n1qlParser.SYSTEM:
	        case n1qlParser.TRUE:
	        case n1qlParser.IDENT_ICASE:
	        case n1qlParser.IDENT:
	        case n1qlParser.NAMED_PARAM:
	        case n1qlParser.POSITIONAL_PARAM:
	        case n1qlParser.NEXT_PARAM:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.KEY:
	        case n1qlParser.PRIMARY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1445;
	            this.key();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge_actions() {
	    let localctx = new Merge_actionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, n1qlParser.RULE_merge_actions);
	    try {
	        this.state = 1469;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1449;
	            this.match(n1qlParser.WHEN);
	            this.state = 1450;
	            this.match(n1qlParser.MATCHED);
	            this.state = 1451;
	            this.match(n1qlParser.THEN);
	            this.state = 1452;
	            this.match(n1qlParser.UPDATE);
	            this.state = 1453;
	            this.merge_update();
	            this.state = 1454;
	            this.opt_merge_delete_insert();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1456;
	            this.match(n1qlParser.WHEN);
	            this.state = 1457;
	            this.match(n1qlParser.MATCHED);
	            this.state = 1458;
	            this.match(n1qlParser.THEN);
	            this.state = 1459;
	            this.match(n1qlParser.DELETE_);
	            this.state = 1460;
	            this.merge_delete();
	            this.state = 1461;
	            this.opt_merge_insert();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1463;
	            this.match(n1qlParser.WHEN);
	            this.state = 1464;
	            this.match(n1qlParser.NOT);
	            this.state = 1465;
	            this.match(n1qlParser.MATCHED);
	            this.state = 1466;
	            this.match(n1qlParser.THEN);
	            this.state = 1467;
	            this.match(n1qlParser.INSERT);
	            this.state = 1468;
	            this.merge_insert();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_merge_delete_insert() {
	    let localctx = new Opt_merge_delete_insertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, n1qlParser.RULE_opt_merge_delete_insert);
	    try {
	        this.state = 1485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1472;
	            this.match(n1qlParser.WHEN);
	            this.state = 1473;
	            this.match(n1qlParser.MATCHED);
	            this.state = 1474;
	            this.match(n1qlParser.THEN);
	            this.state = 1475;
	            this.match(n1qlParser.DELETE_);
	            this.state = 1476;
	            this.merge_delete();
	            this.state = 1477;
	            this.opt_merge_insert();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1479;
	            this.match(n1qlParser.WHEN);
	            this.state = 1480;
	            this.match(n1qlParser.NOT);
	            this.state = 1481;
	            this.match(n1qlParser.MATCHED);
	            this.state = 1482;
	            this.match(n1qlParser.THEN);
	            this.state = 1483;
	            this.match(n1qlParser.INSERT);
	            this.state = 1484;
	            this.merge_insert();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_merge_insert() {
	    let localctx = new Opt_merge_insertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, n1qlParser.RULE_opt_merge_insert);
	    try {
	        this.state = 1494;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1488;
	            this.match(n1qlParser.WHEN);
	            this.state = 1489;
	            this.match(n1qlParser.NOT);
	            this.state = 1490;
	            this.match(n1qlParser.MATCHED);
	            this.state = 1491;
	            this.match(n1qlParser.THEN);
	            this.state = 1492;
	            this.match(n1qlParser.INSERT);
	            this.state = 1493;
	            this.merge_insert();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge_update() {
	    let localctx = new Merge_updateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, n1qlParser.RULE_merge_update);
	    try {
	        this.state = 1506;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1496;
	            this.set();
	            this.state = 1497;
	            this.opt_where();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1499;
	            this.set();
	            this.state = 1500;
	            this.unset();
	            this.state = 1501;
	            this.opt_where();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1503;
	            this.unset();
	            this.state = 1504;
	            this.opt_where();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge_delete() {
	    let localctx = new Merge_deleteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, n1qlParser.RULE_merge_delete);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1508;
	        this.opt_where();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	merge_insert() {
	    let localctx = new Merge_insertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, n1qlParser.RULE_merge_insert);
	    try {
	        this.state = 1524;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1510;
	            this.expr(0);
	            this.state = 1511;
	            this.opt_where();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1513;
	            this.key_val_expr();
	            this.state = 1514;
	            this.opt_where();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1516;
	            this.key_val_options_expr();
	            this.state = 1517;
	            this.opt_where();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1519;
	            this.match(n1qlParser.LPAREN);
	            this.state = 1520;
	            this.key_val_options_expr_header();
	            this.state = 1521;
	            this.match(n1qlParser.RPAREN);
	            this.state = 1522;
	            this.opt_where();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grant_role() {
	    let localctx = new Grant_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, n1qlParser.RULE_grant_role);
	    try {
	        this.state = 1538;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1526;
	            this.match(n1qlParser.GRANT);
	            this.state = 1527;
	            this.role_list(0);
	            this.state = 1528;
	            this.match(n1qlParser.TO);
	            this.state = 1529;
	            this.user_list(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1531;
	            this.match(n1qlParser.GRANT);
	            this.state = 1532;
	            this.role_list(0);
	            this.state = 1533;
	            this.match(n1qlParser.ON);
	            this.state = 1534;
	            this.keyspace_scope_list(0);
	            this.state = 1535;
	            this.match(n1qlParser.TO);
	            this.state = 1536;
	            this.user_list(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	role_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Role_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 284;
	    this.enterRecursionRule(localctx, 284, n1qlParser.RULE_role_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1541;
	        this.role_name();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1548;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Role_listContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_role_list);
	                this.state = 1543;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1544;
	                this.match(n1qlParser.COMMA);
	                this.state = 1545;
	                this.role_name(); 
	            }
	            this.state = 1550;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	role_name() {
	    let localctx = new Role_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, n1qlParser.RULE_role_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1551;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.DELETE_ || _la===n1qlParser.INSERT || _la===n1qlParser.SELECT || _la===n1qlParser.UPDATE || _la===n1qlParser.IDENT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	keyspace_scope_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Keyspace_scope_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 288;
	    this.enterRecursionRule(localctx, 288, n1qlParser.RULE_keyspace_scope_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1554;
	        this.keyspace_scope();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1561;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Keyspace_scope_listContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_keyspace_scope_list);
	                this.state = 1556;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1557;
	                this.match(n1qlParser.COMMA);
	                this.state = 1558;
	                this.keyspace_scope(); 
	            }
	            this.state = 1563;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	keyspace_scope() {
	    let localctx = new Keyspace_scopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, n1qlParser.RULE_keyspace_scope);
	    try {
	        this.state = 1590;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1564;
	            this.keyspace_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1565;
	            this.namespace_name();
	            this.state = 1566;
	            this.keyspace_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1568;
	            this.namespace_name();
	            this.state = 1569;
	            this.bucket_name();
	            this.state = 1570;
	            this.match(n1qlParser.DOT);
	            this.state = 1571;
	            this.scope_name();
	            this.state = 1572;
	            this.match(n1qlParser.DOT);
	            this.state = 1573;
	            this.keyspace_name();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1575;
	            this.bucket_name();
	            this.state = 1576;
	            this.match(n1qlParser.DOT);
	            this.state = 1577;
	            this.scope_name();
	            this.state = 1578;
	            this.match(n1qlParser.DOT);
	            this.state = 1579;
	            this.keyspace_name();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1581;
	            this.namespace_name();
	            this.state = 1582;
	            this.bucket_name();
	            this.state = 1583;
	            this.match(n1qlParser.DOT);
	            this.state = 1584;
	            this.scope_name();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1586;
	            this.bucket_name();
	            this.state = 1587;
	            this.match(n1qlParser.DOT);
	            this.state = 1588;
	            this.scope_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	user_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new User_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 292;
	    this.enterRecursionRule(localctx, 292, n1qlParser.RULE_user_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1593;
	        this.user();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1600;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new User_listContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_user_list);
	                this.state = 1595;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1596;
	                this.match(n1qlParser.COMMA);
	                this.state = 1597;
	                this.user(); 
	            }
	            this.state = 1602;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	user() {
	    let localctx = new UserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, n1qlParser.RULE_user);
	    try {
	        this.state = 1607;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1603;
	            this.match(n1qlParser.IDENT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1604;
	            this.match(n1qlParser.IDENT);
	            this.state = 1605;
	            this.match(n1qlParser.COLON);
	            this.state = 1606;
	            this.match(n1qlParser.IDENT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revoke_role() {
	    let localctx = new Revoke_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, n1qlParser.RULE_revoke_role);
	    try {
	        this.state = 1621;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1609;
	            this.match(n1qlParser.REVOKE);
	            this.state = 1610;
	            this.role_list(0);
	            this.state = 1611;
	            this.match(n1qlParser.FROM);
	            this.state = 1612;
	            this.user_list(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1614;
	            this.match(n1qlParser.REVOKE);
	            this.state = 1615;
	            this.role_list(0);
	            this.state = 1616;
	            this.match(n1qlParser.ON);
	            this.state = 1617;
	            this.keyspace_scope_list(0);
	            this.state = 1618;
	            this.match(n1qlParser.FROM);
	            this.state = 1619;
	            this.user_list(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_scope() {
	    let localctx = new Create_scopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, n1qlParser.RULE_create_scope);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1623;
	        this.match(n1qlParser.CREATE);
	        this.state = 1624;
	        this.match(n1qlParser.SCOPE);
	        this.state = 1625;
	        this.named_scope_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_scope() {
	    let localctx = new Drop_scopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, n1qlParser.RULE_drop_scope);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1627;
	        this.match(n1qlParser.DROP);
	        this.state = 1628;
	        this.match(n1qlParser.SCOPE);
	        this.state = 1629;
	        this.named_scope_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_collection() {
	    let localctx = new Create_collectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, n1qlParser.RULE_create_collection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1631;
	        this.match(n1qlParser.CREATE);
	        this.state = 1632;
	        this.match(n1qlParser.COLLECTION);
	        this.state = 1633;
	        this.named_keyspace_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_collection() {
	    let localctx = new Drop_collectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, n1qlParser.RULE_drop_collection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1635;
	        this.match(n1qlParser.DROP);
	        this.state = 1636;
	        this.match(n1qlParser.COLLECTION);
	        this.state = 1637;
	        this.named_keyspace_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flush_collection() {
	    let localctx = new Flush_collectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, n1qlParser.RULE_flush_collection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1639;
	        this.flush_or_truncate();
	        this.state = 1640;
	        this.match(n1qlParser.COLLECTION);
	        this.state = 1641;
	        this.named_keyspace_ref();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flush_or_truncate() {
	    let localctx = new Flush_or_truncateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, n1qlParser.RULE_flush_or_truncate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1643;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.FLUSH || _la===n1qlParser.TRUNCATE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_index() {
	    let localctx = new Create_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, n1qlParser.RULE_create_index);
	    try {
	        this.state = 1668;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1645;
	            this.match(n1qlParser.CREATE);
	            this.state = 1646;
	            this.match(n1qlParser.PRIMARY);
	            this.state = 1647;
	            this.match(n1qlParser.INDEX);
	            this.state = 1648;
	            this.opt_primary_name();
	            this.state = 1649;
	            this.match(n1qlParser.ON);
	            this.state = 1650;
	            this.named_keyspace_ref();
	            this.state = 1651;
	            this.index_partition();
	            this.state = 1652;
	            this.opt_index_using();
	            this.state = 1653;
	            this.opt_index_with();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1655;
	            this.match(n1qlParser.CREATE);
	            this.state = 1656;
	            this.match(n1qlParser.INDEX);
	            this.state = 1657;
	            this.index_name();
	            this.state = 1658;
	            this.match(n1qlParser.ON);
	            this.state = 1659;
	            this.named_keyspace_ref();
	            this.state = 1660;
	            this.match(n1qlParser.LPAREN);
	            this.state = 1661;
	            this.index_terms(0);
	            this.state = 1662;
	            this.match(n1qlParser.RPAREN);
	            this.state = 1663;
	            this.index_partition();
	            this.state = 1664;
	            this.index_where();
	            this.state = 1665;
	            this.opt_index_using();
	            this.state = 1666;
	            this.opt_index_with();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_primary_name() {
	    let localctx = new Opt_primary_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, n1qlParser.RULE_opt_primary_name);
	    try {
	        this.state = 1672;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.ON:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.IDENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1671;
	            this.index_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_name() {
	    let localctx = new Index_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, n1qlParser.RULE_index_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1674;
	        this.match(n1qlParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_index_name() {
	    let localctx = new Opt_index_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, n1qlParser.RULE_opt_index_name);
	    try {
	        this.state = 1678;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1677;
	            this.index_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_keyspace_ref() {
	    let localctx = new Named_keyspace_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, n1qlParser.RULE_named_keyspace_ref);
	    try {
	        this.state = 1690;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1680;
	            this.simple_named_keyspace_ref();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1681;
	            this.namespace_name();
	            this.state = 1682;
	            this.bucket_name();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1684;
	            this.bucket_name();
	            this.state = 1685;
	            this.match(n1qlParser.DOT);
	            this.state = 1686;
	            this.scope_name();
	            this.state = 1687;
	            this.match(n1qlParser.DOT);
	            this.state = 1688;
	            this.keyspace_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_named_keyspace_ref() {
	    let localctx = new Simple_named_keyspace_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, n1qlParser.RULE_simple_named_keyspace_ref);
	    try {
	        this.state = 1700;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.IDENT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1692;
	            this.keyspace_name();
	            break;
	        case n1qlParser.NAMESPACE_ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1693;
	            this.namespace_name();
	            this.state = 1694;
	            this.bucket_name();
	            this.state = 1695;
	            this.match(n1qlParser.DOT);
	            this.state = 1696;
	            this.scope_name();
	            this.state = 1697;
	            this.match(n1qlParser.DOT);
	            this.state = 1698;
	            this.keyspace_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_scope_ref() {
	    let localctx = new Named_scope_refContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, n1qlParser.RULE_named_scope_ref);
	    try {
	        this.state = 1711;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.NAMESPACE_ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1702;
	            this.namespace_name();
	            this.state = 1703;
	            this.bucket_name();
	            this.state = 1704;
	            this.match(n1qlParser.DOT);
	            this.state = 1705;
	            this.scope_name();
	            break;
	        case n1qlParser.IDENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1707;
	            this.bucket_name();
	            this.state = 1708;
	            this.match(n1qlParser.DOT);
	            this.state = 1709;
	            this.scope_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_partition() {
	    let localctx = new Index_partitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, n1qlParser.RULE_index_partition);
	    try {
	        this.state = 1721;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1714;
	            this.match(n1qlParser.PARTITION);
	            this.state = 1715;
	            this.match(n1qlParser.BY);
	            this.state = 1716;
	            this.match(n1qlParser.HASH);
	            this.state = 1717;
	            this.match(n1qlParser.LPAREN);
	            this.state = 1718;
	            this.exprs(0);
	            this.state = 1719;
	            this.match(n1qlParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_index_using() {
	    let localctx = new Opt_index_usingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, n1qlParser.RULE_opt_index_using);
	    try {
	        this.state = 1725;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1724;
	            this.index_using();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_using() {
	    let localctx = new Index_usingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, n1qlParser.RULE_index_using);
	    try {
	        this.state = 1733;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1727;
	            this.match(n1qlParser.USING);
	            this.state = 1728;
	            this.match(n1qlParser.VIEW);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1729;
	            this.match(n1qlParser.USING);
	            this.state = 1730;
	            this.match(n1qlParser.GSI);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1731;
	            this.match(n1qlParser.USING);
	            this.state = 1732;
	            this.match(n1qlParser.FTS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_index_with() {
	    let localctx = new Opt_index_withContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, n1qlParser.RULE_opt_index_with);
	    try {
	        this.state = 1737;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1736;
	            this.index_with();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_with() {
	    let localctx = new Index_withContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, n1qlParser.RULE_index_with);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1739;
	        this.match(n1qlParser.WITH);
	        this.state = 1740;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	index_terms(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Index_termsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 334;
	    this.enterRecursionRule(localctx, 334, n1qlParser.RULE_index_terms, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1743;
	        this.index_term();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1750;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,103,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Index_termsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_index_terms);
	                this.state = 1745;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1746;
	                this.match(n1qlParser.COMMA);
	                this.state = 1747;
	                this.index_term(); 
	            }
	            this.state = 1752;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,103,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	index_term() {
	    let localctx = new Index_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, n1qlParser.RULE_index_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1753;
	        this.index_term_expr();
	        this.state = 1754;
	        this.opt_ikattr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_term_expr() {
	    let localctx = new Index_term_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, n1qlParser.RULE_index_term_expr);
	    try {
	        this.state = 1766;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1756;
	            this.index_expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1757;
	            this.all();
	            this.state = 1758;
	            this.index_expr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1760;
	            this.all();
	            this.state = 1761;
	            this.match(n1qlParser.DISTINCT);
	            this.state = 1762;
	            this.index_expr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1764;
	            this.match(n1qlParser.DISTINCT);
	            this.state = 1765;
	            this.index_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_expr() {
	    let localctx = new Index_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, n1qlParser.RULE_index_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1768;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	all() {
	    let localctx = new AllContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, n1qlParser.RULE_all);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1770;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.ALL || _la===n1qlParser.EACH)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index_where() {
	    let localctx = new Index_whereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, n1qlParser.RULE_index_where);
	    try {
	        this.state = 1775;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1773;
	            this.match(n1qlParser.WHERE);
	            this.state = 1774;
	            this.index_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_ikattr() {
	    let localctx = new Opt_ikattrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, n1qlParser.RULE_opt_ikattr);
	    try {
	        this.state = 1782;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1778;
	            this.ikattr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1779;
	            this.ikattr();
	            this.state = 1780;
	            this.ikattr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ikattr() {
	    let localctx = new IkattrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, n1qlParser.RULE_ikattr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1784;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.ASC || _la===n1qlParser.DESC || _la===n1qlParser.MISSING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_index() {
	    let localctx = new Drop_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, n1qlParser.RULE_drop_index);
	    try {
	        this.state = 1807;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1786;
	            this.match(n1qlParser.DROP);
	            this.state = 1787;
	            this.match(n1qlParser.PRIMARY);
	            this.state = 1788;
	            this.match(n1qlParser.INDEX);
	            this.state = 1789;
	            this.match(n1qlParser.ON);
	            this.state = 1790;
	            this.named_keyspace_ref();
	            this.state = 1791;
	            this.opt_index_using();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1793;
	            this.match(n1qlParser.DROP);
	            this.state = 1794;
	            this.match(n1qlParser.INDEX);
	            this.state = 1795;
	            this.simple_named_keyspace_ref();
	            this.state = 1796;
	            this.match(n1qlParser.DOT);
	            this.state = 1797;
	            this.index_name();
	            this.state = 1798;
	            this.opt_index_using();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1800;
	            this.match(n1qlParser.DROP);
	            this.state = 1801;
	            this.match(n1qlParser.INDEX);
	            this.state = 1802;
	            this.index_name();
	            this.state = 1803;
	            this.match(n1qlParser.ON);
	            this.state = 1804;
	            this.named_keyspace_ref();
	            this.state = 1805;
	            this.opt_index_using();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alter_index() {
	    let localctx = new Alter_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, n1qlParser.RULE_alter_index);
	    try {
	        this.state = 1825;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1809;
	            this.match(n1qlParser.ALTER);
	            this.state = 1810;
	            this.match(n1qlParser.INDEX);
	            this.state = 1811;
	            this.simple_named_keyspace_ref();
	            this.state = 1812;
	            this.match(n1qlParser.DOT);
	            this.state = 1813;
	            this.index_name();
	            this.state = 1814;
	            this.opt_index_using();
	            this.state = 1815;
	            this.index_with();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1817;
	            this.match(n1qlParser.ALTER);
	            this.state = 1818;
	            this.match(n1qlParser.INDEX);
	            this.state = 1819;
	            this.index_name();
	            this.state = 1820;
	            this.match(n1qlParser.ON);
	            this.state = 1821;
	            this.named_keyspace_ref();
	            this.state = 1822;
	            this.opt_index_using();
	            this.state = 1823;
	            this.index_with();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	build_index() {
	    let localctx = new Build_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, n1qlParser.RULE_build_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1827;
	        this.match(n1qlParser.BUILD);
	        this.state = 1828;
	        this.match(n1qlParser.INDEX);
	        this.state = 1829;
	        this.match(n1qlParser.ON);
	        this.state = 1830;
	        this.named_keyspace_ref();
	        this.state = 1831;
	        this.match(n1qlParser.LPAREN);
	        this.state = 1832;
	        this.exprs(0);
	        this.state = 1833;
	        this.match(n1qlParser.RPAREN);
	        this.state = 1834;
	        this.opt_index_using();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	create_function() {
	    let localctx = new Create_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, n1qlParser.RULE_create_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1836;
	        this.match(n1qlParser.CREATE);
	        this.state = 1837;
	        this.opt_replace();
	        this.state = 1838;
	        this.match(n1qlParser.FUNCTION);
	        this.state = 1839;
	        this.func_name();
	        this.state = 1840;
	        this.match(n1qlParser.LPAREN);
	        this.state = 1841;
	        this.parm_list();
	        this.state = 1842;
	        this.match(n1qlParser.RPAREN);
	        this.state = 1843;
	        this.func_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_replace() {
	    let localctx = new Opt_replaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, n1qlParser.RULE_opt_replace);
	    try {
	        this.state = 1848;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.FUNCTION:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.OR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1846;
	            this.match(n1qlParser.OR);
	            this.state = 1847;
	            this.match(n1qlParser.REPLACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_name() {
	    let localctx = new Func_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, n1qlParser.RULE_func_name);
	    try {
	        this.state = 1852;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.IDENT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1850;
	            this.short_func_name();
	            break;
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.SYSTEM:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1851;
	            this.long_func_name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	short_func_name() {
	    let localctx = new Short_func_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, n1qlParser.RULE_short_func_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1854;
	        this.keyspace_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	long_func_name() {
	    let localctx = new Long_func_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, n1qlParser.RULE_long_func_name);
	    try {
	        this.state = 1866;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1856;
	            this.namespace_term();
	            this.state = 1857;
	            this.keyspace_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1859;
	            this.namespace_term();
	            this.state = 1860;
	            this.bucket_name();
	            this.state = 1861;
	            this.match(n1qlParser.DOT);
	            this.state = 1862;
	            this.scope_name();
	            this.state = 1863;
	            this.match(n1qlParser.DOT);
	            this.state = 1864;
	            this.keyspace_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parm_list() {
	    let localctx = new Parm_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, n1qlParser.RULE_parm_list);
	    try {
	        this.state = 1873;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.RPAREN:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.DOT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1869;
	            this.match(n1qlParser.DOT);
	            this.state = 1870;
	            this.match(n1qlParser.DOT);
	            this.state = 1871;
	            this.match(n1qlParser.DOT);
	            break;
	        case n1qlParser.IDENT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1872;
	            this.parameter_terms(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	parameter_terms(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Parameter_termsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 368;
	    this.enterRecursionRule(localctx, 368, n1qlParser.RULE_parameter_terms, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1876;
	        this.match(n1qlParser.IDENT);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1883;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,113,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Parameter_termsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_parameter_terms);
	                this.state = 1878;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1879;
	                this.match(n1qlParser.COMMA);
	                this.state = 1880;
	                this.match(n1qlParser.IDENT); 
	            }
	            this.state = 1885;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,113,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	func_body() {
	    let localctx = new Func_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, n1qlParser.RULE_func_body);
	    try {
	        this.state = 1906;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1886;
	            this.match(n1qlParser.LBRACE);
	            this.state = 1887;
	            this.expr(0);
	            this.state = 1888;
	            this.match(n1qlParser.RBRACE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1890;
	            this.match(n1qlParser.LANGUAGE);
	            this.state = 1891;
	            this.match(n1qlParser.INLINE);
	            this.state = 1892;
	            this.match(n1qlParser.AS);
	            this.state = 1893;
	            this.expr(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1894;
	            this.match(n1qlParser.LANGUAGE);
	            this.state = 1895;
	            this.match(n1qlParser.GOLANG);
	            this.state = 1896;
	            this.match(n1qlParser.AS);
	            this.state = 1897;
	            this.match(n1qlParser.STR);
	            this.state = 1898;
	            this.match(n1qlParser.AT);
	            this.state = 1899;
	            this.match(n1qlParser.STR);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1900;
	            this.match(n1qlParser.LANGUAGE);
	            this.state = 1901;
	            this.match(n1qlParser.JAVASCRIPT);
	            this.state = 1902;
	            this.match(n1qlParser.AS);
	            this.state = 1903;
	            this.match(n1qlParser.STR);
	            this.state = 1904;
	            this.match(n1qlParser.AT);
	            this.state = 1905;
	            this.match(n1qlParser.STR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	drop_function() {
	    let localctx = new Drop_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, n1qlParser.RULE_drop_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1908;
	        this.match(n1qlParser.DROP);
	        this.state = 1909;
	        this.match(n1qlParser.FUNCTION);
	        this.state = 1910;
	        this.func_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	execute_function() {
	    let localctx = new Execute_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, n1qlParser.RULE_execute_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1912;
	        this.match(n1qlParser.EXECUTE);
	        this.state = 1913;
	        this.match(n1qlParser.FUNCTION);
	        this.state = 1914;
	        this.func_name();
	        this.state = 1915;
	        this.match(n1qlParser.LPAREN);
	        this.state = 1916;
	        this.opt_exprs();
	        this.state = 1917;
	        this.match(n1qlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	update_statistics() {
	    let localctx = new Update_statisticsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, n1qlParser.RULE_update_statistics);
	    try {
	        this.state = 2041;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1919;
	            this.match(n1qlParser.UPDATE);
	            this.state = 1920;
	            this.match(n1qlParser.STATISTICS);
	            this.state = 1921;
	            this.opt_for();
	            this.state = 1922;
	            this.named_keyspace_ref();
	            this.state = 1923;
	            this.match(n1qlParser.LPAREN);
	            this.state = 1924;
	            this.update_stat_terms(0);
	            this.state = 1925;
	            this.match(n1qlParser.RPAREN);
	            this.state = 1926;
	            this.opt_infer_ustat_with();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1928;
	            this.match(n1qlParser.UPDATE);
	            this.state = 1929;
	            this.match(n1qlParser.STATISTICS);
	            this.state = 1930;
	            this.opt_for();
	            this.state = 1931;
	            this.named_keyspace_ref();
	            this.state = 1932;
	            this.match(n1qlParser.DELETE_);
	            this.state = 1933;
	            this.match(n1qlParser.LPAREN);
	            this.state = 1934;
	            this.update_stat_terms(0);
	            this.state = 1935;
	            this.match(n1qlParser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1937;
	            this.match(n1qlParser.UPDATE);
	            this.state = 1938;
	            this.match(n1qlParser.STATISTICS);
	            this.state = 1939;
	            this.opt_for();
	            this.state = 1940;
	            this.named_keyspace_ref();
	            this.state = 1941;
	            this.match(n1qlParser.DELETE_);
	            this.state = 1942;
	            this.match(n1qlParser.ALL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1944;
	            this.match(n1qlParser.UPDATE);
	            this.state = 1945;
	            this.match(n1qlParser.STATISTICS);
	            this.state = 1946;
	            this.opt_for();
	            this.state = 1947;
	            this.named_keyspace_ref();
	            this.state = 1948;
	            this.match(n1qlParser.INDEX);
	            this.state = 1949;
	            this.match(n1qlParser.LPAREN);
	            this.state = 1950;
	            this.exprs(0);
	            this.state = 1951;
	            this.match(n1qlParser.RPAREN);
	            this.state = 1952;
	            this.opt_index_using();
	            this.state = 1953;
	            this.opt_infer_ustat_with();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1955;
	            this.match(n1qlParser.UPDATE);
	            this.state = 1956;
	            this.match(n1qlParser.STATISTICS);
	            this.state = 1957;
	            this.opt_for();
	            this.state = 1958;
	            this.named_keyspace_ref();
	            this.state = 1959;
	            this.match(n1qlParser.INDEX);
	            this.state = 1960;
	            this.match(n1qlParser.ALL);
	            this.state = 1961;
	            this.opt_index_using();
	            this.state = 1962;
	            this.opt_infer_ustat_with();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1964;
	            this.match(n1qlParser.UPDATE);
	            this.state = 1965;
	            this.match(n1qlParser.STATISTICS);
	            this.state = 1966;
	            this.match(n1qlParser.FOR);
	            this.state = 1967;
	            this.match(n1qlParser.INDEX);
	            this.state = 1968;
	            this.simple_named_keyspace_ref();
	            this.state = 1969;
	            this.match(n1qlParser.DOT);
	            this.state = 1970;
	            this.index_name();
	            this.state = 1971;
	            this.opt_index_using();
	            this.state = 1972;
	            this.opt_infer_ustat_with();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1974;
	            this.match(n1qlParser.UPDATE);
	            this.state = 1975;
	            this.match(n1qlParser.STATISTICS);
	            this.state = 1976;
	            this.match(n1qlParser.FOR);
	            this.state = 1977;
	            this.match(n1qlParser.INDEX);
	            this.state = 1978;
	            this.index_name();
	            this.state = 1979;
	            this.match(n1qlParser.ON);
	            this.state = 1980;
	            this.named_keyspace_ref();
	            this.state = 1981;
	            this.opt_index_using();
	            this.state = 1982;
	            this.opt_infer_ustat_with();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1984;
	            this.match(n1qlParser.ANALYZE);
	            this.state = 1985;
	            this.opt_keyspace_collection();
	            this.state = 1986;
	            this.named_keyspace_ref();
	            this.state = 1987;
	            this.match(n1qlParser.LPAREN);
	            this.state = 1988;
	            this.update_stat_terms(0);
	            this.state = 1989;
	            this.match(n1qlParser.RPAREN);
	            this.state = 1990;
	            this.opt_infer_ustat_with();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1992;
	            this.match(n1qlParser.ANALYZE);
	            this.state = 1993;
	            this.opt_keyspace_collection();
	            this.state = 1994;
	            this.named_keyspace_ref();
	            this.state = 1995;
	            this.match(n1qlParser.DELETE_);
	            this.state = 1996;
	            this.match(n1qlParser.STATISTICS);
	            this.state = 1997;
	            this.match(n1qlParser.LPAREN);
	            this.state = 1998;
	            this.update_stat_terms(0);
	            this.state = 1999;
	            this.match(n1qlParser.RPAREN);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2001;
	            this.match(n1qlParser.ANALYZE);
	            this.state = 2002;
	            this.opt_keyspace_collection();
	            this.state = 2003;
	            this.named_keyspace_ref();
	            this.state = 2004;
	            this.match(n1qlParser.DELETE_);
	            this.state = 2005;
	            this.match(n1qlParser.STATISTICS);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2007;
	            this.match(n1qlParser.ANALYZE);
	            this.state = 2008;
	            this.opt_keyspace_collection();
	            this.state = 2009;
	            this.named_keyspace_ref();
	            this.state = 2010;
	            this.match(n1qlParser.INDEX);
	            this.state = 2011;
	            this.match(n1qlParser.LPAREN);
	            this.state = 2012;
	            this.exprs(0);
	            this.state = 2013;
	            this.match(n1qlParser.RPAREN);
	            this.state = 2014;
	            this.opt_index_using();
	            this.state = 2015;
	            this.opt_infer_ustat_with();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2017;
	            this.match(n1qlParser.ANALYZE);
	            this.state = 2018;
	            this.opt_keyspace_collection();
	            this.state = 2019;
	            this.named_keyspace_ref();
	            this.state = 2020;
	            this.match(n1qlParser.INDEX);
	            this.state = 2021;
	            this.match(n1qlParser.ALL);
	            this.state = 2022;
	            this.opt_index_using();
	            this.state = 2023;
	            this.opt_infer_ustat_with();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2025;
	            this.match(n1qlParser.ANALYZE);
	            this.state = 2026;
	            this.match(n1qlParser.INDEX);
	            this.state = 2027;
	            this.simple_named_keyspace_ref();
	            this.state = 2028;
	            this.match(n1qlParser.DOT);
	            this.state = 2029;
	            this.index_name();
	            this.state = 2030;
	            this.opt_index_using();
	            this.state = 2031;
	            this.opt_infer_ustat_with();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2033;
	            this.match(n1qlParser.ANALYZE);
	            this.state = 2034;
	            this.match(n1qlParser.INDEX);
	            this.state = 2035;
	            this.index_name();
	            this.state = 2036;
	            this.match(n1qlParser.ON);
	            this.state = 2037;
	            this.named_keyspace_ref();
	            this.state = 2038;
	            this.opt_index_using();
	            this.state = 2039;
	            this.opt_infer_ustat_with();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_for() {
	    let localctx = new Opt_forContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, n1qlParser.RULE_opt_for);
	    try {
	        this.state = 2045;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.IDENT:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.FOR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2044;
	            this.match(n1qlParser.FOR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	update_stat_terms(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Update_stat_termsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 380;
	    this.enterRecursionRule(localctx, 380, n1qlParser.RULE_update_stat_terms, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2048;
	        this.update_stat_term();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2055;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Update_stat_termsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_update_stat_terms);
	                this.state = 2050;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2051;
	                this.match(n1qlParser.COMMA);
	                this.state = 2052;
	                this.update_stat_term(); 
	            }
	            this.state = 2057;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	update_stat_term() {
	    let localctx = new Update_stat_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, n1qlParser.RULE_update_stat_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2058;
	        this.index_term_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	path(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PathContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 384;
	    this.enterRecursionRule(localctx, 384, n1qlParser.RULE_path, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2061;
	        this.match(n1qlParser.IDENT);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2088;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2086;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PathContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_path);
	                    this.state = 2063;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 2064;
	                    this.match(n1qlParser.DOT);
	                    this.state = 2065;
	                    this.match(n1qlParser.IDENT);
	                    break;

	                case 2:
	                    localctx = new PathContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_path);
	                    this.state = 2066;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 2067;
	                    this.match(n1qlParser.DOT);
	                    this.state = 2068;
	                    this.match(n1qlParser.IDENT_ICASE);
	                    break;

	                case 3:
	                    localctx = new PathContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_path);
	                    this.state = 2069;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2070;
	                    this.match(n1qlParser.DOT);
	                    this.state = 2071;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2072;
	                    this.expr(0);
	                    this.state = 2073;
	                    this.match(n1qlParser.RBRACKET);
	                    break;

	                case 4:
	                    localctx = new PathContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_path);
	                    this.state = 2075;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2076;
	                    this.match(n1qlParser.DOT);
	                    this.state = 2077;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2078;
	                    this.expr(0);
	                    this.state = 2079;
	                    this.match(n1qlParser.RBRACKET_ICASE);
	                    break;

	                case 5:
	                    localctx = new PathContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_path);
	                    this.state = 2081;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2082;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2083;
	                    this.expr(0);
	                    this.state = 2084;
	                    this.match(n1qlParser.RBRACKET);
	                    break;

	                } 
	            }
	            this.state = 2090;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 386;
	    this.enterRecursionRule(localctx, 386, n1qlParser.RULE_expr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2097;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.STR:
	        case n1qlParser.INT:
	        case n1qlParser.NUM:
	        case n1qlParser.MINUS:
	        case n1qlParser.LPAREN:
	        case n1qlParser.LBRACE:
	        case n1qlParser.LBRACKET:
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.ANY:
	        case n1qlParser.ARRAY:
	        case n1qlParser.CASE:
	        case n1qlParser.CORRELATED:
	        case n1qlParser.COVER:
	        case n1qlParser.EVERY:
	        case n1qlParser.FALSE:
	        case n1qlParser.FIRST:
	        case n1qlParser.MISSING:
	        case n1qlParser.NTH_VALUE:
	        case n1qlParser.NULL:
	        case n1qlParser.OBJECT:
	        case n1qlParser.REPLACE:
	        case n1qlParser.SELF:
	        case n1qlParser.SOME:
	        case n1qlParser.SYSTEM:
	        case n1qlParser.TRUE:
	        case n1qlParser.IDENT_ICASE:
	        case n1qlParser.IDENT:
	        case n1qlParser.NAMED_PARAM:
	        case n1qlParser.POSITIONAL_PARAM:
	        case n1qlParser.NEXT_PARAM:
	            this.state = 2092;
	            this.c_expr();
	            break;
	        case n1qlParser.NOT:
	            this.state = 2093;
	            this.match(n1qlParser.NOT);
	            this.state = 2094;
	            this.expr(23);
	            break;
	        case n1qlParser.EXISTS:
	            this.state = 2095;
	            this.match(n1qlParser.EXISTS);
	            this.state = 2096;
	            this.expr(1);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2241;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2239;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2099;
	                    if (!( this.precpred(this._ctx, 31))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
	                    }
	                    this.state = 2100;
	                    this.match(n1qlParser.PLUS);
	                    this.state = 2101;
	                    this.expr(32);
	                    break;

	                case 2:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2102;
	                    if (!( this.precpred(this._ctx, 30))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
	                    }
	                    this.state = 2103;
	                    this.match(n1qlParser.MINUS);
	                    this.state = 2104;
	                    this.expr(31);
	                    break;

	                case 3:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2105;
	                    if (!( this.precpred(this._ctx, 29))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
	                    }
	                    this.state = 2106;
	                    this.match(n1qlParser.STAR);
	                    this.state = 2107;
	                    this.expr(30);
	                    break;

	                case 4:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2108;
	                    if (!( this.precpred(this._ctx, 28))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
	                    }
	                    this.state = 2109;
	                    this.match(n1qlParser.DIV);
	                    this.state = 2110;
	                    this.expr(29);
	                    break;

	                case 5:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2111;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 2112;
	                    this.match(n1qlParser.MOD);
	                    this.state = 2113;
	                    this.expr(28);
	                    break;

	                case 6:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2114;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 2115;
	                    this.match(n1qlParser.CONCAT);
	                    this.state = 2116;
	                    this.expr(27);
	                    break;

	                case 7:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2117;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 2118;
	                    this.match(n1qlParser.AND);
	                    this.state = 2119;
	                    this.expr(26);
	                    break;

	                case 8:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2120;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 2121;
	                    this.match(n1qlParser.OR);
	                    this.state = 2122;
	                    this.expr(25);
	                    break;

	                case 9:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2123;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 2124;
	                    this.match(n1qlParser.EQ);
	                    this.state = 2125;
	                    this.expr(23);
	                    break;

	                case 10:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2126;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 2127;
	                    this.match(n1qlParser.DEQ);
	                    this.state = 2128;
	                    this.expr(22);
	                    break;

	                case 11:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2129;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 2130;
	                    this.match(n1qlParser.NE);
	                    this.state = 2131;
	                    this.expr(21);
	                    break;

	                case 12:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2132;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 2133;
	                    this.match(n1qlParser.LT);
	                    this.state = 2134;
	                    this.expr(20);
	                    break;

	                case 13:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2135;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 2136;
	                    this.match(n1qlParser.GT);
	                    this.state = 2137;
	                    this.expr(19);
	                    break;

	                case 14:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2138;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 2139;
	                    this.match(n1qlParser.LE);
	                    this.state = 2140;
	                    this.expr(18);
	                    break;

	                case 15:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2141;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 2142;
	                    this.match(n1qlParser.GE);
	                    this.state = 2143;
	                    this.expr(17);
	                    break;

	                case 16:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2144;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 2145;
	                    this.match(n1qlParser.LIKE);
	                    this.state = 2146;
	                    this.expr(14);
	                    break;

	                case 17:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2147;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 2148;
	                    this.match(n1qlParser.NOT);
	                    this.state = 2149;
	                    this.match(n1qlParser.LIKE);
	                    this.state = 2150;
	                    this.expr(13);
	                    break;

	                case 18:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2151;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 2152;
	                    this.match(n1qlParser.IN);
	                    this.state = 2153;
	                    this.expr(12);
	                    break;

	                case 19:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2154;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 2155;
	                    this.match(n1qlParser.NOT);
	                    this.state = 2156;
	                    this.match(n1qlParser.IN);
	                    this.state = 2157;
	                    this.expr(11);
	                    break;

	                case 20:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2158;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 2159;
	                    this.match(n1qlParser.WITHIN);
	                    this.state = 2160;
	                    this.expr(10);
	                    break;

	                case 21:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2161;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 2162;
	                    this.match(n1qlParser.NOT);
	                    this.state = 2163;
	                    this.match(n1qlParser.WITHIN);
	                    this.state = 2164;
	                    this.expr(9);
	                    break;

	                case 22:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2165;
	                    if (!( this.precpred(this._ctx, 39))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
	                    }
	                    this.state = 2166;
	                    this.match(n1qlParser.DOT);
	                    this.state = 2167;
	                    this.match(n1qlParser.IDENT);
	                    break;

	                case 23:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2168;
	                    if (!( this.precpred(this._ctx, 38))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
	                    }
	                    this.state = 2169;
	                    this.match(n1qlParser.DOT);
	                    this.state = 2170;
	                    this.match(n1qlParser.IDENT_ICASE);
	                    break;

	                case 24:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2171;
	                    if (!( this.precpred(this._ctx, 37))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 37)");
	                    }
	                    this.state = 2172;
	                    this.match(n1qlParser.DOT);
	                    this.state = 2173;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2174;
	                    this.expr(0);
	                    this.state = 2175;
	                    this.match(n1qlParser.RBRACKET);
	                    break;

	                case 25:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2177;
	                    if (!( this.precpred(this._ctx, 36))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 36)");
	                    }
	                    this.state = 2178;
	                    this.match(n1qlParser.DOT);
	                    this.state = 2179;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2180;
	                    this.expr(0);
	                    this.state = 2181;
	                    this.match(n1qlParser.RBRACKET_ICASE);
	                    break;

	                case 26:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2183;
	                    if (!( this.precpred(this._ctx, 35))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 35)");
	                    }
	                    this.state = 2184;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2185;
	                    this.expr(0);
	                    this.state = 2186;
	                    this.match(n1qlParser.RBRACKET);
	                    break;

	                case 27:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2188;
	                    if (!( this.precpred(this._ctx, 34))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 34)");
	                    }
	                    this.state = 2189;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2190;
	                    this.expr(0);
	                    this.state = 2191;
	                    this.match(n1qlParser.COLON);
	                    this.state = 2192;
	                    this.match(n1qlParser.RBRACKET);
	                    break;

	                case 28:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2194;
	                    if (!( this.precpred(this._ctx, 33))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 33)");
	                    }
	                    this.state = 2195;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2196;
	                    this.expr(0);
	                    this.state = 2197;
	                    this.match(n1qlParser.COLON);
	                    this.state = 2198;
	                    this.expr(0);
	                    this.state = 2199;
	                    this.match(n1qlParser.RBRACKET);
	                    break;

	                case 29:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2201;
	                    if (!( this.precpred(this._ctx, 32))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
	                    }
	                    this.state = 2202;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2203;
	                    this.match(n1qlParser.STAR);
	                    this.state = 2204;
	                    this.match(n1qlParser.RBRACKET);
	                    break;

	                case 30:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2205;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 2206;
	                    this.match(n1qlParser.BETWEEN);
	                    this.state = 2207;
	                    this.b_expr(0);
	                    this.state = 2208;
	                    this.match(n1qlParser.AND);
	                    this.state = 2209;
	                    this.b_expr(0);
	                    break;

	                case 31:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2211;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 2212;
	                    this.match(n1qlParser.NOT);
	                    this.state = 2213;
	                    this.match(n1qlParser.BETWEEN);
	                    this.state = 2214;
	                    this.b_expr(0);
	                    this.state = 2215;
	                    this.match(n1qlParser.AND);
	                    this.state = 2216;
	                    this.b_expr(0);
	                    break;

	                case 32:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2218;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 2219;
	                    this.match(n1qlParser.IS);
	                    this.state = 2220;
	                    this.match(n1qlParser.NULL);
	                    break;

	                case 33:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2221;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 2222;
	                    this.match(n1qlParser.IS);
	                    this.state = 2223;
	                    this.match(n1qlParser.NOT);
	                    this.state = 2224;
	                    this.match(n1qlParser.NULL);
	                    break;

	                case 34:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2225;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 2226;
	                    this.match(n1qlParser.IS);
	                    this.state = 2227;
	                    this.match(n1qlParser.MISSING);
	                    break;

	                case 35:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2228;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 2229;
	                    this.match(n1qlParser.IS);
	                    this.state = 2230;
	                    this.match(n1qlParser.NOT);
	                    this.state = 2231;
	                    this.match(n1qlParser.MISSING);
	                    break;

	                case 36:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2232;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2233;
	                    this.match(n1qlParser.IS);
	                    this.state = 2234;
	                    this.valued();
	                    break;

	                case 37:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_expr);
	                    this.state = 2235;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2236;
	                    this.match(n1qlParser.IS);
	                    this.state = 2237;
	                    this.match(n1qlParser.NOT);
	                    this.state = 2238;
	                    this.valued();
	                    break;

	                } 
	            }
	            this.state = 2243;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	valued() {
	    let localctx = new ValuedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, n1qlParser.RULE_valued);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2244;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.KNOWN || _la===n1qlParser.VALUED)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	c_expr() {
	    let localctx = new C_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, n1qlParser.RULE_c_expr);
	    try {
	        this.state = 2262;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2246;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2247;
	            this.construction_expr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2248;
	            this.match(n1qlParser.IDENT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2249;
	            this.match(n1qlParser.IDENT_ICASE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2250;
	            this.match(n1qlParser.SELF);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2251;
	            this.param_expr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2252;
	            this.function_expr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2253;
	            this.match(n1qlParser.MINUS);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2254;
	            this.case_expr();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2255;
	            this.collection_expr();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2256;
	            this.paren_expr();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2257;
	            this.match(n1qlParser.COVER);
	            this.state = 2258;
	            this.match(n1qlParser.LPAREN);
	            this.state = 2259;
	            this.expr(0);
	            this.state = 2260;
	            this.match(n1qlParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	b_expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new B_exprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 392;
	    this.enterRecursionRule(localctx, 392, n1qlParser.RULE_b_expr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2265;
	        this.c_expr();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2327;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2325;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2267;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 2268;
	                    this.match(n1qlParser.PLUS);
	                    this.state = 2269;
	                    this.b_expr(7);
	                    break;

	                case 2:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2270;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 2271;
	                    this.match(n1qlParser.MINUS);
	                    this.state = 2272;
	                    this.b_expr(6);
	                    break;

	                case 3:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2273;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 2274;
	                    this.match(n1qlParser.STAR);
	                    this.state = 2275;
	                    this.b_expr(5);
	                    break;

	                case 4:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2276;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2277;
	                    this.match(n1qlParser.DIV);
	                    this.state = 2278;
	                    this.b_expr(4);
	                    break;

	                case 5:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2279;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2280;
	                    this.match(n1qlParser.MOD);
	                    this.state = 2281;
	                    this.b_expr(3);
	                    break;

	                case 6:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2282;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2283;
	                    this.match(n1qlParser.CONCAT);
	                    this.state = 2284;
	                    this.b_expr(2);
	                    break;

	                case 7:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2285;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 2286;
	                    this.match(n1qlParser.DOT);
	                    this.state = 2287;
	                    this.match(n1qlParser.IDENT);
	                    break;

	                case 8:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2288;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 2289;
	                    this.match(n1qlParser.DOT);
	                    this.state = 2290;
	                    this.match(n1qlParser.IDENT_ICASE);
	                    break;

	                case 9:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2291;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 2292;
	                    this.match(n1qlParser.DOT);
	                    this.state = 2293;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2294;
	                    this.expr(0);
	                    this.state = 2295;
	                    this.match(n1qlParser.RBRACKET);
	                    break;

	                case 10:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2297;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 2298;
	                    this.match(n1qlParser.DOT);
	                    this.state = 2299;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2300;
	                    this.expr(0);
	                    this.state = 2301;
	                    this.match(n1qlParser.RBRACKET_ICASE);
	                    break;

	                case 11:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2303;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 2304;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2305;
	                    this.expr(0);
	                    this.state = 2306;
	                    this.match(n1qlParser.RBRACKET);
	                    break;

	                case 12:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2308;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 2309;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2310;
	                    this.expr(0);
	                    this.state = 2311;
	                    this.match(n1qlParser.COLON);
	                    this.state = 2312;
	                    this.match(n1qlParser.RBRACKET);
	                    break;

	                case 13:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2314;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 2315;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2316;
	                    this.expr(0);
	                    this.state = 2317;
	                    this.match(n1qlParser.COLON);
	                    this.state = 2318;
	                    this.expr(0);
	                    this.state = 2319;
	                    this.match(n1qlParser.RBRACKET);
	                    break;

	                case 14:
	                    localctx = new B_exprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_b_expr);
	                    this.state = 2321;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 2322;
	                    this.match(n1qlParser.LBRACKET);
	                    this.state = 2323;
	                    this.match(n1qlParser.STAR);
	                    this.state = 2324;
	                    this.match(n1qlParser.RBRACKET);
	                    break;

	                } 
	            }
	            this.state = 2329;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, n1qlParser.RULE_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2330;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << n1qlParser.STR) | (1 << n1qlParser.INT) | (1 << n1qlParser.NUM))) !== 0) || _la===n1qlParser.FALSE || _la===n1qlParser.MISSING || _la===n1qlParser.NULL || _la===n1qlParser.TRUE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	construction_expr() {
	    let localctx = new Construction_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, n1qlParser.RULE_construction_expr);
	    try {
	        this.state = 2334;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.LBRACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2332;
	            this.object();
	            break;
	        case n1qlParser.LBRACKET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2333;
	            this.array();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object() {
	    let localctx = new ObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, n1qlParser.RULE_object);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2336;
	        this.match(n1qlParser.LBRACE);
	        this.state = 2337;
	        this.opt_members();
	        this.state = 2338;
	        this.match(n1qlParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_members() {
	    let localctx = new Opt_membersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, n1qlParser.RULE_opt_members);
	    try {
	        this.state = 2342;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.RBRACE:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.STR:
	        case n1qlParser.INT:
	        case n1qlParser.NUM:
	        case n1qlParser.MINUS:
	        case n1qlParser.LPAREN:
	        case n1qlParser.LBRACE:
	        case n1qlParser.LBRACKET:
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.ANY:
	        case n1qlParser.ARRAY:
	        case n1qlParser.CASE:
	        case n1qlParser.CORRELATED:
	        case n1qlParser.COVER:
	        case n1qlParser.EVERY:
	        case n1qlParser.EXISTS:
	        case n1qlParser.FALSE:
	        case n1qlParser.FIRST:
	        case n1qlParser.MISSING:
	        case n1qlParser.NOT:
	        case n1qlParser.NTH_VALUE:
	        case n1qlParser.NULL:
	        case n1qlParser.OBJECT:
	        case n1qlParser.REPLACE:
	        case n1qlParser.SELF:
	        case n1qlParser.SOME:
	        case n1qlParser.SYSTEM:
	        case n1qlParser.TRUE:
	        case n1qlParser.IDENT_ICASE:
	        case n1qlParser.IDENT:
	        case n1qlParser.NAMED_PARAM:
	        case n1qlParser.POSITIONAL_PARAM:
	        case n1qlParser.NEXT_PARAM:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2341;
	            this.members(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	members(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new MembersContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 402;
	    this.enterRecursionRule(localctx, 402, n1qlParser.RULE_members, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2345;
	        this.member();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2352;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new MembersContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_members);
	                this.state = 2347;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2348;
	                this.match(n1qlParser.COMMA);
	                this.state = 2349;
	                this.member(); 
	            }
	            this.state = 2354;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	member() {
	    let localctx = new MemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, n1qlParser.RULE_member);
	    try {
	        this.state = 2360;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2355;
	            this.expr(0);
	            this.state = 2356;
	            this.match(n1qlParser.COLON);
	            this.state = 2357;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2359;
	            this.expr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array() {
	    let localctx = new ArrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, n1qlParser.RULE_array);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2362;
	        this.match(n1qlParser.LBRACKET);
	        this.state = 2363;
	        this.opt_exprs();
	        this.state = 2364;
	        this.match(n1qlParser.RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_exprs() {
	    let localctx = new Opt_exprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, n1qlParser.RULE_opt_exprs);
	    try {
	        this.state = 2368;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.RPAREN:
	        case n1qlParser.RBRACKET:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.STR:
	        case n1qlParser.INT:
	        case n1qlParser.NUM:
	        case n1qlParser.MINUS:
	        case n1qlParser.LPAREN:
	        case n1qlParser.LBRACE:
	        case n1qlParser.LBRACKET:
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.ANY:
	        case n1qlParser.ARRAY:
	        case n1qlParser.CASE:
	        case n1qlParser.CORRELATED:
	        case n1qlParser.COVER:
	        case n1qlParser.EVERY:
	        case n1qlParser.EXISTS:
	        case n1qlParser.FALSE:
	        case n1qlParser.FIRST:
	        case n1qlParser.MISSING:
	        case n1qlParser.NOT:
	        case n1qlParser.NTH_VALUE:
	        case n1qlParser.NULL:
	        case n1qlParser.OBJECT:
	        case n1qlParser.REPLACE:
	        case n1qlParser.SELF:
	        case n1qlParser.SOME:
	        case n1qlParser.SYSTEM:
	        case n1qlParser.TRUE:
	        case n1qlParser.IDENT_ICASE:
	        case n1qlParser.IDENT:
	        case n1qlParser.NAMED_PARAM:
	        case n1qlParser.POSITIONAL_PARAM:
	        case n1qlParser.NEXT_PARAM:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2367;
	            this.exprs(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	exprs(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 410;
	    this.enterRecursionRule(localctx, 410, n1qlParser.RULE_exprs, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2371;
	        this.expr(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2378;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,131,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ExprsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_exprs);
	                this.state = 2373;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2374;
	                this.match(n1qlParser.COMMA);
	                this.state = 2375;
	                this.expr(0); 
	            }
	            this.state = 2380;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,131,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	param_expr() {
	    let localctx = new Param_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, n1qlParser.RULE_param_expr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2381;
	        _la = this._input.LA(1);
	        if(!(((((_la - 239)) & ~0x1f) == 0 && ((1 << (_la - 239)) & ((1 << (n1qlParser.NAMED_PARAM - 239)) | (1 << (n1qlParser.POSITIONAL_PARAM - 239)) | (1 << (n1qlParser.NEXT_PARAM - 239)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_expr() {
	    let localctx = new Case_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, n1qlParser.RULE_case_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2383;
	        this.match(n1qlParser.CASE);
	        this.state = 2384;
	        this.simple_or_searched_case();
	        this.state = 2385;
	        this.match(n1qlParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_or_searched_case() {
	    let localctx = new Simple_or_searched_caseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, n1qlParser.RULE_simple_or_searched_case);
	    try {
	        this.state = 2389;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.STR:
	        case n1qlParser.INT:
	        case n1qlParser.NUM:
	        case n1qlParser.MINUS:
	        case n1qlParser.LPAREN:
	        case n1qlParser.LBRACE:
	        case n1qlParser.LBRACKET:
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.ANY:
	        case n1qlParser.ARRAY:
	        case n1qlParser.CASE:
	        case n1qlParser.CORRELATED:
	        case n1qlParser.COVER:
	        case n1qlParser.EVERY:
	        case n1qlParser.EXISTS:
	        case n1qlParser.FALSE:
	        case n1qlParser.FIRST:
	        case n1qlParser.MISSING:
	        case n1qlParser.NOT:
	        case n1qlParser.NTH_VALUE:
	        case n1qlParser.NULL:
	        case n1qlParser.OBJECT:
	        case n1qlParser.REPLACE:
	        case n1qlParser.SELF:
	        case n1qlParser.SOME:
	        case n1qlParser.SYSTEM:
	        case n1qlParser.TRUE:
	        case n1qlParser.IDENT_ICASE:
	        case n1qlParser.IDENT:
	        case n1qlParser.NAMED_PARAM:
	        case n1qlParser.POSITIONAL_PARAM:
	        case n1qlParser.NEXT_PARAM:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2387;
	            this.simple_case();
	            break;
	        case n1qlParser.WHEN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2388;
	            this.searched_case();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_case() {
	    let localctx = new Simple_caseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, n1qlParser.RULE_simple_case);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2391;
	        this.expr(0);
	        this.state = 2392;
	        this.when_thens(0);
	        this.state = 2393;
	        this.opt_else();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	when_thens(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new When_thensContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 420;
	    this.enterRecursionRule(localctx, 420, n1qlParser.RULE_when_thens, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2396;
	        this.match(n1qlParser.WHEN);
	        this.state = 2397;
	        this.expr(0);
	        this.state = 2398;
	        this.match(n1qlParser.THEN);
	        this.state = 2399;
	        this.expr(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2409;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,133,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new When_thensContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_when_thens);
	                this.state = 2401;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2402;
	                this.match(n1qlParser.WHEN);
	                this.state = 2403;
	                this.expr(0);
	                this.state = 2404;
	                this.match(n1qlParser.THEN);
	                this.state = 2405;
	                this.expr(0); 
	            }
	            this.state = 2411;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,133,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	searched_case() {
	    let localctx = new Searched_caseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, n1qlParser.RULE_searched_case);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2412;
	        this.when_thens(0);
	        this.state = 2413;
	        this.opt_else();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_else() {
	    let localctx = new Opt_elseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, n1qlParser.RULE_opt_else);
	    try {
	        this.state = 2418;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.END:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.ELSE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2416;
	            this.match(n1qlParser.ELSE);
	            this.state = 2417;
	            this.expr(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_expr() {
	    let localctx = new Function_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, n1qlParser.RULE_function_expr);
	    try {
	        this.state = 2456;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2420;
	            this.match(n1qlParser.NTH_VALUE);
	            this.state = 2421;
	            this.match(n1qlParser.LPAREN);
	            this.state = 2422;
	            this.exprs(0);
	            this.state = 2423;
	            this.match(n1qlParser.RPAREN);
	            this.state = 2424;
	            this.opt_from_first_last();
	            this.state = 2425;
	            this.opt_nulls_treatment();
	            this.state = 2426;
	            this.window_function_details();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2428;
	            this.function_name();
	            this.state = 2429;
	            this.match(n1qlParser.LPAREN);
	            this.state = 2430;
	            this.opt_exprs();
	            this.state = 2431;
	            this.match(n1qlParser.RPAREN);
	            this.state = 2432;
	            this.opt_filter();
	            this.state = 2433;
	            this.opt_nulls_treatment();
	            this.state = 2434;
	            this.opt_window_function();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2436;
	            this.function_name();
	            this.state = 2437;
	            this.match(n1qlParser.LPAREN);
	            this.state = 2438;
	            this.agg_quantifier();
	            this.state = 2439;
	            this.expr(0);
	            this.state = 2440;
	            this.match(n1qlParser.RPAREN);
	            this.state = 2441;
	            this.opt_filter();
	            this.state = 2442;
	            this.opt_window_function();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2444;
	            this.function_name();
	            this.state = 2445;
	            this.match(n1qlParser.LPAREN);
	            this.state = 2446;
	            this.match(n1qlParser.STAR);
	            this.state = 2447;
	            this.match(n1qlParser.RPAREN);
	            this.state = 2448;
	            this.opt_filter();
	            this.state = 2449;
	            this.opt_window_function();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2451;
	            this.long_func_name();
	            this.state = 2452;
	            this.match(n1qlParser.LPAREN);
	            this.state = 2453;
	            this.opt_exprs();
	            this.state = 2454;
	            this.match(n1qlParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_name() {
	    let localctx = new Function_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, n1qlParser.RULE_function_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2458;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.REPLACE || _la===n1qlParser.IDENT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection_expr() {
	    let localctx = new Collection_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, n1qlParser.RULE_collection_expr);
	    try {
	        this.state = 2462;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.ANY:
	        case n1qlParser.EVERY:
	        case n1qlParser.SOME:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2460;
	            this.collection_cond();
	            break;
	        case n1qlParser.ARRAY:
	        case n1qlParser.FIRST:
	        case n1qlParser.OBJECT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2461;
	            this.collection_xform();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection_cond() {
	    let localctx = new Collection_condContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, n1qlParser.RULE_collection_cond);
	    try {
	        this.state = 2493;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2464;
	            this.match(n1qlParser.ANY);
	            this.state = 2465;
	            this.coll_bindings(0);
	            this.state = 2466;
	            this.satisfies();
	            this.state = 2467;
	            this.match(n1qlParser.END);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2469;
	            this.match(n1qlParser.SOME);
	            this.state = 2470;
	            this.coll_bindings(0);
	            this.state = 2471;
	            this.satisfies();
	            this.state = 2472;
	            this.match(n1qlParser.END);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2474;
	            this.match(n1qlParser.EVERY);
	            this.state = 2475;
	            this.coll_bindings(0);
	            this.state = 2476;
	            this.satisfies();
	            this.state = 2477;
	            this.match(n1qlParser.END);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2479;
	            this.match(n1qlParser.ANY);
	            this.state = 2480;
	            this.match(n1qlParser.AND);
	            this.state = 2481;
	            this.match(n1qlParser.EVERY);
	            this.state = 2482;
	            this.coll_bindings(0);
	            this.state = 2483;
	            this.satisfies();
	            this.state = 2484;
	            this.match(n1qlParser.END);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2486;
	            this.match(n1qlParser.SOME);
	            this.state = 2487;
	            this.match(n1qlParser.AND);
	            this.state = 2488;
	            this.match(n1qlParser.EVERY);
	            this.state = 2489;
	            this.coll_bindings(0);
	            this.state = 2490;
	            this.satisfies();
	            this.state = 2491;
	            this.match(n1qlParser.END);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	coll_bindings(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Coll_bindingsContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 434;
	    this.enterRecursionRule(localctx, 434, n1qlParser.RULE_coll_bindings, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2496;
	        this.coll_binding();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2503;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,138,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Coll_bindingsContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_coll_bindings);
	                this.state = 2498;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2499;
	                this.match(n1qlParser.COMMA);
	                this.state = 2500;
	                this.coll_binding(); 
	            }
	            this.state = 2505;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,138,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	coll_binding() {
	    let localctx = new Coll_bindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, n1qlParser.RULE_coll_binding);
	    try {
	        this.state = 2526;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2506;
	            this.variable();
	            this.state = 2507;
	            this.match(n1qlParser.IN);
	            this.state = 2508;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2510;
	            this.variable();
	            this.state = 2511;
	            this.match(n1qlParser.WITHIN);
	            this.state = 2512;
	            this.expr(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2514;
	            this.variable();
	            this.state = 2515;
	            this.match(n1qlParser.COLON);
	            this.state = 2516;
	            this.variable();
	            this.state = 2517;
	            this.match(n1qlParser.IN);
	            this.state = 2518;
	            this.expr(0);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2520;
	            this.variable();
	            this.state = 2521;
	            this.match(n1qlParser.COLON);
	            this.state = 2522;
	            this.variable();
	            this.state = 2523;
	            this.match(n1qlParser.WITHIN);
	            this.state = 2524;
	            this.expr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	satisfies() {
	    let localctx = new SatisfiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, n1qlParser.RULE_satisfies);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2528;
	        this.match(n1qlParser.SATISFIES);
	        this.state = 2529;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection_xform() {
	    let localctx = new Collection_xformContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, n1qlParser.RULE_collection_xform);
	    try {
	        this.state = 2554;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.ARRAY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2531;
	            this.match(n1qlParser.ARRAY);
	            this.state = 2532;
	            this.expr(0);
	            this.state = 2533;
	            this.match(n1qlParser.FOR);
	            this.state = 2534;
	            this.coll_bindings(0);
	            this.state = 2535;
	            this.opt_when();
	            this.state = 2536;
	            this.match(n1qlParser.END);
	            break;
	        case n1qlParser.FIRST:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2538;
	            this.match(n1qlParser.FIRST);
	            this.state = 2539;
	            this.expr(0);
	            this.state = 2540;
	            this.match(n1qlParser.FOR);
	            this.state = 2541;
	            this.coll_bindings(0);
	            this.state = 2542;
	            this.opt_when();
	            this.state = 2543;
	            this.match(n1qlParser.END);
	            break;
	        case n1qlParser.OBJECT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2545;
	            this.match(n1qlParser.OBJECT);
	            this.state = 2546;
	            this.expr(0);
	            this.state = 2547;
	            this.match(n1qlParser.COLON);
	            this.state = 2548;
	            this.expr(0);
	            this.state = 2549;
	            this.match(n1qlParser.FOR);
	            this.state = 2550;
	            this.coll_bindings(0);
	            this.state = 2551;
	            this.opt_when();
	            this.state = 2552;
	            this.match(n1qlParser.END);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paren_expr() {
	    let localctx = new Paren_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, n1qlParser.RULE_paren_expr);
	    try {
	        this.state = 2565;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2556;
	            this.match(n1qlParser.LPAREN);
	            this.state = 2557;
	            this.expr(0);
	            this.state = 2558;
	            this.match(n1qlParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2560;
	            this.match(n1qlParser.LPAREN);
	            this.state = 2561;
	            this.all_expr();
	            this.state = 2562;
	            this.match(n1qlParser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2564;
	            this.subquery_expr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subquery_expr() {
	    let localctx = new Subquery_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, n1qlParser.RULE_subquery_expr);
	    try {
	        this.state = 2576;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.CORRELATED:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2567;
	            this.match(n1qlParser.CORRELATED);
	            this.state = 2568;
	            this.match(n1qlParser.LPAREN);
	            this.state = 2569;
	            this.fullselect();
	            this.state = 2570;
	            this.match(n1qlParser.RPAREN);
	            break;
	        case n1qlParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2572;
	            this.match(n1qlParser.LPAREN);
	            this.state = 2573;
	            this.fullselect();
	            this.state = 2574;
	            this.match(n1qlParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_input() {
	    let localctx = new Expr_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, n1qlParser.RULE_expr_input);
	    try {
	        this.state = 2580;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.STR:
	        case n1qlParser.INT:
	        case n1qlParser.NUM:
	        case n1qlParser.MINUS:
	        case n1qlParser.LPAREN:
	        case n1qlParser.LBRACE:
	        case n1qlParser.LBRACKET:
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.ANY:
	        case n1qlParser.ARRAY:
	        case n1qlParser.CASE:
	        case n1qlParser.CORRELATED:
	        case n1qlParser.COVER:
	        case n1qlParser.EVERY:
	        case n1qlParser.EXISTS:
	        case n1qlParser.FALSE:
	        case n1qlParser.FIRST:
	        case n1qlParser.MISSING:
	        case n1qlParser.NOT:
	        case n1qlParser.NTH_VALUE:
	        case n1qlParser.NULL:
	        case n1qlParser.OBJECT:
	        case n1qlParser.REPLACE:
	        case n1qlParser.SELF:
	        case n1qlParser.SOME:
	        case n1qlParser.SYSTEM:
	        case n1qlParser.TRUE:
	        case n1qlParser.IDENT_ICASE:
	        case n1qlParser.IDENT:
	        case n1qlParser.NAMED_PARAM:
	        case n1qlParser.POSITIONAL_PARAM:
	        case n1qlParser.NEXT_PARAM:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2578;
	            this.expr(0);
	            break;
	        case n1qlParser.ALL:
	        case n1qlParser.DISTINCT:
	        case n1qlParser.EACH:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2579;
	            this.all_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	all_expr() {
	    let localctx = new All_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, n1qlParser.RULE_all_expr);
	    try {
	        this.state = 2591;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2582;
	            this.all();
	            this.state = 2583;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2585;
	            this.all();
	            this.state = 2586;
	            this.match(n1qlParser.DISTINCT);
	            this.state = 2587;
	            this.expr(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2589;
	            this.match(n1qlParser.DISTINCT);
	            this.state = 2590;
	            this.expr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_window_clause() {
	    let localctx = new Opt_window_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, n1qlParser.RULE_opt_window_clause);
	    try {
	        this.state = 2596;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2594;
	            this.match(n1qlParser.WINDOW);
	            this.state = 2595;
	            this.window_list(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	window_list(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Window_listContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 452;
	    this.enterRecursionRule(localctx, 452, n1qlParser.RULE_window_list, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2599;
	        this.window_term();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2606;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Window_listContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, n1qlParser.RULE_window_list);
	                this.state = 2601;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2602;
	                this.match(n1qlParser.COMMA);
	                this.state = 2603;
	                this.window_term(); 
	            }
	            this.state = 2608;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	window_term() {
	    let localctx = new Window_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, n1qlParser.RULE_window_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2609;
	        this.match(n1qlParser.IDENT);
	        this.state = 2610;
	        this.match(n1qlParser.AS);
	        this.state = 2611;
	        this.window_specification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_specification() {
	    let localctx = new Window_specificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, n1qlParser.RULE_window_specification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2613;
	        this.match(n1qlParser.LPAREN);
	        this.state = 2614;
	        this.opt_window_name();
	        this.state = 2615;
	        this.opt_window_partition();
	        this.state = 2616;
	        this.opt_order_by();
	        this.state = 2617;
	        this.opt_window_frame();
	        this.state = 2618;
	        this.match(n1qlParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_window_name() {
	    let localctx = new Opt_window_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, n1qlParser.RULE_opt_window_name);
	    try {
	        this.state = 2622;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.RPAREN:
	        case n1qlParser.GROUPS:
	        case n1qlParser.ORDER:
	        case n1qlParser.PARTITION:
	        case n1qlParser.RANGE:
	        case n1qlParser.ROWS:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.IDENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2621;
	            this.match(n1qlParser.IDENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_window_partition() {
	    let localctx = new Opt_window_partitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, n1qlParser.RULE_opt_window_partition);
	    try {
	        this.state = 2628;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.RPAREN:
	        case n1qlParser.GROUPS:
	        case n1qlParser.ORDER:
	        case n1qlParser.RANGE:
	        case n1qlParser.ROWS:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.PARTITION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2625;
	            this.match(n1qlParser.PARTITION);
	            this.state = 2626;
	            this.match(n1qlParser.BY);
	            this.state = 2627;
	            this.exprs(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_window_frame() {
	    let localctx = new Opt_window_frameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, n1qlParser.RULE_opt_window_frame);
	    try {
	        this.state = 2635;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.RPAREN:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.GROUPS:
	        case n1qlParser.RANGE:
	        case n1qlParser.ROWS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2631;
	            this.window_frame_modifier();
	            this.state = 2632;
	            this.window_frame_extents();
	            this.state = 2633;
	            this.opt_window_frame_exclusion();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_modifier() {
	    let localctx = new Window_frame_modifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, n1qlParser.RULE_window_frame_modifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2637;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.GROUPS || _la===n1qlParser.RANGE || _la===n1qlParser.ROWS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_window_frame_exclusion() {
	    let localctx = new Opt_window_frame_exclusionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, n1qlParser.RULE_opt_window_frame_exclusion);
	    try {
	        this.state = 2650;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2640;
	            this.match(n1qlParser.EXCLUDE);
	            this.state = 2641;
	            this.match(n1qlParser.NO);
	            this.state = 2642;
	            this.match(n1qlParser.OTHERS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2643;
	            this.match(n1qlParser.EXCLUDE);
	            this.state = 2644;
	            this.match(n1qlParser.CURRENT);
	            this.state = 2645;
	            this.match(n1qlParser.ROW);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2646;
	            this.match(n1qlParser.EXCLUDE);
	            this.state = 2647;
	            this.match(n1qlParser.TIES);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2648;
	            this.match(n1qlParser.EXCLUDE);
	            this.state = 2649;
	            this.match(n1qlParser.GROUP);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_extents() {
	    let localctx = new Window_frame_extentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, n1qlParser.RULE_window_frame_extents);
	    try {
	        this.state = 2658;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.STR:
	        case n1qlParser.INT:
	        case n1qlParser.NUM:
	        case n1qlParser.MINUS:
	        case n1qlParser.LPAREN:
	        case n1qlParser.LBRACE:
	        case n1qlParser.LBRACKET:
	        case n1qlParser.NAMESPACE_ID:
	        case n1qlParser.ANY:
	        case n1qlParser.ARRAY:
	        case n1qlParser.CASE:
	        case n1qlParser.CORRELATED:
	        case n1qlParser.COVER:
	        case n1qlParser.CURRENT:
	        case n1qlParser.EVERY:
	        case n1qlParser.EXISTS:
	        case n1qlParser.FALSE:
	        case n1qlParser.FIRST:
	        case n1qlParser.MISSING:
	        case n1qlParser.NOT:
	        case n1qlParser.NTH_VALUE:
	        case n1qlParser.NULL:
	        case n1qlParser.OBJECT:
	        case n1qlParser.REPLACE:
	        case n1qlParser.SELF:
	        case n1qlParser.SOME:
	        case n1qlParser.SYSTEM:
	        case n1qlParser.TRUE:
	        case n1qlParser.UNBOUNDED:
	        case n1qlParser.IDENT_ICASE:
	        case n1qlParser.IDENT:
	        case n1qlParser.NAMED_PARAM:
	        case n1qlParser.POSITIONAL_PARAM:
	        case n1qlParser.NEXT_PARAM:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2652;
	            this.window_frame_extent();
	            break;
	        case n1qlParser.BETWEEN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2653;
	            this.match(n1qlParser.BETWEEN);
	            this.state = 2654;
	            this.window_frame_extent();
	            this.state = 2655;
	            this.match(n1qlParser.AND);
	            this.state = 2656;
	            this.window_frame_extent();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_extent() {
	    let localctx = new Window_frame_extentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, n1qlParser.RULE_window_frame_extent);
	    try {
	        this.state = 2669;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2660;
	            this.match(n1qlParser.UNBOUNDED);
	            this.state = 2661;
	            this.match(n1qlParser.PRECEDING);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2662;
	            this.match(n1qlParser.UNBOUNDED);
	            this.state = 2663;
	            this.match(n1qlParser.FOLLOWING);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2664;
	            this.match(n1qlParser.CURRENT);
	            this.state = 2665;
	            this.match(n1qlParser.ROW);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2666;
	            this.expr(0);
	            this.state = 2667;
	            this.window_frame_valexpr_modifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_frame_valexpr_modifier() {
	    let localctx = new Window_frame_valexpr_modifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, n1qlParser.RULE_window_frame_valexpr_modifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2671;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.FOLLOWING || _la===n1qlParser.PRECEDING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_nulls_treatment() {
	    let localctx = new Opt_nulls_treatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, n1qlParser.RULE_opt_nulls_treatment);
	    try {
	        this.state = 2675;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2674;
	            this.nulls_treatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nulls_treatment() {
	    let localctx = new Nulls_treatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, n1qlParser.RULE_nulls_treatment);
	    try {
	        this.state = 2681;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.RESPECT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2677;
	            this.match(n1qlParser.RESPECT);
	            this.state = 2678;
	            this.match(n1qlParser.NULLS);
	            break;
	        case n1qlParser.IGNORE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2679;
	            this.match(n1qlParser.IGNORE);
	            this.state = 2680;
	            this.match(n1qlParser.NULLS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_from_first_last() {
	    let localctx = new Opt_from_first_lastContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, n1qlParser.RULE_opt_from_first_last);
	    try {
	        this.state = 2686;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case n1qlParser.IGNORE:
	        case n1qlParser.OVER:
	        case n1qlParser.RESPECT:
	            this.enterOuterAlt(localctx, 1);

	            break;
	        case n1qlParser.FROM:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2684;
	            this.match(n1qlParser.FROM);
	            this.state = 2685;
	            this.first_last();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	agg_quantifier() {
	    let localctx = new Agg_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, n1qlParser.RULE_agg_quantifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2688;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.ALL || _la===n1qlParser.DISTINCT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_filter() {
	    let localctx = new Opt_filterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, n1qlParser.RULE_opt_filter);
	    try {
	        this.state = 2696;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2691;
	            this.match(n1qlParser.FILTER);
	            this.state = 2692;
	            this.match(n1qlParser.LPAREN);
	            this.state = 2693;
	            this.where();
	            this.state = 2694;
	            this.match(n1qlParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_window_function() {
	    let localctx = new Opt_window_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, n1qlParser.RULE_opt_window_function);
	    try {
	        this.state = 2700;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2699;
	            this.window_function_details();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	window_function_details() {
	    let localctx = new Window_function_detailsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, n1qlParser.RULE_window_function_details);
	    try {
	        this.state = 2706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2702;
	            this.match(n1qlParser.OVER);
	            this.state = 2703;
	            this.match(n1qlParser.IDENT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2704;
	            this.match(n1qlParser.OVER);
	            this.state = 2705;
	            this.window_specification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_transaction() {
	    let localctx = new Start_transactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, n1qlParser.RULE_start_transaction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2708;
	        this.start_or_begin();
	        this.state = 2709;
	        this.transaction();
	        this.state = 2710;
	        this.opt_isolation_level();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commit_transaction() {
	    let localctx = new Commit_transactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, n1qlParser.RULE_commit_transaction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2712;
	        this.match(n1qlParser.COMMIT);
	        this.state = 2713;
	        this.opt_transaction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollback_transaction() {
	    let localctx = new Rollback_transactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, n1qlParser.RULE_rollback_transaction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2715;
	        this.match(n1qlParser.ROLLBACK);
	        this.state = 2716;
	        this.opt_transaction();
	        this.state = 2717;
	        this.opt_savepoint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	start_or_begin() {
	    let localctx = new Start_or_beginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, n1qlParser.RULE_start_or_begin);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2719;
	        _la = this._input.LA(1);
	        if(!(_la===n1qlParser.BEGIN || _la===n1qlParser.START)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_transaction() {
	    let localctx = new Opt_transactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, n1qlParser.RULE_opt_transaction);
	    try {
	        this.state = 2723;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2722;
	            this.transaction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transaction() {
	    let localctx = new TransactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, n1qlParser.RULE_transaction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2725;
	        _la = this._input.LA(1);
	        if(!(((((_la - 206)) & ~0x1f) == 0 && ((1 << (_la - 206)) & ((1 << (n1qlParser.TRAN - 206)) | (1 << (n1qlParser.TRANSACTION - 206)) | (1 << (n1qlParser.WORK - 206)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_savepoint() {
	    let localctx = new Opt_savepointContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, n1qlParser.RULE_opt_savepoint);
	    try {
	        this.state = 2731;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2728;
	            this.match(n1qlParser.TO);
	            this.state = 2729;
	            this.match(n1qlParser.SAVEPOINT);
	            this.state = 2730;
	            this.savepoint_name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepoint_name() {
	    let localctx = new Savepoint_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, n1qlParser.RULE_savepoint_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2733;
	        this.match(n1qlParser.IDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opt_isolation_level() {
	    let localctx = new Opt_isolation_levelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, n1qlParser.RULE_opt_isolation_level);
	    try {
	        this.state = 2737;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2736;
	            this.isolation_level();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isolation_level() {
	    let localctx = new Isolation_levelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, n1qlParser.RULE_isolation_level);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2739;
	        this.match(n1qlParser.ISOLATION);
	        this.state = 2740;
	        this.match(n1qlParser.LEVEL);
	        this.state = 2741;
	        this.isolation_val();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isolation_val() {
	    let localctx = new Isolation_valContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, n1qlParser.RULE_isolation_val);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2743;
	        this.match(n1qlParser.READ);
	        this.state = 2744;
	        this.match(n1qlParser.COMMITTED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_transaction_isolation() {
	    let localctx = new Set_transaction_isolationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, n1qlParser.RULE_set_transaction_isolation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2746;
	        this.match(n1qlParser.SET);
	        this.state = 2747;
	        this.match(n1qlParser.TRANSACTION);
	        this.state = 2748;
	        this.isolation_level();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepoint() {
	    let localctx = new SavepointContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, n1qlParser.RULE_savepoint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2750;
	        this.match(n1qlParser.SAVEPOINT);
	        this.state = 2751;
	        this.savepoint_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

n1qlParser.EOF = antlr4.Token.EOF;
n1qlParser.STR = 1;
n1qlParser.INT = 2;
n1qlParser.NUM = 3;
n1qlParser.BLOCK_COMMENT = 4;
n1qlParser.LINE_COMMENT = 5;
n1qlParser.WHITESPACE = 6;
n1qlParser.DOT = 7;
n1qlParser.PLUS = 8;
n1qlParser.MINUS = 9;
n1qlParser.STAR = 10;
n1qlParser.DIV = 11;
n1qlParser.MOD = 12;
n1qlParser.DEQ = 13;
n1qlParser.EQ = 14;
n1qlParser.NE = 15;
n1qlParser.LT = 16;
n1qlParser.LE = 17;
n1qlParser.GT = 18;
n1qlParser.GE = 19;
n1qlParser.CONCAT = 20;
n1qlParser.LPAREN = 21;
n1qlParser.RPAREN = 22;
n1qlParser.LBRACE = 23;
n1qlParser.RBRACE = 24;
n1qlParser.COMMA = 25;
n1qlParser.COLON = 26;
n1qlParser.LBRACKET = 27;
n1qlParser.RBRACKET = 28;
n1qlParser.RBRACKET_ICASE = 29;
n1qlParser.SEMI = 30;
n1qlParser.NOT_A_TOKEN = 31;
n1qlParser.NAMESPACE_ID = 32;
n1qlParser.ADVISE = 33;
n1qlParser.ALL = 34;
n1qlParser.ALTER = 35;
n1qlParser.ANALYZE = 36;
n1qlParser.AND = 37;
n1qlParser.ANY = 38;
n1qlParser.ARRAY = 39;
n1qlParser.AS = 40;
n1qlParser.ASC = 41;
n1qlParser.AT = 42;
n1qlParser.BEGIN = 43;
n1qlParser.BETWEEN = 44;
n1qlParser.BINARY = 45;
n1qlParser.BOOLEAN = 46;
n1qlParser.BREAK = 47;
n1qlParser.BUCKET = 48;
n1qlParser.BUILD = 49;
n1qlParser.BY = 50;
n1qlParser.CALL = 51;
n1qlParser.CASE = 52;
n1qlParser.CAST = 53;
n1qlParser.CLUSTER = 54;
n1qlParser.COLLATE = 55;
n1qlParser.COLLECTION = 56;
n1qlParser.COMMIT = 57;
n1qlParser.COMMITTED = 58;
n1qlParser.CONNECT = 59;
n1qlParser.CONTINUE = 60;
n1qlParser.CORRELATED = 61;
n1qlParser.COVER = 62;
n1qlParser.CREATE = 63;
n1qlParser.CURRENT = 64;
n1qlParser.DATABASE = 65;
n1qlParser.DATASET = 66;
n1qlParser.DATASTORE = 67;
n1qlParser.DECLARE = 68;
n1qlParser.DECREMENT = 69;
n1qlParser.DELETE_ = 70;
n1qlParser.DERIVED = 71;
n1qlParser.DESC = 72;
n1qlParser.DESCRIBE = 73;
n1qlParser.DISTINCT = 74;
n1qlParser.DO = 75;
n1qlParser.DROP = 76;
n1qlParser.EACH = 77;
n1qlParser.ELEMENT = 78;
n1qlParser.ELSE = 79;
n1qlParser.END = 80;
n1qlParser.EVERY = 81;
n1qlParser.EXCEPT = 82;
n1qlParser.EXCLUDE = 83;
n1qlParser.EXECUTE = 84;
n1qlParser.EXISTS = 85;
n1qlParser.EXPLAIN = 86;
n1qlParser.FALSE = 87;
n1qlParser.FETCH = 88;
n1qlParser.FILTER = 89;
n1qlParser.FIRST = 90;
n1qlParser.FLATTEN = 91;
n1qlParser.FLUSH = 92;
n1qlParser.FOLLOWING = 93;
n1qlParser.FOR = 94;
n1qlParser.FORCE = 95;
n1qlParser.FROM = 96;
n1qlParser.FTS = 97;
n1qlParser.FUNCTION = 98;
n1qlParser.GOLANG = 99;
n1qlParser.GRANT = 100;
n1qlParser.GROUP = 101;
n1qlParser.GROUPS = 102;
n1qlParser.GSI = 103;
n1qlParser.HASH = 104;
n1qlParser.HAVING = 105;
n1qlParser.IF = 106;
n1qlParser.IGNORE = 107;
n1qlParser.ILIKE = 108;
n1qlParser.IN = 109;
n1qlParser.INCLUDE = 110;
n1qlParser.INCREMENT = 111;
n1qlParser.INDEX = 112;
n1qlParser.INFER = 113;
n1qlParser.INLINE = 114;
n1qlParser.INNER = 115;
n1qlParser.INSERT = 116;
n1qlParser.INTERSECT = 117;
n1qlParser.INTO = 118;
n1qlParser.IS = 119;
n1qlParser.ISOLATION = 120;
n1qlParser.JAVASCRIPT = 121;
n1qlParser.JOIN = 122;
n1qlParser.KEY = 123;
n1qlParser.KEYS = 124;
n1qlParser.KEYSPACE = 125;
n1qlParser.KNOWN = 126;
n1qlParser.LANGUAGE = 127;
n1qlParser.LAST = 128;
n1qlParser.LEFT = 129;
n1qlParser.LET_ = 130;
n1qlParser.LETTING = 131;
n1qlParser.LEVEL = 132;
n1qlParser.LIKE = 133;
n1qlParser.LIMIT = 134;
n1qlParser.LSM = 135;
n1qlParser.MAP = 136;
n1qlParser.MAPPING = 137;
n1qlParser.MATCHED = 138;
n1qlParser.MATERIALIZED = 139;
n1qlParser.MERGE = 140;
n1qlParser.MISSING = 141;
n1qlParser.NAMESPACE = 142;
n1qlParser.NEST = 143;
n1qlParser.NL = 144;
n1qlParser.NO = 145;
n1qlParser.NOT = 146;
n1qlParser.NTH_VALUE = 147;
n1qlParser.NULL = 148;
n1qlParser.NULLS = 149;
n1qlParser.NUMBER = 150;
n1qlParser.OBJECT = 151;
n1qlParser.OFFSET = 152;
n1qlParser.ON = 153;
n1qlParser.OPTION = 154;
n1qlParser.OPTIONS = 155;
n1qlParser.OR = 156;
n1qlParser.ORDER = 157;
n1qlParser.OTHERS = 158;
n1qlParser.OUTER = 159;
n1qlParser.OVER = 160;
n1qlParser.PARSE = 161;
n1qlParser.PARTITION = 162;
n1qlParser.PASSWORD = 163;
n1qlParser.PATH = 164;
n1qlParser.POOL = 165;
n1qlParser.PRECEDING = 166;
n1qlParser.PREPARE = 167;
n1qlParser.PRIMARY = 168;
n1qlParser.PRIVATE = 169;
n1qlParser.PRIVILEGE = 170;
n1qlParser.PROCEDURE = 171;
n1qlParser.PROBE = 172;
n1qlParser.PUBLIC = 173;
n1qlParser.RANGE = 174;
n1qlParser.RAW = 175;
n1qlParser.READ = 176;
n1qlParser.REALM = 177;
n1qlParser.REDUCE = 178;
n1qlParser.RENAME = 179;
n1qlParser.REPLACE = 180;
n1qlParser.RESPECT = 181;
n1qlParser.RETURN = 182;
n1qlParser.RETURNING = 183;
n1qlParser.REVOKE = 184;
n1qlParser.RIGHT = 185;
n1qlParser.ROLE = 186;
n1qlParser.ROLLBACK = 187;
n1qlParser.ROW = 188;
n1qlParser.ROWS = 189;
n1qlParser.SATISFIES = 190;
n1qlParser.SAVEPOINT = 191;
n1qlParser.SCHEMA = 192;
n1qlParser.SCOPE = 193;
n1qlParser.SELECT = 194;
n1qlParser.SELF = 195;
n1qlParser.SET = 196;
n1qlParser.SHOW = 197;
n1qlParser.SOME = 198;
n1qlParser.START = 199;
n1qlParser.STATISTICS = 200;
n1qlParser.STRING = 201;
n1qlParser.SYSTEM = 202;
n1qlParser.THEN = 203;
n1qlParser.TIES = 204;
n1qlParser.TO = 205;
n1qlParser.TRAN = 206;
n1qlParser.TRANSACTION = 207;
n1qlParser.TRIGGER = 208;
n1qlParser.TRUE = 209;
n1qlParser.TRUNCATE = 210;
n1qlParser.UNBOUNDED = 211;
n1qlParser.UNDER = 212;
n1qlParser.UNION = 213;
n1qlParser.UNIQUE = 214;
n1qlParser.UNKNOWN = 215;
n1qlParser.UNNEST = 216;
n1qlParser.UNSET = 217;
n1qlParser.UPDATE = 218;
n1qlParser.UPSERT = 219;
n1qlParser.USE = 220;
n1qlParser.USER = 221;
n1qlParser.USING = 222;
n1qlParser.VALIDATE = 223;
n1qlParser.VALUE = 224;
n1qlParser.VALUED = 225;
n1qlParser.VALUES = 226;
n1qlParser.VIA = 227;
n1qlParser.VIEW = 228;
n1qlParser.WHEN = 229;
n1qlParser.WHERE = 230;
n1qlParser.WHILE = 231;
n1qlParser.WINDOW = 232;
n1qlParser.WITH = 233;
n1qlParser.WITHIN = 234;
n1qlParser.WORK = 235;
n1qlParser.XOR = 236;
n1qlParser.IDENT_ICASE = 237;
n1qlParser.IDENT = 238;
n1qlParser.NAMED_PARAM = 239;
n1qlParser.POSITIONAL_PARAM = 240;
n1qlParser.NEXT_PARAM = 241;

n1qlParser.RULE_input = 0;
n1qlParser.RULE_opt_trailer = 1;
n1qlParser.RULE_stmt_body = 2;
n1qlParser.RULE_stmt = 3;
n1qlParser.RULE_advise = 4;
n1qlParser.RULE_opt_index = 5;
n1qlParser.RULE_explain = 6;
n1qlParser.RULE_prepare = 7;
n1qlParser.RULE_opt_force = 8;
n1qlParser.RULE_opt_name = 9;
n1qlParser.RULE_from_or_as = 10;
n1qlParser.RULE_execute = 11;
n1qlParser.RULE_execute_using = 12;
n1qlParser.RULE_infer = 13;
n1qlParser.RULE_opt_keyspace_collection = 14;
n1qlParser.RULE_opt_infer_using = 15;
n1qlParser.RULE_opt_infer_ustat_with = 16;
n1qlParser.RULE_infer_ustat_with = 17;
n1qlParser.RULE_select_stmt = 18;
n1qlParser.RULE_dml_stmt = 19;
n1qlParser.RULE_ddl_stmt = 20;
n1qlParser.RULE_role_stmt = 21;
n1qlParser.RULE_index_stmt = 22;
n1qlParser.RULE_scope_stmt = 23;
n1qlParser.RULE_collection_stmt = 24;
n1qlParser.RULE_function_stmt = 25;
n1qlParser.RULE_transaction_stmt = 26;
n1qlParser.RULE_fullselect = 27;
n1qlParser.RULE_select_terms = 28;
n1qlParser.RULE_select_term = 29;
n1qlParser.RULE_subselect = 30;
n1qlParser.RULE_from_select = 31;
n1qlParser.RULE_select_from = 32;
n1qlParser.RULE_select_clause = 33;
n1qlParser.RULE_projection = 34;
n1qlParser.RULE_opt_quantifier = 35;
n1qlParser.RULE_raw = 36;
n1qlParser.RULE_projects = 37;
n1qlParser.RULE_project = 38;
n1qlParser.RULE_opt_as_alias = 39;
n1qlParser.RULE_as_alias = 40;
n1qlParser.RULE_alias = 41;
n1qlParser.RULE_opt_from = 42;
n1qlParser.RULE_from = 43;
n1qlParser.RULE_from_term = 44;
n1qlParser.RULE_simple_from_term = 45;
n1qlParser.RULE_unnest = 46;
n1qlParser.RULE_keyspace_term = 47;
n1qlParser.RULE_keyspace_path = 48;
n1qlParser.RULE_namespace_term = 49;
n1qlParser.RULE_namespace_name = 50;
n1qlParser.RULE_bucket_name = 51;
n1qlParser.RULE_scope_name = 52;
n1qlParser.RULE_keyspace_name = 53;
n1qlParser.RULE_opt_use = 54;
n1qlParser.RULE_use_options = 55;
n1qlParser.RULE_use_keys = 56;
n1qlParser.RULE_use_index = 57;
n1qlParser.RULE_join_hint = 58;
n1qlParser.RULE_opt_primary = 59;
n1qlParser.RULE_index_refs = 60;
n1qlParser.RULE_index_ref = 61;
n1qlParser.RULE_use_hash_option = 62;
n1qlParser.RULE_opt_use_del_upd = 63;
n1qlParser.RULE_opt_join_type = 64;
n1qlParser.RULE_opt_outer = 65;
n1qlParser.RULE_on_keys = 66;
n1qlParser.RULE_on_key = 67;
n1qlParser.RULE_opt_let = 68;
n1qlParser.RULE_let_ = 69;
n1qlParser.RULE_bindings = 70;
n1qlParser.RULE_binding = 71;
n1qlParser.RULE_opt_with = 72;
n1qlParser.RULE_with_list = 73;
n1qlParser.RULE_with_term = 74;
n1qlParser.RULE_opt_where = 75;
n1qlParser.RULE_where = 76;
n1qlParser.RULE_opt_group = 77;
n1qlParser.RULE_group = 78;
n1qlParser.RULE_group_terms = 79;
n1qlParser.RULE_group_term = 80;
n1qlParser.RULE_opt_letting = 81;
n1qlParser.RULE_letting = 82;
n1qlParser.RULE_opt_having = 83;
n1qlParser.RULE_having = 84;
n1qlParser.RULE_opt_order_by = 85;
n1qlParser.RULE_order_by = 86;
n1qlParser.RULE_sort_terms = 87;
n1qlParser.RULE_sort_term = 88;
n1qlParser.RULE_opt_dir = 89;
n1qlParser.RULE_dir = 90;
n1qlParser.RULE_opt_order_nulls = 91;
n1qlParser.RULE_first_last = 92;
n1qlParser.RULE_nulls = 93;
n1qlParser.RULE_opt_limit = 94;
n1qlParser.RULE_limit = 95;
n1qlParser.RULE_opt_offset = 96;
n1qlParser.RULE_offset = 97;
n1qlParser.RULE_insert = 98;
n1qlParser.RULE_simple_keyspace_ref = 99;
n1qlParser.RULE_keyspace_ref = 100;
n1qlParser.RULE_opt_values_header = 101;
n1qlParser.RULE_key = 102;
n1qlParser.RULE_values_list = 103;
n1qlParser.RULE_values = 104;
n1qlParser.RULE_next_values = 105;
n1qlParser.RULE_key_val_expr = 106;
n1qlParser.RULE_key_val_options_expr = 107;
n1qlParser.RULE_opt_returning = 108;
n1qlParser.RULE_returning = 109;
n1qlParser.RULE_returns_ = 110;
n1qlParser.RULE_key_expr_header = 111;
n1qlParser.RULE_value_expr_header = 112;
n1qlParser.RULE_options_expr_header = 113;
n1qlParser.RULE_key_val_options_expr_header = 114;
n1qlParser.RULE_upsert = 115;
n1qlParser.RULE_delete_ = 116;
n1qlParser.RULE_update = 117;
n1qlParser.RULE_set = 118;
n1qlParser.RULE_set_terms = 119;
n1qlParser.RULE_set_term = 120;
n1qlParser.RULE_function_meta_expr = 121;
n1qlParser.RULE_opt_update_for = 122;
n1qlParser.RULE_update_for = 123;
n1qlParser.RULE_update_dimensions = 124;
n1qlParser.RULE_update_dimension = 125;
n1qlParser.RULE_update_binding = 126;
n1qlParser.RULE_variable = 127;
n1qlParser.RULE_opt_when = 128;
n1qlParser.RULE_unset = 129;
n1qlParser.RULE_unset_terms = 130;
n1qlParser.RULE_unset_term = 131;
n1qlParser.RULE_merge = 132;
n1qlParser.RULE_opt_use_merge = 133;
n1qlParser.RULE_opt_key = 134;
n1qlParser.RULE_merge_actions = 135;
n1qlParser.RULE_opt_merge_delete_insert = 136;
n1qlParser.RULE_opt_merge_insert = 137;
n1qlParser.RULE_merge_update = 138;
n1qlParser.RULE_merge_delete = 139;
n1qlParser.RULE_merge_insert = 140;
n1qlParser.RULE_grant_role = 141;
n1qlParser.RULE_role_list = 142;
n1qlParser.RULE_role_name = 143;
n1qlParser.RULE_keyspace_scope_list = 144;
n1qlParser.RULE_keyspace_scope = 145;
n1qlParser.RULE_user_list = 146;
n1qlParser.RULE_user = 147;
n1qlParser.RULE_revoke_role = 148;
n1qlParser.RULE_create_scope = 149;
n1qlParser.RULE_drop_scope = 150;
n1qlParser.RULE_create_collection = 151;
n1qlParser.RULE_drop_collection = 152;
n1qlParser.RULE_flush_collection = 153;
n1qlParser.RULE_flush_or_truncate = 154;
n1qlParser.RULE_create_index = 155;
n1qlParser.RULE_opt_primary_name = 156;
n1qlParser.RULE_index_name = 157;
n1qlParser.RULE_opt_index_name = 158;
n1qlParser.RULE_named_keyspace_ref = 159;
n1qlParser.RULE_simple_named_keyspace_ref = 160;
n1qlParser.RULE_named_scope_ref = 161;
n1qlParser.RULE_index_partition = 162;
n1qlParser.RULE_opt_index_using = 163;
n1qlParser.RULE_index_using = 164;
n1qlParser.RULE_opt_index_with = 165;
n1qlParser.RULE_index_with = 166;
n1qlParser.RULE_index_terms = 167;
n1qlParser.RULE_index_term = 168;
n1qlParser.RULE_index_term_expr = 169;
n1qlParser.RULE_index_expr = 170;
n1qlParser.RULE_all = 171;
n1qlParser.RULE_index_where = 172;
n1qlParser.RULE_opt_ikattr = 173;
n1qlParser.RULE_ikattr = 174;
n1qlParser.RULE_drop_index = 175;
n1qlParser.RULE_alter_index = 176;
n1qlParser.RULE_build_index = 177;
n1qlParser.RULE_create_function = 178;
n1qlParser.RULE_opt_replace = 179;
n1qlParser.RULE_func_name = 180;
n1qlParser.RULE_short_func_name = 181;
n1qlParser.RULE_long_func_name = 182;
n1qlParser.RULE_parm_list = 183;
n1qlParser.RULE_parameter_terms = 184;
n1qlParser.RULE_func_body = 185;
n1qlParser.RULE_drop_function = 186;
n1qlParser.RULE_execute_function = 187;
n1qlParser.RULE_update_statistics = 188;
n1qlParser.RULE_opt_for = 189;
n1qlParser.RULE_update_stat_terms = 190;
n1qlParser.RULE_update_stat_term = 191;
n1qlParser.RULE_path = 192;
n1qlParser.RULE_expr = 193;
n1qlParser.RULE_valued = 194;
n1qlParser.RULE_c_expr = 195;
n1qlParser.RULE_b_expr = 196;
n1qlParser.RULE_literal = 197;
n1qlParser.RULE_construction_expr = 198;
n1qlParser.RULE_object = 199;
n1qlParser.RULE_opt_members = 200;
n1qlParser.RULE_members = 201;
n1qlParser.RULE_member = 202;
n1qlParser.RULE_array = 203;
n1qlParser.RULE_opt_exprs = 204;
n1qlParser.RULE_exprs = 205;
n1qlParser.RULE_param_expr = 206;
n1qlParser.RULE_case_expr = 207;
n1qlParser.RULE_simple_or_searched_case = 208;
n1qlParser.RULE_simple_case = 209;
n1qlParser.RULE_when_thens = 210;
n1qlParser.RULE_searched_case = 211;
n1qlParser.RULE_opt_else = 212;
n1qlParser.RULE_function_expr = 213;
n1qlParser.RULE_function_name = 214;
n1qlParser.RULE_collection_expr = 215;
n1qlParser.RULE_collection_cond = 216;
n1qlParser.RULE_coll_bindings = 217;
n1qlParser.RULE_coll_binding = 218;
n1qlParser.RULE_satisfies = 219;
n1qlParser.RULE_collection_xform = 220;
n1qlParser.RULE_paren_expr = 221;
n1qlParser.RULE_subquery_expr = 222;
n1qlParser.RULE_expr_input = 223;
n1qlParser.RULE_all_expr = 224;
n1qlParser.RULE_opt_window_clause = 225;
n1qlParser.RULE_window_list = 226;
n1qlParser.RULE_window_term = 227;
n1qlParser.RULE_window_specification = 228;
n1qlParser.RULE_opt_window_name = 229;
n1qlParser.RULE_opt_window_partition = 230;
n1qlParser.RULE_opt_window_frame = 231;
n1qlParser.RULE_window_frame_modifier = 232;
n1qlParser.RULE_opt_window_frame_exclusion = 233;
n1qlParser.RULE_window_frame_extents = 234;
n1qlParser.RULE_window_frame_extent = 235;
n1qlParser.RULE_window_frame_valexpr_modifier = 236;
n1qlParser.RULE_opt_nulls_treatment = 237;
n1qlParser.RULE_nulls_treatment = 238;
n1qlParser.RULE_opt_from_first_last = 239;
n1qlParser.RULE_agg_quantifier = 240;
n1qlParser.RULE_opt_filter = 241;
n1qlParser.RULE_opt_window_function = 242;
n1qlParser.RULE_window_function_details = 243;
n1qlParser.RULE_start_transaction = 244;
n1qlParser.RULE_commit_transaction = 245;
n1qlParser.RULE_rollback_transaction = 246;
n1qlParser.RULE_start_or_begin = 247;
n1qlParser.RULE_opt_transaction = 248;
n1qlParser.RULE_transaction = 249;
n1qlParser.RULE_opt_savepoint = 250;
n1qlParser.RULE_savepoint_name = 251;
n1qlParser.RULE_opt_isolation_level = 252;
n1qlParser.RULE_isolation_level = 253;
n1qlParser.RULE_isolation_val = 254;
n1qlParser.RULE_set_transaction_isolation = 255;
n1qlParser.RULE_savepoint = 256;

class InputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_input;
    }

	stmt_body() {
	    return this.getTypedRuleContext(Stmt_bodyContext,0);
	};

	opt_trailer() {
	    return this.getTypedRuleContext(Opt_trailerContext,0);
	};

	expr_input() {
	    return this.getTypedRuleContext(Expr_inputContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterInput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitInput(this);
		}
	}


}



class Opt_trailerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_trailer;
    }

	opt_trailer() {
	    return this.getTypedRuleContext(Opt_trailerContext,0);
	};

	SEMI() {
	    return this.getToken(n1qlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_trailer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_trailer(this);
		}
	}


}



class Stmt_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_stmt_body;
    }

	advise() {
	    return this.getTypedRuleContext(AdviseContext,0);
	};

	explain() {
	    return this.getTypedRuleContext(ExplainContext,0);
	};

	prepare() {
	    return this.getTypedRuleContext(PrepareContext,0);
	};

	execute() {
	    return this.getTypedRuleContext(ExecuteContext,0);
	};

	stmt() {
	    return this.getTypedRuleContext(StmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterStmt_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitStmt_body(this);
		}
	}


}



class StmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_stmt;
    }

	select_stmt() {
	    return this.getTypedRuleContext(Select_stmtContext,0);
	};

	dml_stmt() {
	    return this.getTypedRuleContext(Dml_stmtContext,0);
	};

	ddl_stmt() {
	    return this.getTypedRuleContext(Ddl_stmtContext,0);
	};

	infer() {
	    return this.getTypedRuleContext(InferContext,0);
	};

	update_statistics() {
	    return this.getTypedRuleContext(Update_statisticsContext,0);
	};

	role_stmt() {
	    return this.getTypedRuleContext(Role_stmtContext,0);
	};

	function_stmt() {
	    return this.getTypedRuleContext(Function_stmtContext,0);
	};

	transaction_stmt() {
	    return this.getTypedRuleContext(Transaction_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitStmt(this);
		}
	}


}



class AdviseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_advise;
    }

	ADVISE() {
	    return this.getToken(n1qlParser.ADVISE, 0);
	};

	opt_index() {
	    return this.getTypedRuleContext(Opt_indexContext,0);
	};

	stmt() {
	    return this.getTypedRuleContext(StmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterAdvise(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitAdvise(this);
		}
	}


}



class Opt_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_index;
    }

	INDEX() {
	    return this.getToken(n1qlParser.INDEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_index(this);
		}
	}


}



class ExplainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_explain;
    }

	EXPLAIN() {
	    return this.getToken(n1qlParser.EXPLAIN, 0);
	};

	stmt() {
	    return this.getTypedRuleContext(StmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterExplain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitExplain(this);
		}
	}


}



class PrepareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_prepare;
    }

	PREPARE() {
	    return this.getToken(n1qlParser.PREPARE, 0);
	};

	opt_force() {
	    return this.getTypedRuleContext(Opt_forceContext,0);
	};

	opt_name() {
	    return this.getTypedRuleContext(Opt_nameContext,0);
	};

	stmt() {
	    return this.getTypedRuleContext(StmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterPrepare(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitPrepare(this);
		}
	}


}



class Opt_forceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_force;
    }

	FORCE() {
	    return this.getToken(n1qlParser.FORCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_force(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_force(this);
		}
	}


}



class Opt_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_name;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	from_or_as() {
	    return this.getTypedRuleContext(From_or_asContext,0);
	};

	STR() {
	    return this.getToken(n1qlParser.STR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_name(this);
		}
	}


}



class From_or_asContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_from_or_as;
    }

	FROM() {
	    return this.getToken(n1qlParser.FROM, 0);
	};

	AS() {
	    return this.getToken(n1qlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFrom_or_as(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFrom_or_as(this);
		}
	}


}



class ExecuteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_execute;
    }

	EXECUTE() {
	    return this.getToken(n1qlParser.EXECUTE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	execute_using() {
	    return this.getTypedRuleContext(Execute_usingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterExecute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitExecute(this);
		}
	}


}



class Execute_usingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_execute_using;
    }

	USING() {
	    return this.getToken(n1qlParser.USING, 0);
	};

	construction_expr() {
	    return this.getTypedRuleContext(Construction_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterExecute_using(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitExecute_using(this);
		}
	}


}



class InferContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_infer;
    }

	INFER() {
	    return this.getToken(n1qlParser.INFER, 0);
	};

	opt_keyspace_collection() {
	    return this.getTypedRuleContext(Opt_keyspace_collectionContext,0);
	};

	simple_keyspace_ref() {
	    return this.getTypedRuleContext(Simple_keyspace_refContext,0);
	};

	opt_infer_using() {
	    return this.getTypedRuleContext(Opt_infer_usingContext,0);
	};

	opt_infer_ustat_with() {
	    return this.getTypedRuleContext(Opt_infer_ustat_withContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterInfer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitInfer(this);
		}
	}


}



class Opt_keyspace_collectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_keyspace_collection;
    }

	KEYSPACE() {
	    return this.getToken(n1qlParser.KEYSPACE, 0);
	};

	COLLECTION() {
	    return this.getToken(n1qlParser.COLLECTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_keyspace_collection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_keyspace_collection(this);
		}
	}


}



class Opt_infer_usingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_infer_using;
    }


	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_infer_using(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_infer_using(this);
		}
	}


}



class Opt_infer_ustat_withContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_infer_ustat_with;
    }

	infer_ustat_with() {
	    return this.getTypedRuleContext(Infer_ustat_withContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_infer_ustat_with(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_infer_ustat_with(this);
		}
	}


}



class Infer_ustat_withContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_infer_ustat_with;
    }

	WITH() {
	    return this.getToken(n1qlParser.WITH, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterInfer_ustat_with(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitInfer_ustat_with(this);
		}
	}


}



class Select_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_select_stmt;
    }

	fullselect() {
	    return this.getTypedRuleContext(FullselectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSelect_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSelect_stmt(this);
		}
	}


}



class Dml_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_dml_stmt;
    }

	insert() {
	    return this.getTypedRuleContext(InsertContext,0);
	};

	upsert() {
	    return this.getTypedRuleContext(UpsertContext,0);
	};

	delete_() {
	    return this.getTypedRuleContext(Delete_Context,0);
	};

	update() {
	    return this.getTypedRuleContext(UpdateContext,0);
	};

	merge() {
	    return this.getTypedRuleContext(MergeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterDml_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitDml_stmt(this);
		}
	}


}



class Ddl_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_ddl_stmt;
    }

	index_stmt() {
	    return this.getTypedRuleContext(Index_stmtContext,0);
	};

	scope_stmt() {
	    return this.getTypedRuleContext(Scope_stmtContext,0);
	};

	collection_stmt() {
	    return this.getTypedRuleContext(Collection_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterDdl_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitDdl_stmt(this);
		}
	}


}



class Role_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_role_stmt;
    }

	grant_role() {
	    return this.getTypedRuleContext(Grant_roleContext,0);
	};

	revoke_role() {
	    return this.getTypedRuleContext(Revoke_roleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterRole_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitRole_stmt(this);
		}
	}


}



class Index_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_index_stmt;
    }

	create_index() {
	    return this.getTypedRuleContext(Create_indexContext,0);
	};

	drop_index() {
	    return this.getTypedRuleContext(Drop_indexContext,0);
	};

	alter_index() {
	    return this.getTypedRuleContext(Alter_indexContext,0);
	};

	build_index() {
	    return this.getTypedRuleContext(Build_indexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIndex_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIndex_stmt(this);
		}
	}


}



class Scope_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_scope_stmt;
    }

	create_scope() {
	    return this.getTypedRuleContext(Create_scopeContext,0);
	};

	drop_scope() {
	    return this.getTypedRuleContext(Drop_scopeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterScope_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitScope_stmt(this);
		}
	}


}



class Collection_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_collection_stmt;
    }

	create_collection() {
	    return this.getTypedRuleContext(Create_collectionContext,0);
	};

	drop_collection() {
	    return this.getTypedRuleContext(Drop_collectionContext,0);
	};

	flush_collection() {
	    return this.getTypedRuleContext(Flush_collectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterCollection_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitCollection_stmt(this);
		}
	}


}



class Function_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_function_stmt;
    }

	create_function() {
	    return this.getTypedRuleContext(Create_functionContext,0);
	};

	drop_function() {
	    return this.getTypedRuleContext(Drop_functionContext,0);
	};

	execute_function() {
	    return this.getTypedRuleContext(Execute_functionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFunction_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFunction_stmt(this);
		}
	}


}



class Transaction_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_transaction_stmt;
    }

	start_transaction() {
	    return this.getTypedRuleContext(Start_transactionContext,0);
	};

	commit_transaction() {
	    return this.getTypedRuleContext(Commit_transactionContext,0);
	};

	rollback_transaction() {
	    return this.getTypedRuleContext(Rollback_transactionContext,0);
	};

	savepoint() {
	    return this.getTypedRuleContext(SavepointContext,0);
	};

	set_transaction_isolation() {
	    return this.getTypedRuleContext(Set_transaction_isolationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterTransaction_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitTransaction_stmt(this);
		}
	}


}



class FullselectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_fullselect;
    }

	select_terms() {
	    return this.getTypedRuleContext(Select_termsContext,0);
	};

	opt_order_by() {
	    return this.getTypedRuleContext(Opt_order_byContext,0);
	};

	limit() {
	    return this.getTypedRuleContext(LimitContext,0);
	};

	opt_offset() {
	    return this.getTypedRuleContext(Opt_offsetContext,0);
	};

	offset() {
	    return this.getTypedRuleContext(OffsetContext,0);
	};

	opt_limit() {
	    return this.getTypedRuleContext(Opt_limitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFullselect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFullselect(this);
		}
	}


}



class Select_termsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_select_terms;
    }

	subselect() {
	    return this.getTypedRuleContext(SubselectContext,0);
	};

	subquery_expr() {
	    return this.getTypedRuleContext(Subquery_exprContext,0);
	};

	UNION() {
	    return this.getToken(n1qlParser.UNION, 0);
	};

	select_term() {
	    return this.getTypedRuleContext(Select_termContext,0);
	};

	ALL() {
	    return this.getToken(n1qlParser.ALL, 0);
	};

	INTERSECT() {
	    return this.getToken(n1qlParser.INTERSECT, 0);
	};

	EXCEPT() {
	    return this.getToken(n1qlParser.EXCEPT, 0);
	};

	select_terms() {
	    return this.getTypedRuleContext(Select_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSelect_terms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSelect_terms(this);
		}
	}


}



class Select_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_select_term;
    }

	subselect() {
	    return this.getTypedRuleContext(SubselectContext,0);
	};

	subquery_expr() {
	    return this.getTypedRuleContext(Subquery_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSelect_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSelect_term(this);
		}
	}


}



class SubselectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_subselect;
    }

	from_select() {
	    return this.getTypedRuleContext(From_selectContext,0);
	};

	select_from() {
	    return this.getTypedRuleContext(Select_fromContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSubselect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSubselect(this);
		}
	}


}



class From_selectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_from_select;
    }

	opt_with() {
	    return this.getTypedRuleContext(Opt_withContext,0);
	};

	from() {
	    return this.getTypedRuleContext(FromContext,0);
	};

	opt_let() {
	    return this.getTypedRuleContext(Opt_letContext,0);
	};

	opt_where() {
	    return this.getTypedRuleContext(Opt_whereContext,0);
	};

	opt_group() {
	    return this.getTypedRuleContext(Opt_groupContext,0);
	};

	opt_window_clause() {
	    return this.getTypedRuleContext(Opt_window_clauseContext,0);
	};

	select_clause() {
	    return this.getTypedRuleContext(Select_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFrom_select(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFrom_select(this);
		}
	}


}



class Select_fromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_select_from;
    }

	opt_with() {
	    return this.getTypedRuleContext(Opt_withContext,0);
	};

	select_clause() {
	    return this.getTypedRuleContext(Select_clauseContext,0);
	};

	opt_from() {
	    return this.getTypedRuleContext(Opt_fromContext,0);
	};

	opt_let() {
	    return this.getTypedRuleContext(Opt_letContext,0);
	};

	opt_where() {
	    return this.getTypedRuleContext(Opt_whereContext,0);
	};

	opt_group() {
	    return this.getTypedRuleContext(Opt_groupContext,0);
	};

	opt_window_clause() {
	    return this.getTypedRuleContext(Opt_window_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSelect_from(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSelect_from(this);
		}
	}


}



class Select_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_select_clause;
    }

	SELECT() {
	    return this.getToken(n1qlParser.SELECT, 0);
	};

	projection() {
	    return this.getTypedRuleContext(ProjectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSelect_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSelect_clause(this);
		}
	}


}



class ProjectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_projection;
    }

	opt_quantifier() {
	    return this.getTypedRuleContext(Opt_quantifierContext,0);
	};

	projects() {
	    return this.getTypedRuleContext(ProjectsContext,0);
	};

	raw() {
	    return this.getTypedRuleContext(RawContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	opt_as_alias() {
	    return this.getTypedRuleContext(Opt_as_aliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterProjection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitProjection(this);
		}
	}


}



class Opt_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_quantifier;
    }

	ALL() {
	    return this.getToken(n1qlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(n1qlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_quantifier(this);
		}
	}


}



class RawContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_raw;
    }

	RAW() {
	    return this.getToken(n1qlParser.RAW, 0);
	};

	ELEMENT() {
	    return this.getToken(n1qlParser.ELEMENT, 0);
	};

	VALUE() {
	    return this.getToken(n1qlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterRaw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitRaw(this);
		}
	}


}



class ProjectsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_projects;
    }

	project() {
	    return this.getTypedRuleContext(ProjectContext,0);
	};

	projects() {
	    return this.getTypedRuleContext(ProjectsContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterProjects(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitProjects(this);
		}
	}


}



class ProjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_project;
    }

	STAR() {
	    return this.getToken(n1qlParser.STAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	DOT() {
	    return this.getToken(n1qlParser.DOT, 0);
	};

	opt_as_alias() {
	    return this.getTypedRuleContext(Opt_as_aliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterProject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitProject(this);
		}
	}


}



class Opt_as_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_as_alias;
    }

	as_alias() {
	    return this.getTypedRuleContext(As_aliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_as_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_as_alias(this);
		}
	}


}



class As_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_as_alias;
    }

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	AS() {
	    return this.getToken(n1qlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterAs_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitAs_alias(this);
		}
	}


}



class AliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_alias;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitAlias(this);
		}
	}


}



class Opt_fromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_from;
    }

	from() {
	    return this.getTypedRuleContext(FromContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_from(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_from(this);
		}
	}


}



class FromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_from;
    }

	FROM() {
	    return this.getToken(n1qlParser.FROM, 0);
	};

	from_term() {
	    return this.getTypedRuleContext(From_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFrom(this);
		}
	}


}



class From_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_from_term;
    }

	simple_from_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_from_termContext);
	    } else {
	        return this.getTypedRuleContext(Simple_from_termContext,i);
	    }
	};

	RIGHT() {
	    return this.getToken(n1qlParser.RIGHT, 0);
	};

	opt_outer() {
	    return this.getTypedRuleContext(Opt_outerContext,0);
	};

	JOIN() {
	    return this.getToken(n1qlParser.JOIN, 0);
	};

	ON() {
	    return this.getToken(n1qlParser.ON, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	from_term() {
	    return this.getTypedRuleContext(From_termContext,0);
	};

	opt_join_type() {
	    return this.getTypedRuleContext(Opt_join_typeContext,0);
	};

	on_keys() {
	    return this.getTypedRuleContext(On_keysContext,0);
	};

	on_key() {
	    return this.getTypedRuleContext(On_keyContext,0);
	};

	FOR() {
	    return this.getToken(n1qlParser.FOR, 0);
	};

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	NEST() {
	    return this.getToken(n1qlParser.NEST, 0);
	};

	unnest() {
	    return this.getTypedRuleContext(UnnestContext,0);
	};

	opt_as_alias() {
	    return this.getTypedRuleContext(Opt_as_aliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFrom_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFrom_term(this);
		}
	}


}



class Simple_from_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_simple_from_term;
    }

	keyspace_term() {
	    return this.getTypedRuleContext(Keyspace_termContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	opt_as_alias() {
	    return this.getTypedRuleContext(Opt_as_aliasContext,0);
	};

	opt_use() {
	    return this.getTypedRuleContext(Opt_useContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSimple_from_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSimple_from_term(this);
		}
	}


}



class UnnestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_unnest;
    }

	UNNEST() {
	    return this.getToken(n1qlParser.UNNEST, 0);
	};

	FLATTEN() {
	    return this.getToken(n1qlParser.FLATTEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUnnest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUnnest(this);
		}
	}


}



class Keyspace_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_keyspace_term;
    }

	keyspace_path() {
	    return this.getTypedRuleContext(Keyspace_pathContext,0);
	};

	opt_as_alias() {
	    return this.getTypedRuleContext(Opt_as_aliasContext,0);
	};

	opt_use() {
	    return this.getTypedRuleContext(Opt_useContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterKeyspace_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitKeyspace_term(this);
		}
	}


}



class Keyspace_pathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_keyspace_path;
    }

	namespace_term() {
	    return this.getTypedRuleContext(Namespace_termContext,0);
	};

	keyspace_name() {
	    return this.getTypedRuleContext(Keyspace_nameContext,0);
	};

	bucket_name() {
	    return this.getTypedRuleContext(Bucket_nameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(n1qlParser.DOT);
	    } else {
	        return this.getToken(n1qlParser.DOT, i);
	    }
	};


	scope_name() {
	    return this.getTypedRuleContext(Scope_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterKeyspace_path(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitKeyspace_path(this);
		}
	}


}



class Namespace_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_namespace_term;
    }

	namespace_name() {
	    return this.getTypedRuleContext(Namespace_nameContext,0);
	};

	SYSTEM() {
	    return this.getToken(n1qlParser.SYSTEM, 0);
	};

	COLON() {
	    return this.getToken(n1qlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterNamespace_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitNamespace_term(this);
		}
	}


}



class Namespace_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_namespace_name;
    }

	NAMESPACE_ID() {
	    return this.getToken(n1qlParser.NAMESPACE_ID, 0);
	};

	COLON() {
	    return this.getToken(n1qlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterNamespace_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitNamespace_name(this);
		}
	}


}



class Bucket_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_bucket_name;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterBucket_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitBucket_name(this);
		}
	}


}



class Scope_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_scope_name;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterScope_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitScope_name(this);
		}
	}


}



class Keyspace_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_keyspace_name;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterKeyspace_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitKeyspace_name(this);
		}
	}


}



class Opt_useContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_use;
    }

	USE() {
	    return this.getToken(n1qlParser.USE, 0);
	};

	use_options() {
	    return this.getTypedRuleContext(Use_optionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_use(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_use(this);
		}
	}


}



class Use_optionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_use_options;
    }

	use_keys() {
	    return this.getTypedRuleContext(Use_keysContext,0);
	};

	use_index() {
	    return this.getTypedRuleContext(Use_indexContext,0);
	};

	join_hint() {
	    return this.getTypedRuleContext(Join_hintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUse_options(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUse_options(this);
		}
	}


}



class Use_keysContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_use_keys;
    }

	opt_primary() {
	    return this.getTypedRuleContext(Opt_primaryContext,0);
	};

	KEYS() {
	    return this.getToken(n1qlParser.KEYS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUse_keys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUse_keys(this);
		}
	}


}



class Use_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_use_index;
    }

	INDEX() {
	    return this.getToken(n1qlParser.INDEX, 0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	index_refs() {
	    return this.getTypedRuleContext(Index_refsContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUse_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUse_index(this);
		}
	}


}



class Join_hintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_join_hint;
    }

	HASH() {
	    return this.getToken(n1qlParser.HASH, 0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	use_hash_option() {
	    return this.getTypedRuleContext(Use_hash_optionContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	NL() {
	    return this.getToken(n1qlParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterJoin_hint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitJoin_hint(this);
		}
	}


}



class Opt_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_primary;
    }

	PRIMARY() {
	    return this.getToken(n1qlParser.PRIMARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_primary(this);
		}
	}


}



class Index_refsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_index_refs;
    }

	index_ref() {
	    return this.getTypedRuleContext(Index_refContext,0);
	};

	index_refs() {
	    return this.getTypedRuleContext(Index_refsContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIndex_refs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIndex_refs(this);
		}
	}


}



class Index_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_index_ref;
    }

	opt_index_name() {
	    return this.getTypedRuleContext(Opt_index_nameContext,0);
	};

	opt_index_using() {
	    return this.getTypedRuleContext(Opt_index_usingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIndex_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIndex_ref(this);
		}
	}


}



class Use_hash_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_use_hash_option;
    }

	BUILD() {
	    return this.getToken(n1qlParser.BUILD, 0);
	};

	PROBE() {
	    return this.getToken(n1qlParser.PROBE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUse_hash_option(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUse_hash_option(this);
		}
	}


}



class Opt_use_del_updContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_use_del_upd;
    }

	opt_use() {
	    return this.getTypedRuleContext(Opt_useContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_use_del_upd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_use_del_upd(this);
		}
	}


}



class Opt_join_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_join_type;
    }

	INNER() {
	    return this.getToken(n1qlParser.INNER, 0);
	};

	LEFT() {
	    return this.getToken(n1qlParser.LEFT, 0);
	};

	opt_outer() {
	    return this.getTypedRuleContext(Opt_outerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_join_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_join_type(this);
		}
	}


}



class Opt_outerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_outer;
    }

	OUTER() {
	    return this.getToken(n1qlParser.OUTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_outer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_outer(this);
		}
	}


}



class On_keysContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_on_keys;
    }

	ON() {
	    return this.getToken(n1qlParser.ON, 0);
	};

	opt_primary() {
	    return this.getTypedRuleContext(Opt_primaryContext,0);
	};

	KEYS() {
	    return this.getToken(n1qlParser.KEYS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOn_keys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOn_keys(this);
		}
	}


}



class On_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_on_key;
    }

	ON() {
	    return this.getToken(n1qlParser.ON, 0);
	};

	opt_primary() {
	    return this.getTypedRuleContext(Opt_primaryContext,0);
	};

	KEY() {
	    return this.getToken(n1qlParser.KEY, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOn_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOn_key(this);
		}
	}


}



class Opt_letContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_let;
    }

	let_() {
	    return this.getTypedRuleContext(Let_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_let(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_let(this);
		}
	}


}



class Let_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_let_;
    }

	LET_() {
	    return this.getToken(n1qlParser.LET_, 0);
	};

	bindings() {
	    return this.getTypedRuleContext(BindingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterLet_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitLet_(this);
		}
	}


}



class BindingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_bindings;
    }

	binding() {
	    return this.getTypedRuleContext(BindingContext,0);
	};

	bindings() {
	    return this.getTypedRuleContext(BindingsContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterBindings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitBindings(this);
		}
	}


}



class BindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_binding;
    }

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	EQ() {
	    return this.getToken(n1qlParser.EQ, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitBinding(this);
		}
	}


}



class Opt_withContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_with;
    }

	WITH() {
	    return this.getToken(n1qlParser.WITH, 0);
	};

	with_list() {
	    return this.getTypedRuleContext(With_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_with(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_with(this);
		}
	}


}



class With_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_with_list;
    }

	with_term() {
	    return this.getTypedRuleContext(With_termContext,0);
	};

	with_list() {
	    return this.getTypedRuleContext(With_listContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterWith_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitWith_list(this);
		}
	}


}



class With_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_with_term;
    }

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	AS() {
	    return this.getToken(n1qlParser.AS, 0);
	};

	paren_expr() {
	    return this.getTypedRuleContext(Paren_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterWith_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitWith_term(this);
		}
	}


}



class Opt_whereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_where;
    }

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_where(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_where(this);
		}
	}


}



class WhereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_where;
    }

	WHERE() {
	    return this.getToken(n1qlParser.WHERE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterWhere(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitWhere(this);
		}
	}


}



class Opt_groupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_group;
    }

	group() {
	    return this.getTypedRuleContext(GroupContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_group(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_group(this);
		}
	}


}



class GroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_group;
    }

	GROUP() {
	    return this.getToken(n1qlParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(n1qlParser.BY, 0);
	};

	group_terms() {
	    return this.getTypedRuleContext(Group_termsContext,0);
	};

	opt_letting() {
	    return this.getTypedRuleContext(Opt_lettingContext,0);
	};

	opt_having() {
	    return this.getTypedRuleContext(Opt_havingContext,0);
	};

	letting() {
	    return this.getTypedRuleContext(LettingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitGroup(this);
		}
	}


}



class Group_termsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_group_terms;
    }

	group_term() {
	    return this.getTypedRuleContext(Group_termContext,0);
	};

	group_terms() {
	    return this.getTypedRuleContext(Group_termsContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterGroup_terms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitGroup_terms(this);
		}
	}


}



class Group_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_group_term;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	opt_as_alias() {
	    return this.getTypedRuleContext(Opt_as_aliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterGroup_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitGroup_term(this);
		}
	}


}



class Opt_lettingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_letting;
    }

	letting() {
	    return this.getTypedRuleContext(LettingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_letting(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_letting(this);
		}
	}


}



class LettingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_letting;
    }

	LETTING() {
	    return this.getToken(n1qlParser.LETTING, 0);
	};

	bindings() {
	    return this.getTypedRuleContext(BindingsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterLetting(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitLetting(this);
		}
	}


}



class Opt_havingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_having;
    }

	having() {
	    return this.getTypedRuleContext(HavingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_having(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_having(this);
		}
	}


}



class HavingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_having;
    }

	HAVING() {
	    return this.getToken(n1qlParser.HAVING, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterHaving(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitHaving(this);
		}
	}


}



class Opt_order_byContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_order_by;
    }

	order_by() {
	    return this.getTypedRuleContext(Order_byContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_order_by(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_order_by(this);
		}
	}


}



class Order_byContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_order_by;
    }

	ORDER() {
	    return this.getToken(n1qlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(n1qlParser.BY, 0);
	};

	sort_terms() {
	    return this.getTypedRuleContext(Sort_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOrder_by(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOrder_by(this);
		}
	}


}



class Sort_termsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_sort_terms;
    }

	sort_term() {
	    return this.getTypedRuleContext(Sort_termContext,0);
	};

	sort_terms() {
	    return this.getTypedRuleContext(Sort_termsContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSort_terms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSort_terms(this);
		}
	}


}



class Sort_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_sort_term;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	opt_dir() {
	    return this.getTypedRuleContext(Opt_dirContext,0);
	};

	opt_order_nulls() {
	    return this.getTypedRuleContext(Opt_order_nullsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSort_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSort_term(this);
		}
	}


}



class Opt_dirContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_dir;
    }

	dir() {
	    return this.getTypedRuleContext(DirContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_dir(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_dir(this);
		}
	}


}



class DirContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_dir;
    }

	ASC() {
	    return this.getToken(n1qlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(n1qlParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterDir(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitDir(this);
		}
	}


}



class Opt_order_nullsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_order_nulls;
    }

	nulls() {
	    return this.getTypedRuleContext(NullsContext,0);
	};

	first_last() {
	    return this.getTypedRuleContext(First_lastContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_order_nulls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_order_nulls(this);
		}
	}


}



class First_lastContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_first_last;
    }

	FIRST() {
	    return this.getToken(n1qlParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(n1qlParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFirst_last(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFirst_last(this);
		}
	}


}



class NullsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_nulls;
    }

	NULLS() {
	    return this.getToken(n1qlParser.NULLS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterNulls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitNulls(this);
		}
	}


}



class Opt_limitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_limit;
    }

	limit() {
	    return this.getTypedRuleContext(LimitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_limit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_limit(this);
		}
	}


}



class LimitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_limit;
    }

	LIMIT() {
	    return this.getToken(n1qlParser.LIMIT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterLimit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitLimit(this);
		}
	}


}



class Opt_offsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_offset;
    }

	offset() {
	    return this.getTypedRuleContext(OffsetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_offset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_offset(this);
		}
	}


}



class OffsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_offset;
    }

	OFFSET() {
	    return this.getToken(n1qlParser.OFFSET, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOffset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOffset(this);
		}
	}


}



class InsertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_insert;
    }

	INSERT() {
	    return this.getToken(n1qlParser.INSERT, 0);
	};

	INTO() {
	    return this.getToken(n1qlParser.INTO, 0);
	};

	keyspace_ref() {
	    return this.getTypedRuleContext(Keyspace_refContext,0);
	};

	opt_values_header() {
	    return this.getTypedRuleContext(Opt_values_headerContext,0);
	};

	values_list() {
	    return this.getTypedRuleContext(Values_listContext,0);
	};

	opt_returning() {
	    return this.getTypedRuleContext(Opt_returningContext,0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	key_val_options_expr_header() {
	    return this.getTypedRuleContext(Key_val_options_expr_headerContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	fullselect() {
	    return this.getTypedRuleContext(FullselectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterInsert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitInsert(this);
		}
	}


}



class Simple_keyspace_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_simple_keyspace_ref;
    }

	keyspace_name() {
	    return this.getTypedRuleContext(Keyspace_nameContext,0);
	};

	opt_as_alias() {
	    return this.getTypedRuleContext(Opt_as_aliasContext,0);
	};

	keyspace_path() {
	    return this.getTypedRuleContext(Keyspace_pathContext,0);
	};

	bucket_name() {
	    return this.getTypedRuleContext(Bucket_nameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(n1qlParser.DOT);
	    } else {
	        return this.getToken(n1qlParser.DOT, i);
	    }
	};


	scope_name() {
	    return this.getTypedRuleContext(Scope_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSimple_keyspace_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSimple_keyspace_ref(this);
		}
	}


}



class Keyspace_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_keyspace_ref;
    }

	simple_keyspace_ref() {
	    return this.getTypedRuleContext(Simple_keyspace_refContext,0);
	};

	param_expr() {
	    return this.getTypedRuleContext(Param_exprContext,0);
	};

	opt_as_alias() {
	    return this.getTypedRuleContext(Opt_as_aliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterKeyspace_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitKeyspace_ref(this);
		}
	}


}



class Opt_values_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_values_header;
    }

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	opt_primary() {
	    return this.getTypedRuleContext(Opt_primaryContext,0);
	};

	KEY() {
	    return this.getToken(n1qlParser.KEY, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(n1qlParser.COMMA);
	    } else {
	        return this.getToken(n1qlParser.COMMA, i);
	    }
	};


	VALUE() {
	    return this.getToken(n1qlParser.VALUE, 0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	OPTIONS() {
	    return this.getToken(n1qlParser.OPTIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_values_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_values_header(this);
		}
	}


}



class KeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_key;
    }

	opt_primary() {
	    return this.getTypedRuleContext(Opt_primaryContext,0);
	};

	KEY() {
	    return this.getToken(n1qlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitKey(this);
		}
	}


}



class Values_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_values_list;
    }

	values() {
	    return this.getTypedRuleContext(ValuesContext,0);
	};

	values_list() {
	    return this.getTypedRuleContext(Values_listContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	next_values() {
	    return this.getTypedRuleContext(Next_valuesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterValues_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitValues_list(this);
		}
	}


}



class ValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_values;
    }

	VALUES() {
	    return this.getToken(n1qlParser.VALUES, 0);
	};

	key_val_expr() {
	    return this.getTypedRuleContext(Key_val_exprContext,0);
	};

	key_val_options_expr() {
	    return this.getTypedRuleContext(Key_val_options_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitValues(this);
		}
	}


}



class Next_valuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_next_values;
    }

	values() {
	    return this.getTypedRuleContext(ValuesContext,0);
	};

	key_val_expr() {
	    return this.getTypedRuleContext(Key_val_exprContext,0);
	};

	key_val_options_expr() {
	    return this.getTypedRuleContext(Key_val_options_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterNext_values(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitNext_values(this);
		}
	}


}



class Key_val_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_key_val_expr;
    }

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterKey_val_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitKey_val_expr(this);
		}
	}


}



class Key_val_options_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_key_val_options_expr;
    }

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(n1qlParser.COMMA);
	    } else {
	        return this.getToken(n1qlParser.COMMA, i);
	    }
	};


	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterKey_val_options_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitKey_val_options_expr(this);
		}
	}


}



class Opt_returningContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_returning;
    }

	returning() {
	    return this.getTypedRuleContext(ReturningContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_returning(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_returning(this);
		}
	}


}



class ReturningContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_returning;
    }

	RETURNING() {
	    return this.getToken(n1qlParser.RETURNING, 0);
	};

	returns_() {
	    return this.getTypedRuleContext(Returns_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterReturning(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitReturning(this);
		}
	}


}



class Returns_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_returns_;
    }

	projects() {
	    return this.getTypedRuleContext(ProjectsContext,0);
	};

	raw() {
	    return this.getTypedRuleContext(RawContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterReturns_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitReturns_(this);
		}
	}


}



class Key_expr_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_key_expr_header;
    }

	key() {
	    return this.getTypedRuleContext(KeyContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterKey_expr_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitKey_expr_header(this);
		}
	}


}



class Value_expr_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_value_expr_header;
    }

	VALUE() {
	    return this.getToken(n1qlParser.VALUE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterValue_expr_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitValue_expr_header(this);
		}
	}


}



class Options_expr_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_options_expr_header;
    }

	OPTIONS() {
	    return this.getToken(n1qlParser.OPTIONS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOptions_expr_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOptions_expr_header(this);
		}
	}


}



class Key_val_options_expr_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_key_val_options_expr_header;
    }

	key_expr_header() {
	    return this.getTypedRuleContext(Key_expr_headerContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(n1qlParser.COMMA);
	    } else {
	        return this.getToken(n1qlParser.COMMA, i);
	    }
	};


	value_expr_header() {
	    return this.getTypedRuleContext(Value_expr_headerContext,0);
	};

	options_expr_header() {
	    return this.getTypedRuleContext(Options_expr_headerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterKey_val_options_expr_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitKey_val_options_expr_header(this);
		}
	}


}



class UpsertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_upsert;
    }

	UPSERT() {
	    return this.getToken(n1qlParser.UPSERT, 0);
	};

	INTO() {
	    return this.getToken(n1qlParser.INTO, 0);
	};

	keyspace_ref() {
	    return this.getTypedRuleContext(Keyspace_refContext,0);
	};

	opt_values_header() {
	    return this.getTypedRuleContext(Opt_values_headerContext,0);
	};

	values_list() {
	    return this.getTypedRuleContext(Values_listContext,0);
	};

	opt_returning() {
	    return this.getTypedRuleContext(Opt_returningContext,0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	key_val_options_expr_header() {
	    return this.getTypedRuleContext(Key_val_options_expr_headerContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	fullselect() {
	    return this.getTypedRuleContext(FullselectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUpsert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUpsert(this);
		}
	}


}



class Delete_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_delete_;
    }

	DELETE_() {
	    return this.getToken(n1qlParser.DELETE_, 0);
	};

	FROM() {
	    return this.getToken(n1qlParser.FROM, 0);
	};

	keyspace_ref() {
	    return this.getTypedRuleContext(Keyspace_refContext,0);
	};

	opt_use_del_upd() {
	    return this.getTypedRuleContext(Opt_use_del_updContext,0);
	};

	opt_where() {
	    return this.getTypedRuleContext(Opt_whereContext,0);
	};

	opt_limit() {
	    return this.getTypedRuleContext(Opt_limitContext,0);
	};

	opt_returning() {
	    return this.getTypedRuleContext(Opt_returningContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterDelete_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitDelete_(this);
		}
	}


}



class UpdateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_update;
    }

	UPDATE() {
	    return this.getToken(n1qlParser.UPDATE, 0);
	};

	keyspace_ref() {
	    return this.getTypedRuleContext(Keyspace_refContext,0);
	};

	opt_use_del_upd() {
	    return this.getTypedRuleContext(Opt_use_del_updContext,0);
	};

	set() {
	    return this.getTypedRuleContext(SetContext,0);
	};

	unset() {
	    return this.getTypedRuleContext(UnsetContext,0);
	};

	opt_where() {
	    return this.getTypedRuleContext(Opt_whereContext,0);
	};

	opt_limit() {
	    return this.getTypedRuleContext(Opt_limitContext,0);
	};

	opt_returning() {
	    return this.getTypedRuleContext(Opt_returningContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUpdate(this);
		}
	}


}



class SetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_set;
    }

	SET() {
	    return this.getToken(n1qlParser.SET, 0);
	};

	set_terms() {
	    return this.getTypedRuleContext(Set_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSet(this);
		}
	}


}



class Set_termsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_set_terms;
    }

	set_term() {
	    return this.getTypedRuleContext(Set_termContext,0);
	};

	set_terms() {
	    return this.getTypedRuleContext(Set_termsContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSet_terms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSet_terms(this);
		}
	}


}



class Set_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_set_term;
    }

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	EQ() {
	    return this.getToken(n1qlParser.EQ, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	opt_update_for() {
	    return this.getTypedRuleContext(Opt_update_forContext,0);
	};

	function_meta_expr() {
	    return this.getTypedRuleContext(Function_meta_exprContext,0);
	};

	DOT() {
	    return this.getToken(n1qlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSet_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSet_term(this);
		}
	}


}



class Function_meta_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_function_meta_expr;
    }

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	opt_exprs() {
	    return this.getTypedRuleContext(Opt_exprsContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFunction_meta_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFunction_meta_expr(this);
		}
	}


}



class Opt_update_forContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_update_for;
    }

	update_for() {
	    return this.getTypedRuleContext(Update_forContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_update_for(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_update_for(this);
		}
	}


}



class Update_forContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_update_for;
    }

	update_dimensions() {
	    return this.getTypedRuleContext(Update_dimensionsContext,0);
	};

	opt_when() {
	    return this.getTypedRuleContext(Opt_whenContext,0);
	};

	END() {
	    return this.getToken(n1qlParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUpdate_for(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUpdate_for(this);
		}
	}


}



class Update_dimensionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_update_dimensions;
    }

	FOR() {
	    return this.getToken(n1qlParser.FOR, 0);
	};

	update_dimension() {
	    return this.getTypedRuleContext(Update_dimensionContext,0);
	};

	update_dimensions() {
	    return this.getTypedRuleContext(Update_dimensionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUpdate_dimensions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUpdate_dimensions(this);
		}
	}


}



class Update_dimensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_update_dimension;
    }

	update_binding() {
	    return this.getTypedRuleContext(Update_bindingContext,0);
	};

	update_dimension() {
	    return this.getTypedRuleContext(Update_dimensionContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUpdate_dimension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUpdate_dimension(this);
		}
	}


}



class Update_bindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_update_binding;
    }

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	IN() {
	    return this.getToken(n1qlParser.IN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	WITHIN() {
	    return this.getToken(n1qlParser.WITHIN, 0);
	};

	COLON() {
	    return this.getToken(n1qlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUpdate_binding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUpdate_binding(this);
		}
	}


}



class VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_variable;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitVariable(this);
		}
	}


}



class Opt_whenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_when;
    }

	WHEN() {
	    return this.getToken(n1qlParser.WHEN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_when(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_when(this);
		}
	}


}



class UnsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_unset;
    }

	UNSET() {
	    return this.getToken(n1qlParser.UNSET, 0);
	};

	unset_terms() {
	    return this.getTypedRuleContext(Unset_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUnset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUnset(this);
		}
	}


}



class Unset_termsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_unset_terms;
    }

	unset_term() {
	    return this.getTypedRuleContext(Unset_termContext,0);
	};

	unset_terms() {
	    return this.getTypedRuleContext(Unset_termsContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUnset_terms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUnset_terms(this);
		}
	}


}



class Unset_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_unset_term;
    }

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	opt_update_for() {
	    return this.getTypedRuleContext(Opt_update_forContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUnset_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUnset_term(this);
		}
	}


}



class MergeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_merge;
    }

	MERGE() {
	    return this.getToken(n1qlParser.MERGE, 0);
	};

	INTO() {
	    return this.getToken(n1qlParser.INTO, 0);
	};

	simple_keyspace_ref() {
	    return this.getTypedRuleContext(Simple_keyspace_refContext,0);
	};

	opt_use_merge() {
	    return this.getTypedRuleContext(Opt_use_mergeContext,0);
	};

	USING() {
	    return this.getToken(n1qlParser.USING, 0);
	};

	simple_from_term() {
	    return this.getTypedRuleContext(Simple_from_termContext,0);
	};

	ON() {
	    return this.getToken(n1qlParser.ON, 0);
	};

	opt_key() {
	    return this.getTypedRuleContext(Opt_keyContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	merge_actions() {
	    return this.getTypedRuleContext(Merge_actionsContext,0);
	};

	opt_limit() {
	    return this.getTypedRuleContext(Opt_limitContext,0);
	};

	opt_returning() {
	    return this.getTypedRuleContext(Opt_returningContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterMerge(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitMerge(this);
		}
	}


}



class Opt_use_mergeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_use_merge;
    }

	opt_use() {
	    return this.getTypedRuleContext(Opt_useContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_use_merge(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_use_merge(this);
		}
	}


}



class Opt_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_key;
    }

	key() {
	    return this.getTypedRuleContext(KeyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_key(this);
		}
	}


}



class Merge_actionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_merge_actions;
    }

	WHEN() {
	    return this.getToken(n1qlParser.WHEN, 0);
	};

	MATCHED() {
	    return this.getToken(n1qlParser.MATCHED, 0);
	};

	THEN() {
	    return this.getToken(n1qlParser.THEN, 0);
	};

	UPDATE() {
	    return this.getToken(n1qlParser.UPDATE, 0);
	};

	merge_update() {
	    return this.getTypedRuleContext(Merge_updateContext,0);
	};

	opt_merge_delete_insert() {
	    return this.getTypedRuleContext(Opt_merge_delete_insertContext,0);
	};

	DELETE_() {
	    return this.getToken(n1qlParser.DELETE_, 0);
	};

	merge_delete() {
	    return this.getTypedRuleContext(Merge_deleteContext,0);
	};

	opt_merge_insert() {
	    return this.getTypedRuleContext(Opt_merge_insertContext,0);
	};

	NOT() {
	    return this.getToken(n1qlParser.NOT, 0);
	};

	INSERT() {
	    return this.getToken(n1qlParser.INSERT, 0);
	};

	merge_insert() {
	    return this.getTypedRuleContext(Merge_insertContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterMerge_actions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitMerge_actions(this);
		}
	}


}



class Opt_merge_delete_insertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_merge_delete_insert;
    }

	WHEN() {
	    return this.getToken(n1qlParser.WHEN, 0);
	};

	MATCHED() {
	    return this.getToken(n1qlParser.MATCHED, 0);
	};

	THEN() {
	    return this.getToken(n1qlParser.THEN, 0);
	};

	DELETE_() {
	    return this.getToken(n1qlParser.DELETE_, 0);
	};

	merge_delete() {
	    return this.getTypedRuleContext(Merge_deleteContext,0);
	};

	opt_merge_insert() {
	    return this.getTypedRuleContext(Opt_merge_insertContext,0);
	};

	NOT() {
	    return this.getToken(n1qlParser.NOT, 0);
	};

	INSERT() {
	    return this.getToken(n1qlParser.INSERT, 0);
	};

	merge_insert() {
	    return this.getTypedRuleContext(Merge_insertContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_merge_delete_insert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_merge_delete_insert(this);
		}
	}


}



class Opt_merge_insertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_merge_insert;
    }

	WHEN() {
	    return this.getToken(n1qlParser.WHEN, 0);
	};

	NOT() {
	    return this.getToken(n1qlParser.NOT, 0);
	};

	MATCHED() {
	    return this.getToken(n1qlParser.MATCHED, 0);
	};

	THEN() {
	    return this.getToken(n1qlParser.THEN, 0);
	};

	INSERT() {
	    return this.getToken(n1qlParser.INSERT, 0);
	};

	merge_insert() {
	    return this.getTypedRuleContext(Merge_insertContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_merge_insert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_merge_insert(this);
		}
	}


}



class Merge_updateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_merge_update;
    }

	set() {
	    return this.getTypedRuleContext(SetContext,0);
	};

	opt_where() {
	    return this.getTypedRuleContext(Opt_whereContext,0);
	};

	unset() {
	    return this.getTypedRuleContext(UnsetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterMerge_update(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitMerge_update(this);
		}
	}


}



class Merge_deleteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_merge_delete;
    }

	opt_where() {
	    return this.getTypedRuleContext(Opt_whereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterMerge_delete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitMerge_delete(this);
		}
	}


}



class Merge_insertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_merge_insert;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	opt_where() {
	    return this.getTypedRuleContext(Opt_whereContext,0);
	};

	key_val_expr() {
	    return this.getTypedRuleContext(Key_val_exprContext,0);
	};

	key_val_options_expr() {
	    return this.getTypedRuleContext(Key_val_options_exprContext,0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	key_val_options_expr_header() {
	    return this.getTypedRuleContext(Key_val_options_expr_headerContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterMerge_insert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitMerge_insert(this);
		}
	}


}



class Grant_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_grant_role;
    }

	GRANT() {
	    return this.getToken(n1qlParser.GRANT, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	TO() {
	    return this.getToken(n1qlParser.TO, 0);
	};

	user_list() {
	    return this.getTypedRuleContext(User_listContext,0);
	};

	ON() {
	    return this.getToken(n1qlParser.ON, 0);
	};

	keyspace_scope_list() {
	    return this.getTypedRuleContext(Keyspace_scope_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterGrant_role(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitGrant_role(this);
		}
	}


}



class Role_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_role_list;
    }

	role_name() {
	    return this.getTypedRuleContext(Role_nameContext,0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterRole_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitRole_list(this);
		}
	}


}



class Role_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_role_name;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	SELECT() {
	    return this.getToken(n1qlParser.SELECT, 0);
	};

	INSERT() {
	    return this.getToken(n1qlParser.INSERT, 0);
	};

	UPDATE() {
	    return this.getToken(n1qlParser.UPDATE, 0);
	};

	DELETE_() {
	    return this.getToken(n1qlParser.DELETE_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterRole_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitRole_name(this);
		}
	}


}



class Keyspace_scope_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_keyspace_scope_list;
    }

	keyspace_scope() {
	    return this.getTypedRuleContext(Keyspace_scopeContext,0);
	};

	keyspace_scope_list() {
	    return this.getTypedRuleContext(Keyspace_scope_listContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterKeyspace_scope_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitKeyspace_scope_list(this);
		}
	}


}



class Keyspace_scopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_keyspace_scope;
    }

	keyspace_name() {
	    return this.getTypedRuleContext(Keyspace_nameContext,0);
	};

	namespace_name() {
	    return this.getTypedRuleContext(Namespace_nameContext,0);
	};

	bucket_name() {
	    return this.getTypedRuleContext(Bucket_nameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(n1qlParser.DOT);
	    } else {
	        return this.getToken(n1qlParser.DOT, i);
	    }
	};


	scope_name() {
	    return this.getTypedRuleContext(Scope_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterKeyspace_scope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitKeyspace_scope(this);
		}
	}


}



class User_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_user_list;
    }

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	user_list() {
	    return this.getTypedRuleContext(User_listContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUser_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUser_list(this);
		}
	}


}



class UserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_user;
    }

	IDENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(n1qlParser.IDENT);
	    } else {
	        return this.getToken(n1qlParser.IDENT, i);
	    }
	};


	COLON() {
	    return this.getToken(n1qlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUser(this);
		}
	}


}



class Revoke_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_revoke_role;
    }

	REVOKE() {
	    return this.getToken(n1qlParser.REVOKE, 0);
	};

	role_list() {
	    return this.getTypedRuleContext(Role_listContext,0);
	};

	FROM() {
	    return this.getToken(n1qlParser.FROM, 0);
	};

	user_list() {
	    return this.getTypedRuleContext(User_listContext,0);
	};

	ON() {
	    return this.getToken(n1qlParser.ON, 0);
	};

	keyspace_scope_list() {
	    return this.getTypedRuleContext(Keyspace_scope_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterRevoke_role(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitRevoke_role(this);
		}
	}


}



class Create_scopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_create_scope;
    }

	CREATE() {
	    return this.getToken(n1qlParser.CREATE, 0);
	};

	SCOPE() {
	    return this.getToken(n1qlParser.SCOPE, 0);
	};

	named_scope_ref() {
	    return this.getTypedRuleContext(Named_scope_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterCreate_scope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitCreate_scope(this);
		}
	}


}



class Drop_scopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_drop_scope;
    }

	DROP() {
	    return this.getToken(n1qlParser.DROP, 0);
	};

	SCOPE() {
	    return this.getToken(n1qlParser.SCOPE, 0);
	};

	named_scope_ref() {
	    return this.getTypedRuleContext(Named_scope_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterDrop_scope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitDrop_scope(this);
		}
	}


}



class Create_collectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_create_collection;
    }

	CREATE() {
	    return this.getToken(n1qlParser.CREATE, 0);
	};

	COLLECTION() {
	    return this.getToken(n1qlParser.COLLECTION, 0);
	};

	named_keyspace_ref() {
	    return this.getTypedRuleContext(Named_keyspace_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterCreate_collection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitCreate_collection(this);
		}
	}


}



class Drop_collectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_drop_collection;
    }

	DROP() {
	    return this.getToken(n1qlParser.DROP, 0);
	};

	COLLECTION() {
	    return this.getToken(n1qlParser.COLLECTION, 0);
	};

	named_keyspace_ref() {
	    return this.getTypedRuleContext(Named_keyspace_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterDrop_collection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitDrop_collection(this);
		}
	}


}



class Flush_collectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_flush_collection;
    }

	flush_or_truncate() {
	    return this.getTypedRuleContext(Flush_or_truncateContext,0);
	};

	COLLECTION() {
	    return this.getToken(n1qlParser.COLLECTION, 0);
	};

	named_keyspace_ref() {
	    return this.getTypedRuleContext(Named_keyspace_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFlush_collection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFlush_collection(this);
		}
	}


}



class Flush_or_truncateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_flush_or_truncate;
    }

	FLUSH() {
	    return this.getToken(n1qlParser.FLUSH, 0);
	};

	TRUNCATE() {
	    return this.getToken(n1qlParser.TRUNCATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFlush_or_truncate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFlush_or_truncate(this);
		}
	}


}



class Create_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_create_index;
    }

	CREATE() {
	    return this.getToken(n1qlParser.CREATE, 0);
	};

	PRIMARY() {
	    return this.getToken(n1qlParser.PRIMARY, 0);
	};

	INDEX() {
	    return this.getToken(n1qlParser.INDEX, 0);
	};

	opt_primary_name() {
	    return this.getTypedRuleContext(Opt_primary_nameContext,0);
	};

	ON() {
	    return this.getToken(n1qlParser.ON, 0);
	};

	named_keyspace_ref() {
	    return this.getTypedRuleContext(Named_keyspace_refContext,0);
	};

	index_partition() {
	    return this.getTypedRuleContext(Index_partitionContext,0);
	};

	opt_index_using() {
	    return this.getTypedRuleContext(Opt_index_usingContext,0);
	};

	opt_index_with() {
	    return this.getTypedRuleContext(Opt_index_withContext,0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	index_terms() {
	    return this.getTypedRuleContext(Index_termsContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	index_where() {
	    return this.getTypedRuleContext(Index_whereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterCreate_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitCreate_index(this);
		}
	}


}



class Opt_primary_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_primary_name;
    }

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_primary_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_primary_name(this);
		}
	}


}



class Index_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_index_name;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIndex_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIndex_name(this);
		}
	}


}



class Opt_index_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_index_name;
    }

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_index_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_index_name(this);
		}
	}


}



class Named_keyspace_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_named_keyspace_ref;
    }

	simple_named_keyspace_ref() {
	    return this.getTypedRuleContext(Simple_named_keyspace_refContext,0);
	};

	namespace_name() {
	    return this.getTypedRuleContext(Namespace_nameContext,0);
	};

	bucket_name() {
	    return this.getTypedRuleContext(Bucket_nameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(n1qlParser.DOT);
	    } else {
	        return this.getToken(n1qlParser.DOT, i);
	    }
	};


	scope_name() {
	    return this.getTypedRuleContext(Scope_nameContext,0);
	};

	keyspace_name() {
	    return this.getTypedRuleContext(Keyspace_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterNamed_keyspace_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitNamed_keyspace_ref(this);
		}
	}


}



class Simple_named_keyspace_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_simple_named_keyspace_ref;
    }

	keyspace_name() {
	    return this.getTypedRuleContext(Keyspace_nameContext,0);
	};

	namespace_name() {
	    return this.getTypedRuleContext(Namespace_nameContext,0);
	};

	bucket_name() {
	    return this.getTypedRuleContext(Bucket_nameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(n1qlParser.DOT);
	    } else {
	        return this.getToken(n1qlParser.DOT, i);
	    }
	};


	scope_name() {
	    return this.getTypedRuleContext(Scope_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSimple_named_keyspace_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSimple_named_keyspace_ref(this);
		}
	}


}



class Named_scope_refContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_named_scope_ref;
    }

	namespace_name() {
	    return this.getTypedRuleContext(Namespace_nameContext,0);
	};

	bucket_name() {
	    return this.getTypedRuleContext(Bucket_nameContext,0);
	};

	DOT() {
	    return this.getToken(n1qlParser.DOT, 0);
	};

	scope_name() {
	    return this.getTypedRuleContext(Scope_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterNamed_scope_ref(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitNamed_scope_ref(this);
		}
	}


}



class Index_partitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_index_partition;
    }

	PARTITION() {
	    return this.getToken(n1qlParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(n1qlParser.BY, 0);
	};

	HASH() {
	    return this.getToken(n1qlParser.HASH, 0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIndex_partition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIndex_partition(this);
		}
	}


}



class Opt_index_usingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_index_using;
    }

	index_using() {
	    return this.getTypedRuleContext(Index_usingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_index_using(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_index_using(this);
		}
	}


}



class Index_usingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_index_using;
    }

	USING() {
	    return this.getToken(n1qlParser.USING, 0);
	};

	VIEW() {
	    return this.getToken(n1qlParser.VIEW, 0);
	};

	GSI() {
	    return this.getToken(n1qlParser.GSI, 0);
	};

	FTS() {
	    return this.getToken(n1qlParser.FTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIndex_using(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIndex_using(this);
		}
	}


}



class Opt_index_withContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_index_with;
    }

	index_with() {
	    return this.getTypedRuleContext(Index_withContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_index_with(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_index_with(this);
		}
	}


}



class Index_withContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_index_with;
    }

	WITH() {
	    return this.getToken(n1qlParser.WITH, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIndex_with(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIndex_with(this);
		}
	}


}



class Index_termsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_index_terms;
    }

	index_term() {
	    return this.getTypedRuleContext(Index_termContext,0);
	};

	index_terms() {
	    return this.getTypedRuleContext(Index_termsContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIndex_terms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIndex_terms(this);
		}
	}


}



class Index_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_index_term;
    }

	index_term_expr() {
	    return this.getTypedRuleContext(Index_term_exprContext,0);
	};

	opt_ikattr() {
	    return this.getTypedRuleContext(Opt_ikattrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIndex_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIndex_term(this);
		}
	}


}



class Index_term_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_index_term_expr;
    }

	index_expr() {
	    return this.getTypedRuleContext(Index_exprContext,0);
	};

	all() {
	    return this.getTypedRuleContext(AllContext,0);
	};

	DISTINCT() {
	    return this.getToken(n1qlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIndex_term_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIndex_term_expr(this);
		}
	}


}



class Index_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_index_expr;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIndex_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIndex_expr(this);
		}
	}


}



class AllContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_all;
    }

	ALL() {
	    return this.getToken(n1qlParser.ALL, 0);
	};

	EACH() {
	    return this.getToken(n1qlParser.EACH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterAll(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitAll(this);
		}
	}


}



class Index_whereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_index_where;
    }

	WHERE() {
	    return this.getToken(n1qlParser.WHERE, 0);
	};

	index_expr() {
	    return this.getTypedRuleContext(Index_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIndex_where(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIndex_where(this);
		}
	}


}



class Opt_ikattrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_ikattr;
    }

	ikattr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IkattrContext);
	    } else {
	        return this.getTypedRuleContext(IkattrContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_ikattr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_ikattr(this);
		}
	}


}



class IkattrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_ikattr;
    }

	ASC() {
	    return this.getToken(n1qlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(n1qlParser.DESC, 0);
	};

	MISSING() {
	    return this.getToken(n1qlParser.MISSING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIkattr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIkattr(this);
		}
	}


}



class Drop_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_drop_index;
    }

	DROP() {
	    return this.getToken(n1qlParser.DROP, 0);
	};

	PRIMARY() {
	    return this.getToken(n1qlParser.PRIMARY, 0);
	};

	INDEX() {
	    return this.getToken(n1qlParser.INDEX, 0);
	};

	ON() {
	    return this.getToken(n1qlParser.ON, 0);
	};

	named_keyspace_ref() {
	    return this.getTypedRuleContext(Named_keyspace_refContext,0);
	};

	opt_index_using() {
	    return this.getTypedRuleContext(Opt_index_usingContext,0);
	};

	simple_named_keyspace_ref() {
	    return this.getTypedRuleContext(Simple_named_keyspace_refContext,0);
	};

	DOT() {
	    return this.getToken(n1qlParser.DOT, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterDrop_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitDrop_index(this);
		}
	}


}



class Alter_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_alter_index;
    }

	ALTER() {
	    return this.getToken(n1qlParser.ALTER, 0);
	};

	INDEX() {
	    return this.getToken(n1qlParser.INDEX, 0);
	};

	simple_named_keyspace_ref() {
	    return this.getTypedRuleContext(Simple_named_keyspace_refContext,0);
	};

	DOT() {
	    return this.getToken(n1qlParser.DOT, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	opt_index_using() {
	    return this.getTypedRuleContext(Opt_index_usingContext,0);
	};

	index_with() {
	    return this.getTypedRuleContext(Index_withContext,0);
	};

	ON() {
	    return this.getToken(n1qlParser.ON, 0);
	};

	named_keyspace_ref() {
	    return this.getTypedRuleContext(Named_keyspace_refContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterAlter_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitAlter_index(this);
		}
	}


}



class Build_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_build_index;
    }

	BUILD() {
	    return this.getToken(n1qlParser.BUILD, 0);
	};

	INDEX() {
	    return this.getToken(n1qlParser.INDEX, 0);
	};

	ON() {
	    return this.getToken(n1qlParser.ON, 0);
	};

	named_keyspace_ref() {
	    return this.getTypedRuleContext(Named_keyspace_refContext,0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	opt_index_using() {
	    return this.getTypedRuleContext(Opt_index_usingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterBuild_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitBuild_index(this);
		}
	}


}



class Create_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_create_function;
    }

	CREATE() {
	    return this.getToken(n1qlParser.CREATE, 0);
	};

	opt_replace() {
	    return this.getTypedRuleContext(Opt_replaceContext,0);
	};

	FUNCTION() {
	    return this.getToken(n1qlParser.FUNCTION, 0);
	};

	func_name() {
	    return this.getTypedRuleContext(Func_nameContext,0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	parm_list() {
	    return this.getTypedRuleContext(Parm_listContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	func_body() {
	    return this.getTypedRuleContext(Func_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterCreate_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitCreate_function(this);
		}
	}


}



class Opt_replaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_replace;
    }

	OR() {
	    return this.getToken(n1qlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(n1qlParser.REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_replace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_replace(this);
		}
	}


}



class Func_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_func_name;
    }

	short_func_name() {
	    return this.getTypedRuleContext(Short_func_nameContext,0);
	};

	long_func_name() {
	    return this.getTypedRuleContext(Long_func_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFunc_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFunc_name(this);
		}
	}


}



class Short_func_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_short_func_name;
    }

	keyspace_name() {
	    return this.getTypedRuleContext(Keyspace_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterShort_func_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitShort_func_name(this);
		}
	}


}



class Long_func_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_long_func_name;
    }

	namespace_term() {
	    return this.getTypedRuleContext(Namespace_termContext,0);
	};

	keyspace_name() {
	    return this.getTypedRuleContext(Keyspace_nameContext,0);
	};

	bucket_name() {
	    return this.getTypedRuleContext(Bucket_nameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(n1qlParser.DOT);
	    } else {
	        return this.getToken(n1qlParser.DOT, i);
	    }
	};


	scope_name() {
	    return this.getTypedRuleContext(Scope_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterLong_func_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitLong_func_name(this);
		}
	}


}



class Parm_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_parm_list;
    }

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(n1qlParser.DOT);
	    } else {
	        return this.getToken(n1qlParser.DOT, i);
	    }
	};


	parameter_terms() {
	    return this.getTypedRuleContext(Parameter_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterParm_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitParm_list(this);
		}
	}


}



class Parameter_termsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_parameter_terms;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	parameter_terms() {
	    return this.getTypedRuleContext(Parameter_termsContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterParameter_terms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitParameter_terms(this);
		}
	}


}



class Func_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_func_body;
    }

	LBRACE() {
	    return this.getToken(n1qlParser.LBRACE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACE() {
	    return this.getToken(n1qlParser.RBRACE, 0);
	};

	LANGUAGE() {
	    return this.getToken(n1qlParser.LANGUAGE, 0);
	};

	INLINE() {
	    return this.getToken(n1qlParser.INLINE, 0);
	};

	AS() {
	    return this.getToken(n1qlParser.AS, 0);
	};

	GOLANG() {
	    return this.getToken(n1qlParser.GOLANG, 0);
	};

	STR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(n1qlParser.STR);
	    } else {
	        return this.getToken(n1qlParser.STR, i);
	    }
	};


	AT() {
	    return this.getToken(n1qlParser.AT, 0);
	};

	JAVASCRIPT() {
	    return this.getToken(n1qlParser.JAVASCRIPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFunc_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFunc_body(this);
		}
	}


}



class Drop_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_drop_function;
    }

	DROP() {
	    return this.getToken(n1qlParser.DROP, 0);
	};

	FUNCTION() {
	    return this.getToken(n1qlParser.FUNCTION, 0);
	};

	func_name() {
	    return this.getTypedRuleContext(Func_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterDrop_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitDrop_function(this);
		}
	}


}



class Execute_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_execute_function;
    }

	EXECUTE() {
	    return this.getToken(n1qlParser.EXECUTE, 0);
	};

	FUNCTION() {
	    return this.getToken(n1qlParser.FUNCTION, 0);
	};

	func_name() {
	    return this.getTypedRuleContext(Func_nameContext,0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	opt_exprs() {
	    return this.getTypedRuleContext(Opt_exprsContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterExecute_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitExecute_function(this);
		}
	}


}



class Update_statisticsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_update_statistics;
    }

	UPDATE() {
	    return this.getToken(n1qlParser.UPDATE, 0);
	};

	STATISTICS() {
	    return this.getToken(n1qlParser.STATISTICS, 0);
	};

	opt_for() {
	    return this.getTypedRuleContext(Opt_forContext,0);
	};

	named_keyspace_ref() {
	    return this.getTypedRuleContext(Named_keyspace_refContext,0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	update_stat_terms() {
	    return this.getTypedRuleContext(Update_stat_termsContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	opt_infer_ustat_with() {
	    return this.getTypedRuleContext(Opt_infer_ustat_withContext,0);
	};

	DELETE_() {
	    return this.getToken(n1qlParser.DELETE_, 0);
	};

	ALL() {
	    return this.getToken(n1qlParser.ALL, 0);
	};

	INDEX() {
	    return this.getToken(n1qlParser.INDEX, 0);
	};

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	opt_index_using() {
	    return this.getTypedRuleContext(Opt_index_usingContext,0);
	};

	FOR() {
	    return this.getToken(n1qlParser.FOR, 0);
	};

	simple_named_keyspace_ref() {
	    return this.getTypedRuleContext(Simple_named_keyspace_refContext,0);
	};

	DOT() {
	    return this.getToken(n1qlParser.DOT, 0);
	};

	index_name() {
	    return this.getTypedRuleContext(Index_nameContext,0);
	};

	ON() {
	    return this.getToken(n1qlParser.ON, 0);
	};

	ANALYZE() {
	    return this.getToken(n1qlParser.ANALYZE, 0);
	};

	opt_keyspace_collection() {
	    return this.getTypedRuleContext(Opt_keyspace_collectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUpdate_statistics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUpdate_statistics(this);
		}
	}


}



class Opt_forContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_for;
    }

	FOR() {
	    return this.getToken(n1qlParser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_for(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_for(this);
		}
	}


}



class Update_stat_termsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_update_stat_terms;
    }

	update_stat_term() {
	    return this.getTypedRuleContext(Update_stat_termContext,0);
	};

	update_stat_terms() {
	    return this.getTypedRuleContext(Update_stat_termsContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUpdate_stat_terms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUpdate_stat_terms(this);
		}
	}


}



class Update_stat_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_update_stat_term;
    }

	index_term_expr() {
	    return this.getTypedRuleContext(Index_term_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterUpdate_stat_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitUpdate_stat_term(this);
		}
	}


}



class PathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_path;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	DOT() {
	    return this.getToken(n1qlParser.DOT, 0);
	};

	IDENT_ICASE() {
	    return this.getToken(n1qlParser.IDENT_ICASE, 0);
	};

	LBRACKET() {
	    return this.getToken(n1qlParser.LBRACKET, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACKET() {
	    return this.getToken(n1qlParser.RBRACKET, 0);
	};

	RBRACKET_ICASE() {
	    return this.getToken(n1qlParser.RBRACKET_ICASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitPath(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_expr;
    }

	c_expr() {
	    return this.getTypedRuleContext(C_exprContext,0);
	};

	NOT() {
	    return this.getToken(n1qlParser.NOT, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	EXISTS() {
	    return this.getToken(n1qlParser.EXISTS, 0);
	};

	PLUS() {
	    return this.getToken(n1qlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(n1qlParser.MINUS, 0);
	};

	STAR() {
	    return this.getToken(n1qlParser.STAR, 0);
	};

	DIV() {
	    return this.getToken(n1qlParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(n1qlParser.MOD, 0);
	};

	CONCAT() {
	    return this.getToken(n1qlParser.CONCAT, 0);
	};

	AND() {
	    return this.getToken(n1qlParser.AND, 0);
	};

	OR() {
	    return this.getToken(n1qlParser.OR, 0);
	};

	EQ() {
	    return this.getToken(n1qlParser.EQ, 0);
	};

	DEQ() {
	    return this.getToken(n1qlParser.DEQ, 0);
	};

	NE() {
	    return this.getToken(n1qlParser.NE, 0);
	};

	LT() {
	    return this.getToken(n1qlParser.LT, 0);
	};

	GT() {
	    return this.getToken(n1qlParser.GT, 0);
	};

	LE() {
	    return this.getToken(n1qlParser.LE, 0);
	};

	GE() {
	    return this.getToken(n1qlParser.GE, 0);
	};

	LIKE() {
	    return this.getToken(n1qlParser.LIKE, 0);
	};

	IN() {
	    return this.getToken(n1qlParser.IN, 0);
	};

	WITHIN() {
	    return this.getToken(n1qlParser.WITHIN, 0);
	};

	DOT() {
	    return this.getToken(n1qlParser.DOT, 0);
	};

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	IDENT_ICASE() {
	    return this.getToken(n1qlParser.IDENT_ICASE, 0);
	};

	LBRACKET() {
	    return this.getToken(n1qlParser.LBRACKET, 0);
	};

	RBRACKET() {
	    return this.getToken(n1qlParser.RBRACKET, 0);
	};

	RBRACKET_ICASE() {
	    return this.getToken(n1qlParser.RBRACKET_ICASE, 0);
	};

	COLON() {
	    return this.getToken(n1qlParser.COLON, 0);
	};

	BETWEEN() {
	    return this.getToken(n1qlParser.BETWEEN, 0);
	};

	b_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(B_exprContext);
	    } else {
	        return this.getTypedRuleContext(B_exprContext,i);
	    }
	};

	IS() {
	    return this.getToken(n1qlParser.IS, 0);
	};

	NULL() {
	    return this.getToken(n1qlParser.NULL, 0);
	};

	MISSING() {
	    return this.getToken(n1qlParser.MISSING, 0);
	};

	valued() {
	    return this.getTypedRuleContext(ValuedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitExpr(this);
		}
	}


}



class ValuedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_valued;
    }

	VALUED() {
	    return this.getToken(n1qlParser.VALUED, 0);
	};

	KNOWN() {
	    return this.getToken(n1qlParser.KNOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterValued(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitValued(this);
		}
	}


}



class C_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_c_expr;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	construction_expr() {
	    return this.getTypedRuleContext(Construction_exprContext,0);
	};

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	IDENT_ICASE() {
	    return this.getToken(n1qlParser.IDENT_ICASE, 0);
	};

	SELF() {
	    return this.getToken(n1qlParser.SELF, 0);
	};

	param_expr() {
	    return this.getTypedRuleContext(Param_exprContext,0);
	};

	function_expr() {
	    return this.getTypedRuleContext(Function_exprContext,0);
	};

	MINUS() {
	    return this.getToken(n1qlParser.MINUS, 0);
	};

	case_expr() {
	    return this.getTypedRuleContext(Case_exprContext,0);
	};

	collection_expr() {
	    return this.getTypedRuleContext(Collection_exprContext,0);
	};

	paren_expr() {
	    return this.getTypedRuleContext(Paren_exprContext,0);
	};

	COVER() {
	    return this.getToken(n1qlParser.COVER, 0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterC_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitC_expr(this);
		}
	}


}



class B_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_b_expr;
    }

	c_expr() {
	    return this.getTypedRuleContext(C_exprContext,0);
	};

	b_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(B_exprContext);
	    } else {
	        return this.getTypedRuleContext(B_exprContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(n1qlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(n1qlParser.MINUS, 0);
	};

	STAR() {
	    return this.getToken(n1qlParser.STAR, 0);
	};

	DIV() {
	    return this.getToken(n1qlParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(n1qlParser.MOD, 0);
	};

	CONCAT() {
	    return this.getToken(n1qlParser.CONCAT, 0);
	};

	DOT() {
	    return this.getToken(n1qlParser.DOT, 0);
	};

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	IDENT_ICASE() {
	    return this.getToken(n1qlParser.IDENT_ICASE, 0);
	};

	LBRACKET() {
	    return this.getToken(n1qlParser.LBRACKET, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	RBRACKET() {
	    return this.getToken(n1qlParser.RBRACKET, 0);
	};

	RBRACKET_ICASE() {
	    return this.getToken(n1qlParser.RBRACKET_ICASE, 0);
	};

	COLON() {
	    return this.getToken(n1qlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterB_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitB_expr(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_literal;
    }

	NULL() {
	    return this.getToken(n1qlParser.NULL, 0);
	};

	MISSING() {
	    return this.getToken(n1qlParser.MISSING, 0);
	};

	FALSE() {
	    return this.getToken(n1qlParser.FALSE, 0);
	};

	TRUE() {
	    return this.getToken(n1qlParser.TRUE, 0);
	};

	NUM() {
	    return this.getToken(n1qlParser.NUM, 0);
	};

	INT() {
	    return this.getToken(n1qlParser.INT, 0);
	};

	STR() {
	    return this.getToken(n1qlParser.STR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class Construction_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_construction_expr;
    }

	object() {
	    return this.getTypedRuleContext(ObjectContext,0);
	};

	array() {
	    return this.getTypedRuleContext(ArrayContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterConstruction_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitConstruction_expr(this);
		}
	}


}



class ObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_object;
    }

	LBRACE() {
	    return this.getToken(n1qlParser.LBRACE, 0);
	};

	opt_members() {
	    return this.getTypedRuleContext(Opt_membersContext,0);
	};

	RBRACE() {
	    return this.getToken(n1qlParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitObject(this);
		}
	}


}



class Opt_membersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_members;
    }

	members() {
	    return this.getTypedRuleContext(MembersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_members(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_members(this);
		}
	}


}



class MembersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_members;
    }

	member() {
	    return this.getTypedRuleContext(MemberContext,0);
	};

	members() {
	    return this.getTypedRuleContext(MembersContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterMembers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitMembers(this);
		}
	}


}



class MemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_member;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COLON() {
	    return this.getToken(n1qlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitMember(this);
		}
	}


}



class ArrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_array;
    }

	LBRACKET() {
	    return this.getToken(n1qlParser.LBRACKET, 0);
	};

	opt_exprs() {
	    return this.getTypedRuleContext(Opt_exprsContext,0);
	};

	RBRACKET() {
	    return this.getToken(n1qlParser.RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitArray(this);
		}
	}


}



class Opt_exprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_exprs;
    }

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_exprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_exprs(this);
		}
	}


}



class ExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_exprs;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitExprs(this);
		}
	}


}



class Param_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_param_expr;
    }

	NAMED_PARAM() {
	    return this.getToken(n1qlParser.NAMED_PARAM, 0);
	};

	POSITIONAL_PARAM() {
	    return this.getToken(n1qlParser.POSITIONAL_PARAM, 0);
	};

	NEXT_PARAM() {
	    return this.getToken(n1qlParser.NEXT_PARAM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterParam_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitParam_expr(this);
		}
	}


}



class Case_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_case_expr;
    }

	CASE() {
	    return this.getToken(n1qlParser.CASE, 0);
	};

	simple_or_searched_case() {
	    return this.getTypedRuleContext(Simple_or_searched_caseContext,0);
	};

	END() {
	    return this.getToken(n1qlParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterCase_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitCase_expr(this);
		}
	}


}



class Simple_or_searched_caseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_simple_or_searched_case;
    }

	simple_case() {
	    return this.getTypedRuleContext(Simple_caseContext,0);
	};

	searched_case() {
	    return this.getTypedRuleContext(Searched_caseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSimple_or_searched_case(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSimple_or_searched_case(this);
		}
	}


}



class Simple_caseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_simple_case;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	when_thens() {
	    return this.getTypedRuleContext(When_thensContext,0);
	};

	opt_else() {
	    return this.getTypedRuleContext(Opt_elseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSimple_case(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSimple_case(this);
		}
	}


}



class When_thensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_when_thens;
    }

	WHEN() {
	    return this.getToken(n1qlParser.WHEN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	THEN() {
	    return this.getToken(n1qlParser.THEN, 0);
	};

	when_thens() {
	    return this.getTypedRuleContext(When_thensContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterWhen_thens(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitWhen_thens(this);
		}
	}


}



class Searched_caseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_searched_case;
    }

	when_thens() {
	    return this.getTypedRuleContext(When_thensContext,0);
	};

	opt_else() {
	    return this.getTypedRuleContext(Opt_elseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSearched_case(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSearched_case(this);
		}
	}


}



class Opt_elseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_else;
    }

	ELSE() {
	    return this.getToken(n1qlParser.ELSE, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_else(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_else(this);
		}
	}


}



class Function_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_function_expr;
    }

	NTH_VALUE() {
	    return this.getToken(n1qlParser.NTH_VALUE, 0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	opt_from_first_last() {
	    return this.getTypedRuleContext(Opt_from_first_lastContext,0);
	};

	opt_nulls_treatment() {
	    return this.getTypedRuleContext(Opt_nulls_treatmentContext,0);
	};

	window_function_details() {
	    return this.getTypedRuleContext(Window_function_detailsContext,0);
	};

	function_name() {
	    return this.getTypedRuleContext(Function_nameContext,0);
	};

	opt_exprs() {
	    return this.getTypedRuleContext(Opt_exprsContext,0);
	};

	opt_filter() {
	    return this.getTypedRuleContext(Opt_filterContext,0);
	};

	opt_window_function() {
	    return this.getTypedRuleContext(Opt_window_functionContext,0);
	};

	agg_quantifier() {
	    return this.getTypedRuleContext(Agg_quantifierContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	STAR() {
	    return this.getToken(n1qlParser.STAR, 0);
	};

	long_func_name() {
	    return this.getTypedRuleContext(Long_func_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFunction_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFunction_expr(this);
		}
	}


}



class Function_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_function_name;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	REPLACE() {
	    return this.getToken(n1qlParser.REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterFunction_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitFunction_name(this);
		}
	}


}



class Collection_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_collection_expr;
    }

	collection_cond() {
	    return this.getTypedRuleContext(Collection_condContext,0);
	};

	collection_xform() {
	    return this.getTypedRuleContext(Collection_xformContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterCollection_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitCollection_expr(this);
		}
	}


}



class Collection_condContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_collection_cond;
    }

	ANY() {
	    return this.getToken(n1qlParser.ANY, 0);
	};

	coll_bindings() {
	    return this.getTypedRuleContext(Coll_bindingsContext,0);
	};

	satisfies() {
	    return this.getTypedRuleContext(SatisfiesContext,0);
	};

	END() {
	    return this.getToken(n1qlParser.END, 0);
	};

	SOME() {
	    return this.getToken(n1qlParser.SOME, 0);
	};

	EVERY() {
	    return this.getToken(n1qlParser.EVERY, 0);
	};

	AND() {
	    return this.getToken(n1qlParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterCollection_cond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitCollection_cond(this);
		}
	}


}



class Coll_bindingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_coll_bindings;
    }

	coll_binding() {
	    return this.getTypedRuleContext(Coll_bindingContext,0);
	};

	coll_bindings() {
	    return this.getTypedRuleContext(Coll_bindingsContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterColl_bindings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitColl_bindings(this);
		}
	}


}



class Coll_bindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_coll_binding;
    }

	variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableContext);
	    } else {
	        return this.getTypedRuleContext(VariableContext,i);
	    }
	};

	IN() {
	    return this.getToken(n1qlParser.IN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	WITHIN() {
	    return this.getToken(n1qlParser.WITHIN, 0);
	};

	COLON() {
	    return this.getToken(n1qlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterColl_binding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitColl_binding(this);
		}
	}


}



class SatisfiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_satisfies;
    }

	SATISFIES() {
	    return this.getToken(n1qlParser.SATISFIES, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSatisfies(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSatisfies(this);
		}
	}


}



class Collection_xformContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_collection_xform;
    }

	ARRAY() {
	    return this.getToken(n1qlParser.ARRAY, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	FOR() {
	    return this.getToken(n1qlParser.FOR, 0);
	};

	coll_bindings() {
	    return this.getTypedRuleContext(Coll_bindingsContext,0);
	};

	opt_when() {
	    return this.getTypedRuleContext(Opt_whenContext,0);
	};

	END() {
	    return this.getToken(n1qlParser.END, 0);
	};

	FIRST() {
	    return this.getToken(n1qlParser.FIRST, 0);
	};

	OBJECT() {
	    return this.getToken(n1qlParser.OBJECT, 0);
	};

	COLON() {
	    return this.getToken(n1qlParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterCollection_xform(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitCollection_xform(this);
		}
	}


}



class Paren_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_paren_expr;
    }

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	all_expr() {
	    return this.getTypedRuleContext(All_exprContext,0);
	};

	subquery_expr() {
	    return this.getTypedRuleContext(Subquery_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterParen_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitParen_expr(this);
		}
	}


}



class Subquery_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_subquery_expr;
    }

	CORRELATED() {
	    return this.getToken(n1qlParser.CORRELATED, 0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	fullselect() {
	    return this.getTypedRuleContext(FullselectContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSubquery_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSubquery_expr(this);
		}
	}


}



class Expr_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_expr_input;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	all_expr() {
	    return this.getTypedRuleContext(All_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterExpr_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitExpr_input(this);
		}
	}


}



class All_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_all_expr;
    }

	all() {
	    return this.getTypedRuleContext(AllContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	DISTINCT() {
	    return this.getToken(n1qlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterAll_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitAll_expr(this);
		}
	}


}



class Opt_window_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_window_clause;
    }

	WINDOW() {
	    return this.getToken(n1qlParser.WINDOW, 0);
	};

	window_list() {
	    return this.getTypedRuleContext(Window_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_window_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_window_clause(this);
		}
	}


}



class Window_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_window_list;
    }

	window_term() {
	    return this.getTypedRuleContext(Window_termContext,0);
	};

	window_list() {
	    return this.getTypedRuleContext(Window_listContext,0);
	};

	COMMA() {
	    return this.getToken(n1qlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterWindow_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitWindow_list(this);
		}
	}


}



class Window_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_window_term;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	AS() {
	    return this.getToken(n1qlParser.AS, 0);
	};

	window_specification() {
	    return this.getTypedRuleContext(Window_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterWindow_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitWindow_term(this);
		}
	}


}



class Window_specificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_window_specification;
    }

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	opt_window_name() {
	    return this.getTypedRuleContext(Opt_window_nameContext,0);
	};

	opt_window_partition() {
	    return this.getTypedRuleContext(Opt_window_partitionContext,0);
	};

	opt_order_by() {
	    return this.getTypedRuleContext(Opt_order_byContext,0);
	};

	opt_window_frame() {
	    return this.getTypedRuleContext(Opt_window_frameContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterWindow_specification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitWindow_specification(this);
		}
	}


}



class Opt_window_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_window_name;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_window_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_window_name(this);
		}
	}


}



class Opt_window_partitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_window_partition;
    }

	PARTITION() {
	    return this.getToken(n1qlParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(n1qlParser.BY, 0);
	};

	exprs() {
	    return this.getTypedRuleContext(ExprsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_window_partition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_window_partition(this);
		}
	}


}



class Opt_window_frameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_window_frame;
    }

	window_frame_modifier() {
	    return this.getTypedRuleContext(Window_frame_modifierContext,0);
	};

	window_frame_extents() {
	    return this.getTypedRuleContext(Window_frame_extentsContext,0);
	};

	opt_window_frame_exclusion() {
	    return this.getTypedRuleContext(Opt_window_frame_exclusionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_window_frame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_window_frame(this);
		}
	}


}



class Window_frame_modifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_window_frame_modifier;
    }

	ROWS() {
	    return this.getToken(n1qlParser.ROWS, 0);
	};

	RANGE() {
	    return this.getToken(n1qlParser.RANGE, 0);
	};

	GROUPS() {
	    return this.getToken(n1qlParser.GROUPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterWindow_frame_modifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitWindow_frame_modifier(this);
		}
	}


}



class Opt_window_frame_exclusionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_window_frame_exclusion;
    }

	EXCLUDE() {
	    return this.getToken(n1qlParser.EXCLUDE, 0);
	};

	NO() {
	    return this.getToken(n1qlParser.NO, 0);
	};

	OTHERS() {
	    return this.getToken(n1qlParser.OTHERS, 0);
	};

	CURRENT() {
	    return this.getToken(n1qlParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(n1qlParser.ROW, 0);
	};

	TIES() {
	    return this.getToken(n1qlParser.TIES, 0);
	};

	GROUP() {
	    return this.getToken(n1qlParser.GROUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_window_frame_exclusion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_window_frame_exclusion(this);
		}
	}


}



class Window_frame_extentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_window_frame_extents;
    }

	window_frame_extent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Window_frame_extentContext);
	    } else {
	        return this.getTypedRuleContext(Window_frame_extentContext,i);
	    }
	};

	BETWEEN() {
	    return this.getToken(n1qlParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(n1qlParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterWindow_frame_extents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitWindow_frame_extents(this);
		}
	}


}



class Window_frame_extentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_window_frame_extent;
    }

	UNBOUNDED() {
	    return this.getToken(n1qlParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(n1qlParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(n1qlParser.FOLLOWING, 0);
	};

	CURRENT() {
	    return this.getToken(n1qlParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(n1qlParser.ROW, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	window_frame_valexpr_modifier() {
	    return this.getTypedRuleContext(Window_frame_valexpr_modifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterWindow_frame_extent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitWindow_frame_extent(this);
		}
	}


}



class Window_frame_valexpr_modifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_window_frame_valexpr_modifier;
    }

	PRECEDING() {
	    return this.getToken(n1qlParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(n1qlParser.FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterWindow_frame_valexpr_modifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitWindow_frame_valexpr_modifier(this);
		}
	}


}



class Opt_nulls_treatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_nulls_treatment;
    }

	nulls_treatment() {
	    return this.getTypedRuleContext(Nulls_treatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_nulls_treatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_nulls_treatment(this);
		}
	}


}



class Nulls_treatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_nulls_treatment;
    }

	RESPECT() {
	    return this.getToken(n1qlParser.RESPECT, 0);
	};

	NULLS() {
	    return this.getToken(n1qlParser.NULLS, 0);
	};

	IGNORE() {
	    return this.getToken(n1qlParser.IGNORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterNulls_treatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitNulls_treatment(this);
		}
	}


}



class Opt_from_first_lastContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_from_first_last;
    }

	FROM() {
	    return this.getToken(n1qlParser.FROM, 0);
	};

	first_last() {
	    return this.getTypedRuleContext(First_lastContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_from_first_last(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_from_first_last(this);
		}
	}


}



class Agg_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_agg_quantifier;
    }

	ALL() {
	    return this.getToken(n1qlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(n1qlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterAgg_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitAgg_quantifier(this);
		}
	}


}



class Opt_filterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_filter;
    }

	FILTER() {
	    return this.getToken(n1qlParser.FILTER, 0);
	};

	LPAREN() {
	    return this.getToken(n1qlParser.LPAREN, 0);
	};

	where() {
	    return this.getTypedRuleContext(WhereContext,0);
	};

	RPAREN() {
	    return this.getToken(n1qlParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_filter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_filter(this);
		}
	}


}



class Opt_window_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_window_function;
    }

	window_function_details() {
	    return this.getTypedRuleContext(Window_function_detailsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_window_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_window_function(this);
		}
	}


}



class Window_function_detailsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_window_function_details;
    }

	OVER() {
	    return this.getToken(n1qlParser.OVER, 0);
	};

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	window_specification() {
	    return this.getTypedRuleContext(Window_specificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterWindow_function_details(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitWindow_function_details(this);
		}
	}


}



class Start_transactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_start_transaction;
    }

	start_or_begin() {
	    return this.getTypedRuleContext(Start_or_beginContext,0);
	};

	transaction() {
	    return this.getTypedRuleContext(TransactionContext,0);
	};

	opt_isolation_level() {
	    return this.getTypedRuleContext(Opt_isolation_levelContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterStart_transaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitStart_transaction(this);
		}
	}


}



class Commit_transactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_commit_transaction;
    }

	COMMIT() {
	    return this.getToken(n1qlParser.COMMIT, 0);
	};

	opt_transaction() {
	    return this.getTypedRuleContext(Opt_transactionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterCommit_transaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitCommit_transaction(this);
		}
	}


}



class Rollback_transactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_rollback_transaction;
    }

	ROLLBACK() {
	    return this.getToken(n1qlParser.ROLLBACK, 0);
	};

	opt_transaction() {
	    return this.getTypedRuleContext(Opt_transactionContext,0);
	};

	opt_savepoint() {
	    return this.getTypedRuleContext(Opt_savepointContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterRollback_transaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitRollback_transaction(this);
		}
	}


}



class Start_or_beginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_start_or_begin;
    }

	START() {
	    return this.getToken(n1qlParser.START, 0);
	};

	BEGIN() {
	    return this.getToken(n1qlParser.BEGIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterStart_or_begin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitStart_or_begin(this);
		}
	}


}



class Opt_transactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_transaction;
    }

	transaction() {
	    return this.getTypedRuleContext(TransactionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_transaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_transaction(this);
		}
	}


}



class TransactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_transaction;
    }

	TRAN() {
	    return this.getToken(n1qlParser.TRAN, 0);
	};

	TRANSACTION() {
	    return this.getToken(n1qlParser.TRANSACTION, 0);
	};

	WORK() {
	    return this.getToken(n1qlParser.WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitTransaction(this);
		}
	}


}



class Opt_savepointContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_savepoint;
    }

	TO() {
	    return this.getToken(n1qlParser.TO, 0);
	};

	SAVEPOINT() {
	    return this.getToken(n1qlParser.SAVEPOINT, 0);
	};

	savepoint_name() {
	    return this.getTypedRuleContext(Savepoint_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_savepoint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_savepoint(this);
		}
	}


}



class Savepoint_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_savepoint_name;
    }

	IDENT() {
	    return this.getToken(n1qlParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSavepoint_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSavepoint_name(this);
		}
	}


}



class Opt_isolation_levelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_opt_isolation_level;
    }

	isolation_level() {
	    return this.getTypedRuleContext(Isolation_levelContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterOpt_isolation_level(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitOpt_isolation_level(this);
		}
	}


}



class Isolation_levelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_isolation_level;
    }

	ISOLATION() {
	    return this.getToken(n1qlParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(n1qlParser.LEVEL, 0);
	};

	isolation_val() {
	    return this.getTypedRuleContext(Isolation_valContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIsolation_level(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIsolation_level(this);
		}
	}


}



class Isolation_valContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_isolation_val;
    }

	READ() {
	    return this.getToken(n1qlParser.READ, 0);
	};

	COMMITTED() {
	    return this.getToken(n1qlParser.COMMITTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterIsolation_val(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitIsolation_val(this);
		}
	}


}



class Set_transaction_isolationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_set_transaction_isolation;
    }

	SET() {
	    return this.getToken(n1qlParser.SET, 0);
	};

	TRANSACTION() {
	    return this.getToken(n1qlParser.TRANSACTION, 0);
	};

	isolation_level() {
	    return this.getTypedRuleContext(Isolation_levelContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSet_transaction_isolation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSet_transaction_isolation(this);
		}
	}


}



class SavepointContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = n1qlParser.RULE_savepoint;
    }

	SAVEPOINT() {
	    return this.getToken(n1qlParser.SAVEPOINT, 0);
	};

	savepoint_name() {
	    return this.getTypedRuleContext(Savepoint_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.enterSavepoint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof n1qlListener ) {
	        listener.exitSavepoint(this);
		}
	}


}




n1qlParser.InputContext = InputContext; 
n1qlParser.Opt_trailerContext = Opt_trailerContext; 
n1qlParser.Stmt_bodyContext = Stmt_bodyContext; 
n1qlParser.StmtContext = StmtContext; 
n1qlParser.AdviseContext = AdviseContext; 
n1qlParser.Opt_indexContext = Opt_indexContext; 
n1qlParser.ExplainContext = ExplainContext; 
n1qlParser.PrepareContext = PrepareContext; 
n1qlParser.Opt_forceContext = Opt_forceContext; 
n1qlParser.Opt_nameContext = Opt_nameContext; 
n1qlParser.From_or_asContext = From_or_asContext; 
n1qlParser.ExecuteContext = ExecuteContext; 
n1qlParser.Execute_usingContext = Execute_usingContext; 
n1qlParser.InferContext = InferContext; 
n1qlParser.Opt_keyspace_collectionContext = Opt_keyspace_collectionContext; 
n1qlParser.Opt_infer_usingContext = Opt_infer_usingContext; 
n1qlParser.Opt_infer_ustat_withContext = Opt_infer_ustat_withContext; 
n1qlParser.Infer_ustat_withContext = Infer_ustat_withContext; 
n1qlParser.Select_stmtContext = Select_stmtContext; 
n1qlParser.Dml_stmtContext = Dml_stmtContext; 
n1qlParser.Ddl_stmtContext = Ddl_stmtContext; 
n1qlParser.Role_stmtContext = Role_stmtContext; 
n1qlParser.Index_stmtContext = Index_stmtContext; 
n1qlParser.Scope_stmtContext = Scope_stmtContext; 
n1qlParser.Collection_stmtContext = Collection_stmtContext; 
n1qlParser.Function_stmtContext = Function_stmtContext; 
n1qlParser.Transaction_stmtContext = Transaction_stmtContext; 
n1qlParser.FullselectContext = FullselectContext; 
n1qlParser.Select_termsContext = Select_termsContext; 
n1qlParser.Select_termContext = Select_termContext; 
n1qlParser.SubselectContext = SubselectContext; 
n1qlParser.From_selectContext = From_selectContext; 
n1qlParser.Select_fromContext = Select_fromContext; 
n1qlParser.Select_clauseContext = Select_clauseContext; 
n1qlParser.ProjectionContext = ProjectionContext; 
n1qlParser.Opt_quantifierContext = Opt_quantifierContext; 
n1qlParser.RawContext = RawContext; 
n1qlParser.ProjectsContext = ProjectsContext; 
n1qlParser.ProjectContext = ProjectContext; 
n1qlParser.Opt_as_aliasContext = Opt_as_aliasContext; 
n1qlParser.As_aliasContext = As_aliasContext; 
n1qlParser.AliasContext = AliasContext; 
n1qlParser.Opt_fromContext = Opt_fromContext; 
n1qlParser.FromContext = FromContext; 
n1qlParser.From_termContext = From_termContext; 
n1qlParser.Simple_from_termContext = Simple_from_termContext; 
n1qlParser.UnnestContext = UnnestContext; 
n1qlParser.Keyspace_termContext = Keyspace_termContext; 
n1qlParser.Keyspace_pathContext = Keyspace_pathContext; 
n1qlParser.Namespace_termContext = Namespace_termContext; 
n1qlParser.Namespace_nameContext = Namespace_nameContext; 
n1qlParser.Bucket_nameContext = Bucket_nameContext; 
n1qlParser.Scope_nameContext = Scope_nameContext; 
n1qlParser.Keyspace_nameContext = Keyspace_nameContext; 
n1qlParser.Opt_useContext = Opt_useContext; 
n1qlParser.Use_optionsContext = Use_optionsContext; 
n1qlParser.Use_keysContext = Use_keysContext; 
n1qlParser.Use_indexContext = Use_indexContext; 
n1qlParser.Join_hintContext = Join_hintContext; 
n1qlParser.Opt_primaryContext = Opt_primaryContext; 
n1qlParser.Index_refsContext = Index_refsContext; 
n1qlParser.Index_refContext = Index_refContext; 
n1qlParser.Use_hash_optionContext = Use_hash_optionContext; 
n1qlParser.Opt_use_del_updContext = Opt_use_del_updContext; 
n1qlParser.Opt_join_typeContext = Opt_join_typeContext; 
n1qlParser.Opt_outerContext = Opt_outerContext; 
n1qlParser.On_keysContext = On_keysContext; 
n1qlParser.On_keyContext = On_keyContext; 
n1qlParser.Opt_letContext = Opt_letContext; 
n1qlParser.Let_Context = Let_Context; 
n1qlParser.BindingsContext = BindingsContext; 
n1qlParser.BindingContext = BindingContext; 
n1qlParser.Opt_withContext = Opt_withContext; 
n1qlParser.With_listContext = With_listContext; 
n1qlParser.With_termContext = With_termContext; 
n1qlParser.Opt_whereContext = Opt_whereContext; 
n1qlParser.WhereContext = WhereContext; 
n1qlParser.Opt_groupContext = Opt_groupContext; 
n1qlParser.GroupContext = GroupContext; 
n1qlParser.Group_termsContext = Group_termsContext; 
n1qlParser.Group_termContext = Group_termContext; 
n1qlParser.Opt_lettingContext = Opt_lettingContext; 
n1qlParser.LettingContext = LettingContext; 
n1qlParser.Opt_havingContext = Opt_havingContext; 
n1qlParser.HavingContext = HavingContext; 
n1qlParser.Opt_order_byContext = Opt_order_byContext; 
n1qlParser.Order_byContext = Order_byContext; 
n1qlParser.Sort_termsContext = Sort_termsContext; 
n1qlParser.Sort_termContext = Sort_termContext; 
n1qlParser.Opt_dirContext = Opt_dirContext; 
n1qlParser.DirContext = DirContext; 
n1qlParser.Opt_order_nullsContext = Opt_order_nullsContext; 
n1qlParser.First_lastContext = First_lastContext; 
n1qlParser.NullsContext = NullsContext; 
n1qlParser.Opt_limitContext = Opt_limitContext; 
n1qlParser.LimitContext = LimitContext; 
n1qlParser.Opt_offsetContext = Opt_offsetContext; 
n1qlParser.OffsetContext = OffsetContext; 
n1qlParser.InsertContext = InsertContext; 
n1qlParser.Simple_keyspace_refContext = Simple_keyspace_refContext; 
n1qlParser.Keyspace_refContext = Keyspace_refContext; 
n1qlParser.Opt_values_headerContext = Opt_values_headerContext; 
n1qlParser.KeyContext = KeyContext; 
n1qlParser.Values_listContext = Values_listContext; 
n1qlParser.ValuesContext = ValuesContext; 
n1qlParser.Next_valuesContext = Next_valuesContext; 
n1qlParser.Key_val_exprContext = Key_val_exprContext; 
n1qlParser.Key_val_options_exprContext = Key_val_options_exprContext; 
n1qlParser.Opt_returningContext = Opt_returningContext; 
n1qlParser.ReturningContext = ReturningContext; 
n1qlParser.Returns_Context = Returns_Context; 
n1qlParser.Key_expr_headerContext = Key_expr_headerContext; 
n1qlParser.Value_expr_headerContext = Value_expr_headerContext; 
n1qlParser.Options_expr_headerContext = Options_expr_headerContext; 
n1qlParser.Key_val_options_expr_headerContext = Key_val_options_expr_headerContext; 
n1qlParser.UpsertContext = UpsertContext; 
n1qlParser.Delete_Context = Delete_Context; 
n1qlParser.UpdateContext = UpdateContext; 
n1qlParser.SetContext = SetContext; 
n1qlParser.Set_termsContext = Set_termsContext; 
n1qlParser.Set_termContext = Set_termContext; 
n1qlParser.Function_meta_exprContext = Function_meta_exprContext; 
n1qlParser.Opt_update_forContext = Opt_update_forContext; 
n1qlParser.Update_forContext = Update_forContext; 
n1qlParser.Update_dimensionsContext = Update_dimensionsContext; 
n1qlParser.Update_dimensionContext = Update_dimensionContext; 
n1qlParser.Update_bindingContext = Update_bindingContext; 
n1qlParser.VariableContext = VariableContext; 
n1qlParser.Opt_whenContext = Opt_whenContext; 
n1qlParser.UnsetContext = UnsetContext; 
n1qlParser.Unset_termsContext = Unset_termsContext; 
n1qlParser.Unset_termContext = Unset_termContext; 
n1qlParser.MergeContext = MergeContext; 
n1qlParser.Opt_use_mergeContext = Opt_use_mergeContext; 
n1qlParser.Opt_keyContext = Opt_keyContext; 
n1qlParser.Merge_actionsContext = Merge_actionsContext; 
n1qlParser.Opt_merge_delete_insertContext = Opt_merge_delete_insertContext; 
n1qlParser.Opt_merge_insertContext = Opt_merge_insertContext; 
n1qlParser.Merge_updateContext = Merge_updateContext; 
n1qlParser.Merge_deleteContext = Merge_deleteContext; 
n1qlParser.Merge_insertContext = Merge_insertContext; 
n1qlParser.Grant_roleContext = Grant_roleContext; 
n1qlParser.Role_listContext = Role_listContext; 
n1qlParser.Role_nameContext = Role_nameContext; 
n1qlParser.Keyspace_scope_listContext = Keyspace_scope_listContext; 
n1qlParser.Keyspace_scopeContext = Keyspace_scopeContext; 
n1qlParser.User_listContext = User_listContext; 
n1qlParser.UserContext = UserContext; 
n1qlParser.Revoke_roleContext = Revoke_roleContext; 
n1qlParser.Create_scopeContext = Create_scopeContext; 
n1qlParser.Drop_scopeContext = Drop_scopeContext; 
n1qlParser.Create_collectionContext = Create_collectionContext; 
n1qlParser.Drop_collectionContext = Drop_collectionContext; 
n1qlParser.Flush_collectionContext = Flush_collectionContext; 
n1qlParser.Flush_or_truncateContext = Flush_or_truncateContext; 
n1qlParser.Create_indexContext = Create_indexContext; 
n1qlParser.Opt_primary_nameContext = Opt_primary_nameContext; 
n1qlParser.Index_nameContext = Index_nameContext; 
n1qlParser.Opt_index_nameContext = Opt_index_nameContext; 
n1qlParser.Named_keyspace_refContext = Named_keyspace_refContext; 
n1qlParser.Simple_named_keyspace_refContext = Simple_named_keyspace_refContext; 
n1qlParser.Named_scope_refContext = Named_scope_refContext; 
n1qlParser.Index_partitionContext = Index_partitionContext; 
n1qlParser.Opt_index_usingContext = Opt_index_usingContext; 
n1qlParser.Index_usingContext = Index_usingContext; 
n1qlParser.Opt_index_withContext = Opt_index_withContext; 
n1qlParser.Index_withContext = Index_withContext; 
n1qlParser.Index_termsContext = Index_termsContext; 
n1qlParser.Index_termContext = Index_termContext; 
n1qlParser.Index_term_exprContext = Index_term_exprContext; 
n1qlParser.Index_exprContext = Index_exprContext; 
n1qlParser.AllContext = AllContext; 
n1qlParser.Index_whereContext = Index_whereContext; 
n1qlParser.Opt_ikattrContext = Opt_ikattrContext; 
n1qlParser.IkattrContext = IkattrContext; 
n1qlParser.Drop_indexContext = Drop_indexContext; 
n1qlParser.Alter_indexContext = Alter_indexContext; 
n1qlParser.Build_indexContext = Build_indexContext; 
n1qlParser.Create_functionContext = Create_functionContext; 
n1qlParser.Opt_replaceContext = Opt_replaceContext; 
n1qlParser.Func_nameContext = Func_nameContext; 
n1qlParser.Short_func_nameContext = Short_func_nameContext; 
n1qlParser.Long_func_nameContext = Long_func_nameContext; 
n1qlParser.Parm_listContext = Parm_listContext; 
n1qlParser.Parameter_termsContext = Parameter_termsContext; 
n1qlParser.Func_bodyContext = Func_bodyContext; 
n1qlParser.Drop_functionContext = Drop_functionContext; 
n1qlParser.Execute_functionContext = Execute_functionContext; 
n1qlParser.Update_statisticsContext = Update_statisticsContext; 
n1qlParser.Opt_forContext = Opt_forContext; 
n1qlParser.Update_stat_termsContext = Update_stat_termsContext; 
n1qlParser.Update_stat_termContext = Update_stat_termContext; 
n1qlParser.PathContext = PathContext; 
n1qlParser.ExprContext = ExprContext; 
n1qlParser.ValuedContext = ValuedContext; 
n1qlParser.C_exprContext = C_exprContext; 
n1qlParser.B_exprContext = B_exprContext; 
n1qlParser.LiteralContext = LiteralContext; 
n1qlParser.Construction_exprContext = Construction_exprContext; 
n1qlParser.ObjectContext = ObjectContext; 
n1qlParser.Opt_membersContext = Opt_membersContext; 
n1qlParser.MembersContext = MembersContext; 
n1qlParser.MemberContext = MemberContext; 
n1qlParser.ArrayContext = ArrayContext; 
n1qlParser.Opt_exprsContext = Opt_exprsContext; 
n1qlParser.ExprsContext = ExprsContext; 
n1qlParser.Param_exprContext = Param_exprContext; 
n1qlParser.Case_exprContext = Case_exprContext; 
n1qlParser.Simple_or_searched_caseContext = Simple_or_searched_caseContext; 
n1qlParser.Simple_caseContext = Simple_caseContext; 
n1qlParser.When_thensContext = When_thensContext; 
n1qlParser.Searched_caseContext = Searched_caseContext; 
n1qlParser.Opt_elseContext = Opt_elseContext; 
n1qlParser.Function_exprContext = Function_exprContext; 
n1qlParser.Function_nameContext = Function_nameContext; 
n1qlParser.Collection_exprContext = Collection_exprContext; 
n1qlParser.Collection_condContext = Collection_condContext; 
n1qlParser.Coll_bindingsContext = Coll_bindingsContext; 
n1qlParser.Coll_bindingContext = Coll_bindingContext; 
n1qlParser.SatisfiesContext = SatisfiesContext; 
n1qlParser.Collection_xformContext = Collection_xformContext; 
n1qlParser.Paren_exprContext = Paren_exprContext; 
n1qlParser.Subquery_exprContext = Subquery_exprContext; 
n1qlParser.Expr_inputContext = Expr_inputContext; 
n1qlParser.All_exprContext = All_exprContext; 
n1qlParser.Opt_window_clauseContext = Opt_window_clauseContext; 
n1qlParser.Window_listContext = Window_listContext; 
n1qlParser.Window_termContext = Window_termContext; 
n1qlParser.Window_specificationContext = Window_specificationContext; 
n1qlParser.Opt_window_nameContext = Opt_window_nameContext; 
n1qlParser.Opt_window_partitionContext = Opt_window_partitionContext; 
n1qlParser.Opt_window_frameContext = Opt_window_frameContext; 
n1qlParser.Window_frame_modifierContext = Window_frame_modifierContext; 
n1qlParser.Opt_window_frame_exclusionContext = Opt_window_frame_exclusionContext; 
n1qlParser.Window_frame_extentsContext = Window_frame_extentsContext; 
n1qlParser.Window_frame_extentContext = Window_frame_extentContext; 
n1qlParser.Window_frame_valexpr_modifierContext = Window_frame_valexpr_modifierContext; 
n1qlParser.Opt_nulls_treatmentContext = Opt_nulls_treatmentContext; 
n1qlParser.Nulls_treatmentContext = Nulls_treatmentContext; 
n1qlParser.Opt_from_first_lastContext = Opt_from_first_lastContext; 
n1qlParser.Agg_quantifierContext = Agg_quantifierContext; 
n1qlParser.Opt_filterContext = Opt_filterContext; 
n1qlParser.Opt_window_functionContext = Opt_window_functionContext; 
n1qlParser.Window_function_detailsContext = Window_function_detailsContext; 
n1qlParser.Start_transactionContext = Start_transactionContext; 
n1qlParser.Commit_transactionContext = Commit_transactionContext; 
n1qlParser.Rollback_transactionContext = Rollback_transactionContext; 
n1qlParser.Start_or_beginContext = Start_or_beginContext; 
n1qlParser.Opt_transactionContext = Opt_transactionContext; 
n1qlParser.TransactionContext = TransactionContext; 
n1qlParser.Opt_savepointContext = Opt_savepointContext; 
n1qlParser.Savepoint_nameContext = Savepoint_nameContext; 
n1qlParser.Opt_isolation_levelContext = Opt_isolation_levelContext; 
n1qlParser.Isolation_levelContext = Isolation_levelContext; 
n1qlParser.Isolation_valContext = Isolation_valContext; 
n1qlParser.Set_transaction_isolationContext = Set_transaction_isolationContext; 
n1qlParser.SavepointContext = SavepointContext; 
