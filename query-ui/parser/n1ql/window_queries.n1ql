SELECT la1 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A' LETTING la1 = SUM(d.c3);
SELECT SUM(d.c3) AS sc1 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A' GROUP BY d.c1 HAVING SUM(d.c3) > 0;
SELECT SUM(d.c3) AS sc1 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A' ;
SELECT SUM(d.c3) AS sc1 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A' ORDER BY sc1;
SELECT SUM(d.c3) AS sc1 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A' ORDER BY COUNT(d.c3);
SELECT  d.c1, d.c2, d.c4,     SUM(d.c1) OVER() AS w1,      SUM(d.c4) OVER(PARTITION BY d.c1) AS w2,     SUM(d.c4) OVER(PARTITION BY d.c1, d.c2) AS w3 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A' ORDER BY COUNT(d.c1) OVER() DESC;
  SELECT d.c1, d.c3, d.c4,        SUM(d.c4) OVER(ORDER BY d.c3) AS w1,       SUM(d.c4) OVER(ORDER BY d.c1 DESC NULLS LAST, d.c3 ASC NULLS FIRST) AS w2,       SUM(d.c4) OVER(ORDER BY d.c1 DESC NULLS FIRST, d.c3 ASC NULLS LAST) AS w3 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
  SELECT d.c1, d.c2, d.c3, d.c4, d.c5,        SUM(d.c4) OVER(PARTITION BY d.c1 ORDER BY d.c3) AS w1,        SUM(d.c4) OVER(PARTITION BY d.c1 ORDER BY d.c2 DESC NULLS LAST, d.c3 ASC NULLS FIRST) AS w2,        COUNT(d.c4) OVER(PARTITION BY d.c1 ORDER BY d.c2 DESC NULLS FIRST, d.c3 ASC NULLS LAST) AS w3 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
SELECT         SUM(COUNT(d.c2)) OVER() AS w1,        SUM(COUNT(d.c3)) OVER(PARTITION BY MIN(d.c1) ORDER BY MAX(d.c2)) AS w2 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
SELECT d.c2, COUNT(d.c3) AS a1, COUNT(d.c2) AS a2, MIN(d.c3) AS a3, MAX(d.c4) AS a4,         SUM(COUNT(d.c3)) OVER() AS w1,        SUM(COUNT(d.c2)) OVER(PARTITION BY MIN(d.c3) ORDER BY MAX(d.c4)) AS w2 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A' GROUP BY d.c2;
   SELECT d.c1, d.c2, d.c3, d.c4, d.c5, MIN(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3, d.c2 NULLS LAST ROWS UNBOUNDED PRECEDING) AS w1, MAX(d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c3, d.c3 DESC ROWS CURRENT ROW) AS w2, MEAN(d.c5) OVER (PARTITION BY UPPER(d.c1), d.c2, d.c1 ORDER BY d.c3, d.c5 ROWS 1 PRECEDING) AS w3, MEAN(DISTINCT d.c5) OVER (PARTITION BY d.c2, LOWER(d.c1) ORDER BY d.c3, d.c1 ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS w4, FIRST_VALUE(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3, d.c1 ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING EXCLUDE NO OTHERS) AS w5, RANK() OVER (PARTITION BY d.c4 ORDER BY TO_STRING(d.c1), d.c2 ASC NULLS LAST) AS w6, DENSE_RANK() OVER (PARTITION BY d.c2 ORDER BY d.c3, d.c4) AS w7 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
SELECT d.c1, d.c2, d.c3, d.c4, d.c5, SUM(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3, d.c1 DESC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS w1, SUM(DISTINCT d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c4, d.c3 ROWS BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING) AS w2, AVG(DISTINCT d.c5) OVER (PARTITION BY UPPER(d.c1), d.c2, d.c1 ORDER BY d.c3, d.c5 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS w3, RATIO_TO_REPORT(d.c5) OVER (PARTITION BY d.c2, LOWER(d.c1) ORDER BY d.c3, d.c1 DESC ROWS BETWEEN CURRENT ROW AND CURRENT ROW) AS w4, LAST_VALUE(d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c1, d.c3 ROWS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE CURRENT ROW) AS w5, ROW_NUMBER() OVER (PARTITION BY TO_STRING(d.c1) ORDER BY d.c2, d.c3 DESC) AS w6, NTILE(3) OVER (PARTITION BY d.c2 ORDER BY d.c4, d.c3 NULLS LAST) AS w7 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
SELECT d.c1, d.c2, d.c3, d.c4, d.c5, COUNT(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3, LOWER(d.c1) ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) AS w1, COUNT(DISTINCT d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c3, d.c4 DESC NULLS LAST ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS w2, COUNTN(d.c5) OVER (PARTITION BY UPPER(d.c1), d.c2, d.c1 ORDER BY d.c5, d.c3 ROWS BETWEEN 1 PRECEDING AND 2 PRECEDING) AS w3, COUNTN(DISTINCT d.c5) OVER (PARTITION BY d.c2, LOWER(d.c1) ORDER BY d.c1, d.c3 ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS w4, NTH_VALUE(d.c5, 2) OVER (PARTITION BY d.c4, d.c2, d.c1 ORDER BY d.c3 ROWS BETWEEN 2 FOLLOWING AND 4 FOLLOWING EXCLUDE TIES) AS w5, PERCENT_RANK() OVER (PARTITION BY TO_STRING(d.c1) ORDER BY d.c3, d.c2) AS w6, CUME_DIST() OVER (PARTITION BY d.c2 ORDER BY d.c1, d.c3 DESC NULLS FIRST) AS w7 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
SELECT d.c1, d.c2, d.c3, d.c4, d.c5, STDDEV(d.c5) OVER (PARTITION BY d.c2 ORDER BY UPPER(d.c1), d.c3 ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING) AS w1, STDDEV_POP(d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY UPPER(d.c1), d.c3 ROWS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) AS w2, VARIANCE(d.c5) OVER (PARTITION BY UPPER(d.c1), d.c2, d.c1 ORDER BY UPPER(d.c1), d.c3 ROWS BETWEEN 2 FOLLOWING AND 4 FOLLOWING) AS w3, VAR_POP(d.c5) OVER (PARTITION BY d.c2, LOWER(d.c1) ORDER BY UPPER(d.c1), d.c3 ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS w4, NTH_VALUE(d.c5, 1) FROM LAST OVER (PARTITION BY d.c2 ORDER BY UPPER(d.c1), d.c3 ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING EXCLUDE GROUP) AS w5, LAG(d.c5, 3, 'None') OVER (PARTITION BY TO_STRING(d.c2) ORDER BY d.c3, ABS(d.c3)) AS w6, LEAD(d.c5, 2, 1000) OVER (PARTITION BY d.c2 ORDER BY d.c3 DESC, ABS(d.c3)) AS w7 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
SELECT d.c1, d.c2, d.c3, d.c4, d.c5, MIN(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3, d.c2 NULLS LAST RANGE UNBOUNDED PRECEDING) AS w1, MAX(d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c3, d.c3 DESC RANGE CURRENT ROW) AS w2, MEAN(d.c5) OVER (PARTITION BY UPPER(d.c1), d.c2, d.c1 ORDER BY d.c3 RANGE 1 PRECEDING) AS w3, MEAN(DISTINCT d.c5) OVER (PARTITION BY d.c2, LOWER(d.c1) ORDER BY d.c3 RANGE BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS w4, FIRST_VALUE(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3 RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING EXCLUDE NO OTHERS) AS w5, RANK() OVER (PARTITION BY TO_STRING(d.c1) ORDER BY d.c3 ASC NULLS LAST) AS w6, DENSE_RANK() OVER (PARTITION BY d.c2 ORDER BY d.c3) AS w7 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
SELECT d.c1, d.c2, d.c3, d.c4, d.c5, SUM(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3, d.c1 DESC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS w1, SUM(DISTINCT d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c3 RANGE BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING) AS w2, AVG(DISTINCT d.c5) OVER (PARTITION BY UPPER(d.c1), d.c2, d.c1 ORDER BY d.c3, d.c5 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS w3, RATIO_TO_REPORT(d.c5) OVER (PARTITION BY d.c2, LOWER(d.c1) ORDER BY d.c3, d.c1 DESC RANGE BETWEEN CURRENT ROW AND CURRENT ROW) AS w4, LAST_VALUE(d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c3 RANGE BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE CURRENT ROW) AS w5, ROW_NUMBER() OVER (PARTITION BY TO_STRING(d.c1) ORDER BY d.c3 DESC) AS w6, NTILE(3) OVER (PARTITION BY d.c2 ORDER BY d.c3 NULLS LAST) AS w7 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
SELECT d.c1, d.c2, d.c3, d.c4, d.c5, COUNT(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3 RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING) AS w1, COUNT(DISTINCT d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c3, d.c4 DESC NULLS LAST RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS w2, COUNTN(d.c5) OVER (PARTITION BY UPPER(d.c1), d.c2, d.c1 ORDER BY d.c3 RANGE BETWEEN 1 PRECEDING AND 2 PRECEDING) AS w3, COUNTN(DISTINCT d.c5) OVER (PARTITION BY d.c2, LOWER(d.c1) ORDER BY d.c3 RANGE BETWEEN 1 PRECEDING AND CURRENT ROW) AS w4, NTH_VALUE(d.c5, 2) OVER (PARTITION BY d.c4, d.c2, d.c1 ORDER BY d.c3 RANGE BETWEEN 2 FOLLOWING AND 4 FOLLOWING EXCLUDE TIES) AS w5, PERCENT_RANK() OVER (PARTITION BY TO_STRING(d.c1) ORDER BY d.c3) AS w6, CUME_DIST() OVER (PARTITION BY d.c2 ORDER BY d.c3 DESC NULLS FIRST) AS w7 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
SELECT d.c1, d.c2, d.c3, d.c4, d.c5, STDDEV(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3 RANGE BETWEEN 1 PRECEDING AND 2 FOLLOWING) AS w1, STDDEV_POP(d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c3 RANGE BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) AS w2, VARIANCE(d.c5) OVER (PARTITION BY UPPER(d.c1), d.c2, d.c1 ORDER BY d.c3 RANGE BETWEEN 2 FOLLOWING AND 4 FOLLOWING) AS w3, VAR_POP(d.c5) OVER (PARTITION BY d.c2, LOWER(d.c1) ORDER BY d.c3 RANGE BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS w4, NTH_VALUE(d.c5, 2) FROM LAST OVER (PARTITION BY d.c2, d.c1 ORDER BY d.c3 RANGE BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING EXCLUDE GROUP) AS w5, LAG(d.c5, 3, 'None') OVER (PARTITION BY TO_STRING(d.c1) ORDER BY d.c3) AS w6, LEAD(d.c5, 2, 1000) OVER (PARTITION BY d.c2 ORDER BY d.c3 DESC) AS w7 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
       SELECT d.c1, d.c2, d.c3, d.c4, d.c5, MIN(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3, d.c2 NULLS LAST GROUPS UNBOUNDED PRECEDING) AS w1, MAX(d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c3, d.c3 DESC GROUPS CURRENT ROW) AS w2, MEAN(d.c5) OVER (PARTITION BY UPPER(d.c1), d.c2, d.c1 ORDER BY d.c3, d.c5 GROUPS 1 PRECEDING) AS w3, MEAN(DISTINCT d.c5) OVER (PARTITION BY d.c2, LOWER(d.c1) ORDER BY d.c3, d.c1 GROUPS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS w4, FIRST_VALUE(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3, d.c1 GROUPS BETWEEN 1 PRECEDING AND 2 FOLLOWING EXCLUDE NO OTHERS) AS w5, RANK() OVER (PARTITION BY d.c4 ORDER BY TO_STRING(d.c1), d.c2 ASC NULLS LAST) AS w6, DENSE_RANK() OVER (PARTITION BY d.c2 ORDER BY d.c3, d.c4) AS w7 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
SELECT d.c1, d.c2, d.c3, d.c4, d.c5, SUM(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3, d.c1 DESC NULLS FIRST GROUPS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS w1, SUM(DISTINCT d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c4, d.c3 GROUPS BETWEEN UNBOUNDED PRECEDING AND 2 FOLLOWING) AS w2, AVG(DISTINCT d.c5) OVER (PARTITION BY UPPER(d.c1), d.c2, d.c1 ORDER BY d.c3, d.c5 GROUPS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS w3, RATIO_TO_REPORT(d.c5) OVER (PARTITION BY d.c2, LOWER(d.c1) ORDER BY d.c3, d.c1 DESC GROUPS BETWEEN CURRENT ROW AND CURRENT ROW) AS w4, LAST_VALUE(d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c1, d.c3 GROUPS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE CURRENT ROW) AS w5, ROW_NUMBER() OVER (PARTITION BY TO_STRING(d.c1) ORDER BY d.c2, d.c3 DESC) AS w6, NTILE(3) OVER (PARTITION BY d.c2 ORDER BY d.c4, d.c3 NULLS LAST) AS w7 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
SELECT d.c1, d.c2, d.c3, d.c4, d.c5, COUNT(d.c5) OVER (PARTITION BY d.c2 ORDER BY d.c3, LOWER(d.c1) GROUPS BETWEEN CURRENT ROW AND 2 FOLLOWING) AS w1, COUNT(DISTINCT d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY d.c3, d.c4 DESC NULLS LAST GROUPS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS w2, COUNTN(d.c5) OVER (PARTITION BY UPPER(d.c1), d.c2, d.c1 ORDER BY d.c5, d.c3 GROUPS BETWEEN 1 PRECEDING AND 2 PRECEDING) AS w3, COUNTN(DISTINCT d.c5) OVER (PARTITION BY d.c2, LOWER(d.c1) ORDER BY d.c1, d.c3 GROUPS BETWEEN 1 PRECEDING AND CURRENT ROW) AS w4, NTH_VALUE(d.c5, 2) OVER (PARTITION BY d.c4, d.c2, d.c1 ORDER BY d.c3 GROUPS BETWEEN 2 FOLLOWING AND 4 FOLLOWING EXCLUDE TIES) AS w5, PERCENT_RANK() OVER (PARTITION BY TO_STRING(d.c1) ORDER BY d.c3, d.c2) AS w6, CUME_DIST() OVER (PARTITION BY d.c2 ORDER BY d.c1, d.c3 DESC NULLS FIRST) AS w7 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
SELECT d.c1, d.c2, d.c3, d.c4, d.c5, STDDEV(d.c5) OVER (PARTITION BY d.c2 ORDER BY UPPER(d.c1), d.c3 GROUPS BETWEEN 1 PRECEDING AND 2 FOLLOWING) AS w1, STDDEV_POP(d.c5) OVER (PARTITION BY d.c1, d.c2 ORDER BY UPPER(d.c1), d.c3 GROUPS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) AS w2, VARIANCE(d.c5) OVER (PARTITION BY UPPER(d.c1), d.c2, d.c1 ORDER BY UPPER(d.c1), d.c3 GROUPS BETWEEN 2 FOLLOWING AND 4 FOLLOWING) AS w3, VAR_POP(d.c5) OVER (PARTITION BY d.c2, LOWER(d.c1) ORDER BY UPPER(d.c1), d.c3 GROUPS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) AS w4, NTH_VALUE(d.c5, 1) FROM LAST OVER (PARTITION BY d.c2 ORDER BY UPPER(d.c1), d.c3 GROUPS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING EXCLUDE GROUP) AS w5, LAG(d.c5, 3, 'None') OVER (PARTITION BY TO_STRING(d.c2) ORDER BY d.c3, ABS(d.c3)) AS w6, LEAD(d.c5, 2, 1000) OVER (PARTITION BY d.c2 ORDER BY d.c3 DESC, ABS(d.c3)) AS w7 FROM default AS d WHERE d.test_id = 'window' AND d.c1 = 'A';
  