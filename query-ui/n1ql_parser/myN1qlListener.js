
/*
 * This is a listener for the N1QL parser generated by analyzing the goyacc N1QL parser.
 */

import antlr4 from '/ui/web_modules/antlr4.js';
import n1qlLexer from './n1qlParser/n1qlLexer.js';
import n1qlParser from './n1qlParser/n1qlParser.js';
import n1qlListener from './n1qlParser/n1qlListener.js';
//import * as fs from 'fs';

const { CommonTokenStream, InputStream } = antlr4;

let debug = false;

function ctxToString(ctx) {
  let result = "";
  result += "cc: " + ctx.getChildCount();
  result += ", text: " + ctx.getText();
  if (ctx.className)
    result += ", name: " + ctx.className().getText();
  if (ctx.LBRACKET)
    result += ", lbracket: " + ctx.LBRACKET();

  if (ctx.getChildCount() > 0) {
    result += '\n\t';
    ctx.children.forEach(child => {
        result += child.getText();
        if (child.symbol)
          result += " (" + child.symbol.type + ")";
        result += ", ";
      }
    );
  }


  return result;
}

// convenience function to determine if a child is a certain kind of token
function childIs(child,tokenNum) {
  return(child.symbol && child.symbol.type == tokenNum);
}

class myN1qlListener extends n1qlListener {

  constructor(currentParseResult) {
    super();
    this.currentParseResult = currentParseResult;
  }

  // Enter a parse tree produced by n1qlParser#input.
  enterInput(ctx) {
    if (debug) console.log("enterInput: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#input.
  exitInput(ctx) {
    if (debug) console.log("exitInput: " + ctxToString(ctx));
    }


  // Enter a parse tree produced by n1qlParser#opt_trailer.
  enterOpt_trailer(ctx) {
    if (debug) console.log("enterOpt_trailer: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_trailer.
  exitOpt_trailer(ctx) {
    if (debug) console.log("exitOpt_trailer: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#stmt_body.
  enterStmt_body(ctx) {
    if (debug) console.log("enterStmt_body: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#stmt_body.
  exitStmt_body(ctx) {
    if (ctx.getChildCount() > 0)
      this.currentParseResult.stmt_category = ctx.children[0].ruleIndex;
    if (debug) console.log("exitStmt_body: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#stmt.
  enterStmt(ctx) {
    if (debug) console.log("enterStmt: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#stmt.
  exitStmt(ctx) {
    if (debug) console.log("exitStmt: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#advise.
  enterAdvise(ctx) {
    if (debug) console.log("enterAdvise: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#advise.
  exitAdvise(ctx) {
    if (debug) console.log("exitAdvise: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_index.
  enterOpt_index(ctx) {
    if (debug) console.log("enterOpt_index: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_index.
  exitOpt_index(ctx) {
    if (debug) console.log("exitOpt_index: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#explain.
  enterExplain(ctx) {
    if (debug) console.log("enterExplain: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#explain.
  exitExplain(ctx) {
    if (debug) console.log("exitExplain: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#prepare.
  enterPrepare(ctx) {
    if (debug) console.log("enterPrepare: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#prepare.
  exitPrepare(ctx) {
    if (debug) console.log("exitPrepare: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_force.
  enterOpt_force(ctx) {
    if (debug) console.log("enterOpt_force: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_force.
  exitOpt_force(ctx) {
    if (debug) console.log("exitOpt_force: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_name.
  enterOpt_name(ctx) {
    if (debug) console.log("enterOpt_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_name.
  exitOpt_name(ctx) {
    if (debug) console.log("exitOpt_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#from_or_as.
  enterFrom_or_as(ctx) {
    if (debug) console.log("enterFrom_or_as: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#from_or_as.
  exitFrom_or_as(ctx) {
    if (debug) console.log("exitFrom_or_as: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#execute.
  enterExecute(ctx) {
    if (debug) console.log("enterExecute: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#execute.
  exitExecute(ctx) {
    if (debug) console.log("exitExecute: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#execute_using.
  enterExecute_using(ctx) {
    if (debug) console.log("enterExecute_using: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#execute_using.
  exitExecute_using(ctx) {
    if (debug) console.log("exitExecute_using: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#infer.
  enterInfer(ctx) {
    if (debug) console.log("enterInfer: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#infer.
  exitInfer(ctx) {
    if (debug) console.log("exitInfer: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_keyspace_collection.
  enterOpt_keyspace_collection(ctx) {
    if (debug) console.log("enterOpt_keyspace_collection: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_keyspace_collection.
  exitOpt_keyspace_collection(ctx) {
    if (debug) console.log("exitOpt_keyspace_collection: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_infer_using.
  enterOpt_infer_using(ctx) {
    if (debug) console.log("enterOpt_infer_using: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_infer_using.
  exitOpt_infer_using(ctx) {
    if (debug) console.log("exitOpt_infer_using: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_infer_ustat_with.
  enterOpt_infer_ustat_with(ctx) {
    if (debug) console.log("enterOpt_infer_ustat_with: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_infer_ustat_with.
  exitOpt_infer_ustat_with(ctx) {
    if (debug) console.log("exitOpt_infer_ustat_with: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#infer_ustat_with.
  enterInfer_ustat_with(ctx) {
    if (debug) console.log("enterInfer_ustat_with: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#infer_ustat_with.
  exitInfer_ustat_with(ctx) {
    if (debug) console.log("exitInfer_ustat_with: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#select_stmt.
  enterSelect_stmt(ctx) {
    if (debug) console.log("enterSelect_stmt: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#select_stmt.
  exitSelect_stmt(ctx) {
    this.currentParseResult.stmt = n1qlParser.RULE_select_stmt;
    if (debug) console.log("exitSelect_stmt: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#dml_stmt.
  enterDml_stmt(ctx) {
    if (debug) console.log("enterDml_stmt: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#dml_stmt.
  exitDml_stmt(ctx) {
    if (ctx.getChildCount() > 0)
      this.currentParserResult.stmt = ctx.children[0].ruleIndex;

    if (debug) console.log("exitDml_stmt: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#ddl_stmt.
  enterDdl_stmt(ctx) {
    if (debug) console.log("enterDdl_stmt: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#ddl_stmt.
  exitDdl_stmt(ctx) {
    if (ctx.getChildCount() > 0)
      this.currentParserResult.stmt = ctx.children[0].ruleIndex;
    if (debug) console.log("exitDdl_stmt: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#role_stmt.
  enterRole_stmt(ctx) {
    if (debug) console.log("enterRole_stmt: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#role_stmt.
  exitRole_stmt(ctx) {
    if (debug) console.log("exitRole_stmt: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#index_stmt.
  enterIndex_stmt(ctx) {
    if (debug) console.log("enterIndex_stmt: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#index_stmt.
  exitIndex_stmt(ctx) {
    if (debug) console.log("exitIndex_stmt: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#scope_stmt.
  enterScope_stmt(ctx) {
    if (debug) console.log("enterScope_stmt: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#scope_stmt.
  exitScope_stmt(ctx) {
    if (debug) console.log("exitScope_stmt: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#collection_stmt.
  enterCollection_stmt(ctx) {
    if (debug) console.log("enterCollection_stmt: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#collection_stmt.
  exitCollection_stmt(ctx) {
    if (debug) console.log("exitCollection_stmt: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#function_stmt.
  enterFunction_stmt(ctx) {
    if (debug) console.log("enterFunction_stmt: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#function_stmt.
  exitFunction_stmt(ctx) {
    if (debug) console.log("exitFunction_stmt: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#transaction_stmt.
  enterTransaction_stmt(ctx) {
    if (debug) console.log("enterTransaction_stmt: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#transaction_stmt.
  exitTransaction_stmt(ctx) {
    if (debug) console.log("exitTransaction_stmt: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#fullselect.
  enterFullselect(ctx) {
    if (debug) console.log("enterFullselect: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#fullselect.
  exitFullselect(ctx) {
    if (debug) console.log("exitFullselect: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#select_terms.
  enterSelect_terms(ctx) {
    if (debug) console.log("enterSelect_terms: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#select_terms.
  exitSelect_terms(ctx) {
    if (debug) console.log("exitSelect_terms: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#select_term.
  enterSelect_term(ctx) {
    if (debug) console.log("enterSelect_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#select_term.
  exitSelect_term(ctx) {
    if (debug) console.log("exitSelect_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#subselect.
  enterSubselect(ctx) {
    if (debug) console.log("enterSubselect: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#subselect.
  exitSubselect(ctx) {
    if (debug) console.log("exitSubselect: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#from_select.
  enterFrom_select(ctx) {
    if (debug) console.log("enterFrom_select: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#from_select.
  exitFrom_select(ctx) {
    if (debug) console.log("exitFrom_select: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#select_from.
  enterSelect_from(ctx) {
    if (debug) console.log("enterSelect_from: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#select_from.
  exitSelect_from(ctx) {
    if (debug) console.log("exitSelect_from: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#select_clause.
  enterSelect_clause(ctx) {
    if (debug) console.log("enterSelect_clause: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#select_clause.
  exitSelect_clause(ctx) {
    if (debug) console.log("exitSelect_clause: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#projection.
  enterProjection(ctx) {
    if (debug) console.log("enterProjection: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#projection.
  exitProjection(ctx) {
    if (debug) console.log("exitProjection: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_quantifier.
  enterOpt_quantifier(ctx) {
    if (debug) console.log("enterOpt_quantifier: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_quantifier.
  exitOpt_quantifier(ctx) {
    if (debug) console.log("exitOpt_quantifier: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#raw.
  enterRaw(ctx) {
    if (debug) console.log("enterRaw: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#raw.
  exitRaw(ctx) {  if (debug) console.log("exitRaw: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#projects.
  enterProjects(ctx) {
    if (debug) console.log("enterProjects: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#projects.
  exitProjects(ctx) {
    if (debug) console.log("exitProjects: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#project.
  enterProject(ctx) {
    if (debug) console.log("enterProject: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#project.
  exitProject(ctx) {
    if (debug) console.log("exitProject: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_as_alias.
  enterOpt_as_alias(ctx) {
    if (debug) console.log("enterOpt_as_alias: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_as_alias.
  exitOpt_as_alias(ctx) {
    if (debug) console.log("exitOpt_as_alias: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#as_alias.
  enterAs_alias(ctx) {
    if (debug) console.log("enterAs_alias: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#as_alias.
  exitAs_alias(ctx) {
    if (debug) console.log("exitAs_alias: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#alias.
  enterAlias(ctx) {
    if (debug) console.log("enterAlias: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#alias.
  exitAlias(ctx) {
    if (debug) console.log("exitAlias: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_from.
  enterOpt_from(ctx) {
    if (debug) console.log("enterOpt_from: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_from.
  exitOpt_from(ctx) {
    if (debug) console.log("exitOpt_from: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#from.
  enterFrom(ctx) {
    if (debug) console.log("enterFrom: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#from.
  exitFrom(ctx) {
    if (debug) console.log("exitFrom: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#from_term.
  enterFrom_term(ctx) {
    if (debug) console.log("enterFrom_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#from_term.
  exitFrom_term(ctx) {
    if (debug) console.log("exitFrom_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#simple_from_term.
  enterSimple_from_term(ctx) {
    if (debug) console.log("enterSimple_from_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#simple_from_term.
  exitSimple_from_term(ctx) {
    if (debug) console.log("exitSimple_from_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#unnest.
  enterUnnest(ctx) {
    if (debug) console.log("enterUnnest: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#unnest.
  exitUnnest(ctx) {
    if (debug) console.log("exitUnnest: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#keyspace_term.
  enterKeyspace_term(ctx) {
    if (debug) console.log("enterKeyspace_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#keyspace_term.
  exitKeyspace_term(ctx) {
    if (debug) console.log("exitKeyspace_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#keyspace_path.
  enterKeyspace_path(ctx) {
    if (debug) console.log("enterKeyspace_path: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#keyspace_path.
  exitKeyspace_path(ctx) {
    if (debug) console.log("exitKeyspace_path: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#namespace_term.
  enterNamespace_term(ctx) {
    if (debug) console.log("enterNamespace_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#namespace_term.
  exitNamespace_term(ctx) {
    if (debug) console.log("exitNamespace_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#namespace_name.
  enterNamespace_name(ctx) {
    if (debug) console.log("enterNamespace_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#namespace_name.
  exitNamespace_name(ctx) {
    if (debug) console.log("exitNamespace_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#bucket_name.
  enterBucket_name(ctx) {
    if (debug) console.log("enterBucket_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#bucket_name.
  exitBucket_name(ctx) {
    if (debug) console.log("exitBucket_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#scope_name.
  enterScope_name(ctx) {
    if (debug) console.log("enterScope_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#scope_name.
  exitScope_name(ctx) {
    if (debug) console.log("exitScope_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#keyspace_name.
  enterKeyspace_name(ctx) {
    if (debug) console.log("enterKeyspace_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#keyspace_name.
  exitKeyspace_name(ctx) {
    if (debug) console.log("exitKeyspace_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_use.
  enterOpt_use(ctx) {
    if (debug) console.log("enterOpt_use: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_use.
  exitOpt_use(ctx) {
    if (debug) console.log("exitOpt_use: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#use_options.
  enterUse_options(ctx) {
    if (debug) console.log("enterUse_options: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#use_options.
  exitUse_options(ctx) {
    if (debug) console.log("exitUse_options: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#use_keys.
  enterUse_keys(ctx) {
    if (debug) console.log("enterUse_keys: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#use_keys.
  exitUse_keys(ctx) {
    if (debug) console.log("exitUse_keys: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#use_index.
  enterUse_index(ctx) {
    if (debug) console.log("enterUse_index: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#use_index.
  exitUse_index(ctx) {
    if (debug) console.log("exitUse_index: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#join_hint.
  enterJoin_hint(ctx) {
    if (debug) console.log("enterJoin_hint: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#join_hint.
  exitJoin_hint(ctx) {
    if (debug) console.log("exitJoin_hint: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_primary.
  enterOpt_primary(ctx) {
    if (debug) console.log("enterOpt_primary: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_primary.
  exitOpt_primary(ctx) {
    if (debug) console.log("exitOpt_primary: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#index_refs.
  enterIndex_refs(ctx) {
    if (debug) console.log("enterIndex_refs: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#index_refs.
  exitIndex_refs(ctx) {
    if (debug) console.log("exitIndex_refs: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#index_ref.
  enterIndex_ref(ctx) {
    if (debug) console.log("enterIndex_ref: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#index_ref.
  exitIndex_ref(ctx) {
    if (debug) console.log("exitIndex_ref: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#use_hash_option.
  enterUse_hash_option(ctx) {
    if (debug) console.log("enterUse_hash_option: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#use_hash_option.
  exitUse_hash_option(ctx) {
    if (debug) console.log("exitUse_hash_option: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_use_del_upd.
  enterOpt_use_del_upd(ctx) {
    if (debug) console.log("enterOpt_use_del_upd: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_use_del_upd.
  exitOpt_use_del_upd(ctx) {
    if (debug) console.log("exitOpt_use_del_upd: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_join_type.
  enterOpt_join_type(ctx) {
    if (debug) console.log("enterOpt_join_type: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_join_type.
  exitOpt_join_type(ctx) {
    if (debug) console.log("exitOpt_join_type: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_outer.
  enterOpt_outer(ctx) {
    if (debug) console.log("enterOpt_outer: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_outer.
  exitOpt_outer(ctx) {
    if (debug) console.log("exitOpt_outer: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#on_keys.
  enterOn_keys(ctx) {
    if (debug) console.log("enterOn_keys: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#on_keys.
  exitOn_keys(ctx) {
    if (debug) console.log("exitOn_keys: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#on_key.
  enterOn_key(ctx) {
    if (debug) console.log("enterOn_key: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#on_key.
  exitOn_key(ctx) {
    if (debug) console.log("exitOn_key: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_let.
  enterOpt_let(ctx) {
    if (debug) console.log("enterOpt_let: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_let.
  exitOpt_let(ctx) {
    if (debug) console.log("exitOpt_let: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#let_.
  enterLet_(ctx) {
    if (debug) console.log("enterLet_: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#let_.
  exitLet_(ctx) {
    if (debug) console.log("exitLet_: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#bindings.
  enterBindings(ctx) {
    if (debug) console.log("enterBindings: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#bindings.
  exitBindings(ctx) {
    if (debug) console.log("exitBindings: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#binding.
  enterBinding(ctx) {
    if (debug) console.log("enterBinding: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#binding.
  exitBinding(ctx) {
    if (debug) console.log("exitBinding: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_with.
  enterOpt_with(ctx) {
    if (debug) console.log("enterOpt_with: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_with.
  exitOpt_with(ctx) {
    if (debug) console.log("exitOpt_with: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#with_list.
  enterWith_list(ctx) {
    if (debug) console.log("enterWith_list: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#with_list.
  exitWith_list(ctx) {
    if (debug) console.log("exitWith_list: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#with_term.
  enterWith_term(ctx) {
    if (debug) console.log("enterWith_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#with_term.
  exitWith_term(ctx) {
    if (debug) console.log("exitWith_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_where.
  enterOpt_where(ctx) {
    if (debug) console.log("enterOpt_where: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_where.
  exitOpt_where(ctx) {
    if (debug) console.log("exitOpt_where: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#where.
  enterWhere(ctx) {
    if (debug) console.log("enterWhere: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#where.
  exitWhere(ctx) {
    if (ctx.getChildCount() >= 2)
      this.currentParseResult.where = ctx.children[1].getText();
    if (debug) console.log("exitWhere: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_group.
  enterOpt_group(ctx) {
    if (debug) console.log("enterOpt_group: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_group.
  exitOpt_group(ctx) {
    if (debug) console.log("exitOpt_group: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#group.
  enterGroup(ctx) {
    if (debug) console.log("enterGroup: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#group.
  exitGroup(ctx) {
    if (debug) console.log("exitGroup: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#group_terms.
  enterGroup_terms(ctx) {
    if (debug) console.log("enterGroup_terms: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#group_terms.
  exitGroup_terms(ctx) {
    if (debug) console.log("exitGroup_terms: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#group_term.
  enterGroup_term(ctx) {
    if (debug) console.log("enterGroup_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#group_term.
  exitGroup_term(ctx) {
    if (debug) console.log("exitGroup_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_letting.
  enterOpt_letting(ctx) {
    if (debug) console.log("enterOpt_letting: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_letting.
  exitOpt_letting(ctx) {
    if (debug) console.log("exitOpt_letting: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#letting.
  enterLetting(ctx) {
    if (debug) console.log("enterLetting: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#letting.
  exitLetting(ctx) {
    if (debug) console.log("exitLetting: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_having.
  enterOpt_having(ctx) {
    if (debug) console.log("enterOpt_having: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_having.
  exitOpt_having(ctx) {
    if (debug) console.log("exitOpt_having: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#having.
  enterHaving(ctx) {
    if (debug) console.log("enterHaving: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#having.
  exitHaving(ctx) {
    if (debug) console.log("exitHaving: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_order_by.
  enterOpt_order_by(ctx) {
    if (debug) console.log("enterOpt_order_by: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_order_by.
  exitOpt_order_by(ctx) {
    if (debug) console.log("exitOpt_order_by: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#order_by.
  enterOrder_by(ctx) {
    if (debug) console.log("enterOrder_by: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#order_by.
  exitOrder_by(ctx) {
    if (debug) console.log("exitOrder_by: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#sort_terms.
  enterSort_terms(ctx) {
    if (debug) console.log("enterSort_terms: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#sort_terms.
  exitSort_terms(ctx) {
    if (debug) console.log("exitSort_terms: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#sort_term.
  enterSort_term(ctx) {
    if (debug) console.log("enterSort_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#sort_term.
  exitSort_term(ctx) {
    if (debug) console.log("exitSort_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_dir.
  enterOpt_dir(ctx) {
    if (debug) console.log("enterOpt_dir: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_dir.
  exitOpt_dir(ctx) {
    if (debug) console.log("exitOpt_dir: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#dir.
  enterDir(ctx) {
    if (debug) console.log("enterDir: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#dir.
  exitDir(ctx) {  if (debug) console.log("exitDir: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_order_nulls.
  enterOpt_order_nulls(ctx) {
    if (debug) console.log("enterOpt_order_nulls: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_order_nulls.
  exitOpt_order_nulls(ctx) {
    if (debug) console.log("exitOpt_order_nulls: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#first_last.
  enterFirst_last(ctx) {
    if (debug) console.log("enterFirst_last: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#first_last.
  exitFirst_last(ctx) {
    if (debug) console.log("exitFirst_last: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#nulls.
  enterNulls(ctx) {
    if (debug) console.log("enterNulls: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#nulls.
  exitNulls(ctx) {
    if (debug) console.log("exitNulls: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_limit.
  enterOpt_limit(ctx) {
    if (debug) console.log("enterOpt_limit: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_limit.
  exitOpt_limit(ctx) {
    if (debug) console.log("exitOpt_limit: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#limit.
  enterLimit(ctx) {
    if (debug) console.log("enterLimit: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#limit.
  exitLimit(ctx) {
    if (debug) console.log("exitLimit: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_offset.
  enterOpt_offset(ctx) {
    if (debug) console.log("enterOpt_offset: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_offset.
  exitOpt_offset(ctx) {
    if (debug) console.log("exitOpt_offset: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#offset.
  enterOffset(ctx) {
    if (debug) console.log("enterOffset: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#offset.
  exitOffset(ctx) {
    if (debug) console.log("exitOffset: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#insert.
  enterInsert(ctx) {
    if (debug) console.log("enterInsert: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#insert.
  exitInsert(ctx) {
    if (debug) console.log("exitInsert: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#simple_keyspace_ref.
  enterSimple_keyspace_ref(ctx) {
    if (debug) console.log("enterSimple_keyspace_ref: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#simple_keyspace_ref.
  exitSimple_keyspace_ref(ctx) {
    if (debug) console.log("exitSimple_keyspace_ref: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#keyspace_ref.
  enterKeyspace_ref(ctx) {
    if (debug) console.log("enterKeyspace_ref: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#keyspace_ref.
  exitKeyspace_ref(ctx) {
    if (debug) console.log("exitKeyspace_ref: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_values_header.
  enterOpt_values_header(ctx) {
    if (debug) console.log("enterOpt_values_header: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_values_header.
  exitOpt_values_header(ctx) {
    if (debug) console.log("exitOpt_values_header: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#key.
  enterKey(ctx) {
    if (debug) console.log("enterKey: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#key.
  exitKey(ctx) {  if (debug) console.log("exitKey: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#values_list.
  enterValues_list(ctx) {
    if (debug) console.log("enterValues_list: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#values_list.
  exitValues_list(ctx) {
    if (debug) console.log("exitValues_list: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#values.
  enterValues(ctx) {
    if (debug) console.log("enterValues: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#values.
  exitValues(ctx) {
    if (debug) console.log("exitValues: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#next_values.
  enterNext_values(ctx) {
    if (debug) console.log("enterNext_values: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#next_values.
  exitNext_values(ctx) {
    if (debug) console.log("exitNext_values: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#key_val_expr.
  enterKey_val_expr(ctx) {
    if (debug) console.log("enterKey_val_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#key_val_expr.
  exitKey_val_expr(ctx) {
    if (debug) console.log("exitKey_val_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#key_val_options_expr.
  enterKey_val_options_expr(ctx) {
    if (debug) console.log("enterKey_val_options_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#key_val_options_expr.
  exitKey_val_options_expr(ctx) {
    if (debug) console.log("exitKey_val_options_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_returning.
  enterOpt_returning(ctx) {
    if (debug) console.log("enterOpt_returning: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_returning.
  exitOpt_returning(ctx) {
    if (debug) console.log("exitOpt_returning: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#returning.
  enterReturning(ctx) {
    if (debug) console.log("enterReturning: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#returning.
  exitReturning(ctx) {
    if (debug) console.log("exitReturning: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#returns_.
  enterReturns_(ctx) {
    if (debug) console.log("enterReturns_: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#returns_.
  exitReturns_(ctx) {
    if (debug) console.log("exitReturns_: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#key_expr_header.
  enterKey_expr_header(ctx) {
    if (debug) console.log("enterKey_expr_header: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#key_expr_header.
  exitKey_expr_header(ctx) {
    if (debug) console.log("exitKey_expr_header: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#value_expr_header.
  enterValue_expr_header(ctx) {
    if (debug) console.log("enterValue_expr_header: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#value_expr_header.
  exitValue_expr_header(ctx) {
    if (debug) console.log("exitValue_expr_header: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#options_expr_header.
  enterOptions_expr_header(ctx) {
    if (debug) console.log("enterOptions_expr_header: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#options_expr_header.
  exitOptions_expr_header(ctx) {
    if (debug) console.log("exitOptions_expr_header: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#key_val_options_expr_header.
  enterKey_val_options_expr_header(ctx) {
    if (debug) console.log("enterKey_val_options_expr_header: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#key_val_options_expr_header.
  exitKey_val_options_expr_header(ctx) {
    if (debug) console.log("exitKey_val_options_expr_header: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#upsert.
  enterUpsert(ctx) {
    if (debug) console.log("enterUpsert: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#upsert.
  exitUpsert(ctx) {
    if (debug) console.log("exitUpsert: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#delete_.
  enterDelete_(ctx) {
    if (debug) if (debug) console.log("enterDelete_: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#delete_.
  exitDelete_(ctx) {
    if (debug) console.log("exitDelete_: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#update.
  enterUpdate(ctx) {
    if (debug) console.log("enterUpdate: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#update.
  exitUpdate(ctx) {
    if (debug) console.log("exitUpdate: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#set.
  enterSet(ctx) {
    if (debug) console.log("enterSet: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#set.
  exitSet(ctx) {  if (debug) console.log("exitSet: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#set_terms.
  enterSet_terms(ctx) {
    if (debug) console.log("enterSet_terms: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#set_terms.
  exitSet_terms(ctx) {
    if (debug) console.log("exitSet_terms: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#set_term.
  enterSet_term(ctx) {
    if (debug) console.log("enterSet_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#set_term.
  exitSet_term(ctx) {
    if (debug) console.log("exitSet_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#function_meta_expr.
  enterFunction_meta_expr(ctx) {
    if (debug) console.log("enterFunction_meta_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#function_meta_expr.
  exitFunction_meta_expr(ctx) {
    if (debug) console.log("exitFunction_meta_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_update_for.
  enterOpt_update_for(ctx) {
    if (debug) console.log("enterOpt_update_for: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_update_for.
  exitOpt_update_for(ctx) {
    if (debug) console.log("exitOpt_update_for: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#update_for.
  enterUpdate_for(ctx) {
    if (debug) console.log("enterUpdate_for: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#update_for.
  exitUpdate_for(ctx) {
    if (debug) console.log("exitUpdate_for: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#update_dimensions.
  enterUpdate_dimensions(ctx) {
    if (debug) console.log("enterUpdate_dimensions: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#update_dimensions.
  exitUpdate_dimensions(ctx) {
    if (debug) console.log("exitUpdate_dimensions: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#update_dimension.
  enterUpdate_dimension(ctx) {
    if (debug) console.log("enterUpdate_dimension: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#update_dimension.
  exitUpdate_dimension(ctx) {
    if (debug) console.log("exitUpdate_dimension: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#update_binding.
  enterUpdate_binding(ctx) {
    if (debug) console.log("enterUpdate_binding: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#update_binding.
  exitUpdate_binding(ctx) {
    if (debug) console.log("exitUpdate_binding: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#variable.
  enterVariable(ctx) {
    if (debug) console.log("enterVariable: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#variable.
  exitVariable(ctx) {
    if (debug) console.log("exitVariable: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_when.
  enterOpt_when(ctx) {
    if (debug) console.log("enterOpt_when: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_when.
  exitOpt_when(ctx) {
    if (debug) console.log("exitOpt_when: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#unset.
  enterUnset(ctx) {
    if (debug) console.log("enterUnset: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#unset.
  exitUnset(ctx) {
    if (debug) console.log("exitUnset: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#unset_terms.
  enterUnset_terms(ctx) {
    if (debug) console.log("enterUnset_terms: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#unset_terms.
  exitUnset_terms(ctx) {
    if (debug) console.log("exitUnset_terms: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#unset_term.
  enterUnset_term(ctx) {
    if (debug) console.log("enterUnset_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#unset_term.
  exitUnset_term(ctx) {
    if (debug) console.log("exitUnset_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#merge.
  enterMerge(ctx) {
    if (debug) console.log("enterMerge: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#merge.
  exitMerge(ctx) {
    if (debug) console.log("exitMerge: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_use_merge.
  enterOpt_use_merge(ctx) {
    if (debug) console.log("enterOpt_use_merge: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_use_merge.
  exitOpt_use_merge(ctx) {
    if (debug) console.log("exitOpt_use_merge: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_key.
  enterOpt_key(ctx) {
    if (debug) console.log("enterOpt_key: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_key.
  exitOpt_key(ctx) {
    if (debug) console.log("exitOpt_key: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#merge_actions.
  enterMerge_actions(ctx) {
    if (debug) console.log("enterMerge_actions: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#merge_actions.
  exitMerge_actions(ctx) {
    if (debug) console.log("exitMerge_actions: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_merge_delete_insert.
  enterOpt_merge_delete_insert(ctx) {
    if (debug) console.log("enterOpt_merge_delete_insert: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_merge_delete_insert.
  exitOpt_merge_delete_insert(ctx) {
    if (debug) console.log("exitOpt_merge_delete_insert: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_merge_insert.
  enterOpt_merge_insert(ctx) {
    if (debug) console.log("enterOpt_merge_insert: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_merge_insert.
  exitOpt_merge_insert(ctx) {
    if (debug) console.log("exitOpt_merge_insert: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#merge_update.
  enterMerge_update(ctx) {
    if (debug) console.log("enterMerge_update: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#merge_update.
  exitMerge_update(ctx) {
    if (debug) console.log("exitMerge_update: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#merge_delete.
  enterMerge_delete(ctx) {
    if (debug) console.log("enterMerge_delete: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#merge_delete.
  exitMerge_delete(ctx) {
    if (debug) console.log("exitMerge_delete: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#merge_insert.
  enterMerge_insert(ctx) {
    if (debug) console.log("enterMerge_insert: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#merge_insert.
  exitMerge_insert(ctx) {
    if (debug) console.log("exitMerge_insert: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#grant_role.
  enterGrant_role(ctx) {
    if (debug) console.log("enterGrant_role: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#grant_role.
  exitGrant_role(ctx) {
    if (debug) console.log("exitGrant_role: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#role_list.
  enterRole_list(ctx) {
    if (debug) console.log("enterRole_list: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#role_list.
  exitRole_list(ctx) {
    if (debug) console.log("exitRole_list: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#role_name.
  enterRole_name(ctx) {
    if (debug) console.log("enterRole_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#role_name.
  exitRole_name(ctx) {
    if (debug) console.log("exitRole_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#keyspace_scope_list.
  enterKeyspace_scope_list(ctx) {
    if (debug) console.log("enterKeyspace_scope_list: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#keyspace_scope_list.
  exitKeyspace_scope_list(ctx) {
    if (debug) console.log("exitKeyspace_scope_list: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#keyspace_scope.
  enterKeyspace_scope(ctx) {
    if (debug) console.log("enterKeyspace_scope: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#keyspace_scope.
  exitKeyspace_scope(ctx) {
    if (debug) console.log("exitKeyspace_scope: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#user_list.
  enterUser_list(ctx) {
    if (debug) console.log("enterUser_list: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#user_list.
  exitUser_list(ctx) {
    if (debug) console.log("exitUser_list: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#user.
  enterUser(ctx) {
    if (debug) console.log("enterUser: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#user.
  exitUser(ctx) {
    if (debug) console.log("exitUser: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#revoke_role.
  enterRevoke_role(ctx) {
    if (debug) console.log("enterRevoke_role: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#revoke_role.
  exitRevoke_role(ctx) {
    if (debug) console.log("exitRevoke_role: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#create_scope.
  enterCreate_scope(ctx) {
    if (debug) console.log("enterCreate_scope: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#create_scope.
  exitCreate_scope(ctx) {
    if (debug) console.log("exitCreate_scope: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#drop_scope.
  enterDrop_scope(ctx) {
    if (debug) console.log("enterDrop_scope: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#drop_scope.
  exitDrop_scope(ctx) {
    if (debug) console.log("exitDrop_scope: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#create_collection.
  enterCreate_collection(ctx) {
    if (debug) console.log("enterCreate_collection: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#create_collection.
  exitCreate_collection(ctx) {
    if (debug) console.log("exitCreate_collection: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#drop_collection.
  enterDrop_collection(ctx) {
    if (debug) console.log("enterDrop_collection: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#drop_collection.
  exitDrop_collection(ctx) {
    if (debug) console.log("exitDrop_collection: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#flush_collection.
  enterFlush_collection(ctx) {
    if (debug) console.log("enterFlush_collection: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#flush_collection.
  exitFlush_collection(ctx) {
    if (debug) console.log("exitFlush_collection: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#flush_or_truncate.
  enterFlush_or_truncate(ctx) {
    if (debug) console.log("enterFlush_or_truncate: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#flush_or_truncate.
  exitFlush_or_truncate(ctx) {
    if (debug) console.log("exitFlush_or_truncate: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#create_index.
  enterCreate_index(ctx) {
    if (debug) console.log("enterCreate_index: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#create_index.
  exitCreate_index(ctx) {
    if (debug) console.log("exitCreate_index: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_primary_name.
  enterOpt_primary_name(ctx) {
    if (debug) console.log("enterOpt_primary_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_primary_name.
  exitOpt_primary_name(ctx) {
    if (debug) console.log("exitOpt_primary_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#index_name.
  enterIndex_name(ctx) {
    if (debug) console.log("enterIndex_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#index_name.
  exitIndex_name(ctx) {
    if (debug) console.log("exitIndex_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_index_name.
  enterOpt_index_name(ctx) {
    if (debug) console.log("enterOpt_index_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_index_name.
  exitOpt_index_name(ctx) {
    if (debug) console.log("exitOpt_index_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#named_keyspace_ref.
  enterNamed_keyspace_ref(ctx) {
    if (debug) console.log("enterNamed_keyspace_ref: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#named_keyspace_ref.
  exitNamed_keyspace_ref(ctx) {
    if (debug) console.log("exitNamed_keyspace_ref: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#simple_named_keyspace_ref.
  enterSimple_named_keyspace_ref(ctx) {
    if (debug) console.log("enterSimple_named_keyspace_ref: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#simple_named_keyspace_ref.
  exitSimple_named_keyspace_ref(ctx) {
    if (debug) console.log("exitSimple_named_keyspace_ref: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#named_scope_ref.
  enterNamed_scope_ref(ctx) {
    if (debug) console.log("enterNamed_scope_ref: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#named_scope_ref.
  exitNamed_scope_ref(ctx) {
    if (debug) console.log("exitNamed_scope_ref: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#index_partition.
  enterIndex_partition(ctx) {
    if (debug) console.log("enterIndex_partition: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#index_partition.
  exitIndex_partition(ctx) {
    if (debug) console.log("exitIndex_partition: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_index_using.
  enterOpt_index_using(ctx) {
    if (debug) console.log("enterOpt_index_using: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_index_using.
  exitOpt_index_using(ctx) {
    if (debug) console.log("exitOpt_index_using: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#index_using.
  enterIndex_using(ctx) {
    if (debug) console.log("enterIndex_using: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#index_using.
  exitIndex_using(ctx) {
    if (debug) console.log("exitIndex_using: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_index_with.
  enterOpt_index_with(ctx) {
    if (debug) console.log("enterOpt_index_with: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_index_with.
  exitOpt_index_with(ctx) {
    if (debug) console.log("exitOpt_index_with: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#index_with.
  enterIndex_with(ctx) {
    if (debug) console.log("enterIndex_with: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#index_with.
  exitIndex_with(ctx) {
    if (debug) console.log("exitIndex_with: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#index_terms.
  enterIndex_terms(ctx) {
    if (debug) console.log("enterIndex_terms: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#index_terms.
  exitIndex_terms(ctx) {
    if (debug) console.log("exitIndex_terms: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#index_term.
  enterIndex_term(ctx) {
    if (debug) console.log("enterIndex_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#index_term.
  exitIndex_term(ctx) {
    if (debug) console.log("exitIndex_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#index_term_expr.
  enterIndex_term_expr(ctx) {
    if (debug) console.log("enterIndex_term_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#index_term_expr.
  exitIndex_term_expr(ctx) {
    if (debug) console.log("exitIndex_term_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#index_expr.
  enterIndex_expr(ctx) {
    if (debug) console.log("enterIndex_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#index_expr.
  exitIndex_expr(ctx) {
    if (debug) console.log("exitIndex_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#all.
  enterAll(ctx) {
    if (debug) console.log("enterAll: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#all.
  exitAll(ctx) {  if (debug) console.log("exitAll: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#index_where.
  enterIndex_where(ctx) {
    if (debug) console.log("enterIndex_where: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#index_where.
  exitIndex_where(ctx) {
    if (debug) console.log("exitIndex_where: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_ikattr.
  enterOpt_ikattr(ctx) {
    if (debug) console.log("enterOpt_ikattr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_ikattr.
  exitOpt_ikattr(ctx) {
    if (debug) console.log("exitOpt_ikattr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#ikattr.
  enterIkattr(ctx) {
    if (debug) console.log("enterIkattr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#ikattr.
  exitIkattr(ctx) {
    if (debug) console.log("exitIkattr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#drop_index.
  enterDrop_index(ctx) {
    if (debug) console.log("enterDrop_index: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#drop_index.
  exitDrop_index(ctx) {
    if (debug) console.log("exitDrop_index: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#alter_index.
  enterAlter_index(ctx) {
    if (debug) console.log("enterAlter_index: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#alter_index.
  exitAlter_index(ctx) {
    if (debug) console.log("exitAlter_index: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#build_index.
  enterBuild_index(ctx) {
    if (debug) console.log("enterBuild_index: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#build_index.
  exitBuild_index(ctx) {
    if (debug) console.log("exitBuild_index: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#create_function.
  enterCreate_function(ctx) {
    if (debug) console.log("enterCreate_function: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#create_function.
  exitCreate_function(ctx) {
    if (debug) console.log("exitCreate_function: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_replace.
  enterOpt_replace(ctx) {
    if (debug) console.log("enterOpt_replace: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_replace.
  exitOpt_replace(ctx) {
    if (debug) console.log("exitOpt_replace: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#func_name.
  enterFunc_name(ctx) {
    if (debug) console.log("enterFunc_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#func_name.
  exitFunc_name(ctx) {
    if (debug) console.log("exitFunc_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#short_func_name.
  enterShort_func_name(ctx) {
    if (debug) console.log("enterShort_func_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#short_func_name.
  exitShort_func_name(ctx) {
    if (debug) console.log("exitShort_func_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#long_func_name.
  enterLong_func_name(ctx) {
    if (debug) console.log("enterLong_func_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#long_func_name.
  exitLong_func_name(ctx) {
    if (debug) console.log("exitLong_func_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#parm_list.
  enterParm_list(ctx) {
    if (debug) console.log("enterParm_list: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#parm_list.
  exitParm_list(ctx) {
    if (debug) console.log("exitParm_list: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#parameter_terms.
  enterParameter_terms(ctx) {
    if (debug) console.log("enterParameter_terms: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#parameter_terms.
  exitParameter_terms(ctx) {
    if (debug) console.log("exitParameter_terms: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#func_body.
  enterFunc_body(ctx) {
    if (debug) console.log("enterFunc_body: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#func_body.
  exitFunc_body(ctx) {
    if (debug) console.log("exitFunc_body: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#drop_function.
  enterDrop_function(ctx) {
    if (debug) console.log("enterDrop_function: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#drop_function.
  exitDrop_function(ctx) {
    if (debug) console.log("exitDrop_function: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#execute_function.
  enterExecute_function(ctx) {
    if (debug) console.log("enterExecute_function: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#execute_function.
  exitExecute_function(ctx) {
    if (debug) console.log("exitExecute_function: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#update_statistics.
  enterUpdate_statistics(ctx) {
    if (debug) console.log("enterUpdate_statistics: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#update_statistics.
  exitUpdate_statistics(ctx) {
    if (debug) console.log("exitUpdate_statistics: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_for.
  enterOpt_for(ctx) {
    if (debug) console.log("enterOpt_for: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_for.
  exitOpt_for(ctx) {
    if (debug) console.log("exitOpt_for: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#update_stat_terms.
  enterUpdate_stat_terms(ctx) {
    if (debug) console.log("enterUpdate_stat_terms: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#update_stat_terms.
  exitUpdate_stat_terms(ctx) {
    if (debug) console.log("exitUpdate_stat_terms: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#update_stat_term.
  enterUpdate_stat_term(ctx) {
    if (debug) console.log("enterUpdate_stat_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#update_stat_term.
  exitUpdate_stat_term(ctx) {
    if (debug) console.log("exitUpdate_stat_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#path.
  enterPath(ctx) {
    if (debug) console.log("enterPath: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#path.
  exitPath(ctx) {
    if (debug) console.log("exitPath: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#expr.
  enterExpr(ctx) {
    if (debug) console.log("enterExpr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#expr.
  exitExpr(ctx) {
    let expr = ctx.expr();
    let c_expr = ctx.c_expr();
    let DOT = ctx.DOT();
    let IDENT = ctx.IDENT();
    let LBRACKET = ctx.LBRACKET();

    if (DOT && IDENT)
      this.currentParseResult.path_expr.push(IDENT.getText());
    if (LBRACKET)
      this.currentParseResult.path_expr.push('[]');
    if (debug) console.log("exitExpr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#valued.
  enterValued(ctx) {
    if (debug) console.log("enterValued: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#valued.
  exitValued(ctx) {
    if (debug) console.log("exitValued: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#c_expr.
  enterC_expr(ctx) {
    if (debug) console.log("enterC_expr: " + ctxToString(ctx));
  }


  // Exit a parse tree produced by n1qlParser#c_expr.
  exitC_expr(ctx) {
    var IDENT = ctx.IDENT();
    var IDENT_ICASE = ctx.IDENT_ICASE();
    var SELF = ctx.SELF();
    if (debug) console.log("exitC_expr: " + ctxToString(ctx));
    // whenever we see an IDENT, it is a field name used in an expression
    if (IDENT || IDENT_ICASE) {
      this.currentParseResult.newPath(ctx.getText());
    }
  }


  // Enter a parse tree produced by n1qlParser#b_expr.
  enterB_expr(ctx) {
    if (debug) console.log("enterB_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#b_expr.
  exitB_expr(ctx) {
    if (debug) console.log("exitB_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#literal.
  enterLiteral(ctx) {
    if (debug) console.log("enterLiteral: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#literal.
  exitLiteral(ctx) {
    if (debug) console.log("exitLiteral: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#construction_expr.
  enterConstruction_expr(ctx) {
    if (debug) console.log("enterConstruction_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#construction_expr.
  exitConstruction_expr(ctx) {
    if (debug) console.log("exitConstruction_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#object.
  enterObject(ctx) {
    if (debug) console.log("enterObject: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#object.
  exitObject(ctx) {
    if (debug) console.log("exitObject: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_members.
  enterOpt_members(ctx) {
    if (debug) console.log("enterOpt_members: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_members.
  exitOpt_members(ctx) {
    if (debug) console.log("exitOpt_members: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#members.
  enterMembers(ctx) {
    if (debug) console.log("enterMembers: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#members.
  exitMembers(ctx) {
    if (debug) console.log("exitMembers: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#member.
  enterMember(ctx) {
    if (debug) console.log("enterMember: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#member.
  exitMember(ctx) {
    if (debug) console.log("exitMember: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#array.
  enterArray(ctx) {
    if (debug) console.log("enterArray: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#array.
  exitArray(ctx) {
    if (debug) console.log("exitArray: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_exprs.
  enterOpt_exprs(ctx) {
    if (debug) console.log("enterOpt_exprs: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_exprs.
  exitOpt_exprs(ctx) {
    if (debug) console.log("exitOpt_exprs: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#exprs.
  enterExprs(ctx) {
    if (debug) console.log("enterExprs: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#exprs.
  exitExprs(ctx) {
    if (debug) console.log("exitExprs: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#param_expr.
  enterParam_expr(ctx) {
    if (debug) console.log("enterParam_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#param_expr.
  exitParam_expr(ctx) {
    if (debug) console.log("exitParam_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#case_expr.
  enterCase_expr(ctx) {
    if (debug) console.log("enterCase_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#case_expr.
  exitCase_expr(ctx) {
    if (debug) console.log("exitCase_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#simple_or_searched_case.
  enterSimple_or_searched_case(ctx) {
    if (debug) console.log("enterSimple_or_searched_case: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#simple_or_searched_case.
  exitSimple_or_searched_case(ctx) {
    if (debug) console.log("exitSimple_or_searched_case: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#simple_case.
  enterSimple_case(ctx) {
    if (debug) console.log("enterSimple_case: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#simple_case.
  exitSimple_case(ctx) {
    if (debug) console.log("exitSimple_case: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#when_thens.
  enterWhen_thens(ctx) {
    if (debug) console.log("enterWhen_thens: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#when_thens.
  exitWhen_thens(ctx) {
    if (debug) console.log("exitWhen_thens: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#searched_case.
  enterSearched_case(ctx) {
    if (debug) console.log("enterSearched_case: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#searched_case.
  exitSearched_case(ctx) {
    if (debug) console.log("exitSearched_case: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_else.
  enterOpt_else(ctx) {
    if (debug) console.log("enterOpt_else: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_else.
  exitOpt_else(ctx) {
    if (debug) console.log("exitOpt_else: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#function_expr.
  enterFunction_expr(ctx) {
    if (debug) console.log("enterFunction_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#function_expr.
  exitFunction_expr(ctx) {
    if (debug) console.log("exitFunction_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#function_name.
  enterFunction_name(ctx) {
    if (debug) console.log("enterFunction_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#function_name.
  exitFunction_name(ctx) {
    if (debug) console.log("exitFunction_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#collection_expr.
  enterCollection_expr(ctx) {
    if (debug) console.log("enterCollection_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#collection_expr.
  exitCollection_expr(ctx) {
    if (debug) console.log("exitCollection_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#collection_cond.
  enterCollection_cond(ctx) {
    if (debug) console.log("enterCollection_cond: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#collection_cond.
  exitCollection_cond(ctx) {
    if (debug) console.log("exitCollection_cond: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#coll_bindings.
  enterColl_bindings(ctx) {
    if (debug) console.log("enterColl_bindings: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#coll_bindings.
  exitColl_bindings(ctx) {
    if (debug) console.log("exitColl_bindings: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#coll_binding.
  enterColl_binding(ctx) {
    if (debug) console.log("enterColl_binding: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#coll_binding.
  exitColl_binding(ctx) {
    if (debug) console.log("exitColl_binding: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#satisfies.
  enterSatisfies(ctx) {
    if (debug) console.log("enterSatisfies: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#satisfies.
  exitSatisfies(ctx) {
    if (debug) console.log("exitSatisfies: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#collection_xform.
  enterCollection_xform(ctx) {
    if (debug) console.log("enterCollection_xform: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#collection_xform.
  exitCollection_xform(ctx) {
    if (debug) console.log("exitCollection_xform: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#paren_expr.
  enterParen_expr(ctx) {
    if (debug) console.log("enterParen_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#paren_expr.
  exitParen_expr(ctx) {
    if (debug) console.log("exitParen_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#subquery_expr.
  enterSubquery_expr(ctx) {
    if (debug) console.log("enterSubquery_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#subquery_expr.
  exitSubquery_expr(ctx) {
    if (debug) console.log("exitSubquery_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#expr_input.
  enterExpr_input(ctx) {
    if (debug) console.log("enterExpr_input: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#expr_input.
  exitExpr_input(ctx) {
    if (debug) console.log("exitExpr_input: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#all_expr.
  enterAll_expr(ctx) {
    if (debug) console.log("enterAll_expr: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#all_expr.
  exitAll_expr(ctx) {
    if (debug) console.log("exitAll_expr: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_window_clause.
  enterOpt_window_clause(ctx) {
    if (debug) console.log("enterOpt_window_clause: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_window_clause.
  exitOpt_window_clause(ctx) {
    if (debug) console.log("exitOpt_window_clause: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#window_list.
  enterWindow_list(ctx) {
    if (debug) console.log("enterWindow_list: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#window_list.
  exitWindow_list(ctx) {
    if (debug) console.log("exitWindow_list: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#window_term.
  enterWindow_term(ctx) {
    if (debug) console.log("enterWindow_term: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#window_term.
  exitWindow_term(ctx) {
    if (debug) console.log("exitWindow_term: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#window_specification.
  enterWindow_specification(ctx) {
    if (debug) console.log("enterWindow_specification: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#window_specification.
  exitWindow_specification(ctx) {
    if (debug) console.log("exitWindow_specification: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_window_name.
  enterOpt_window_name(ctx) {
    if (debug) console.log("enterOpt_window_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_window_name.
  exitOpt_window_name(ctx) {
    if (debug) console.log("exitOpt_window_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_window_partition.
  enterOpt_window_partition(ctx) {
    if (debug) console.log("enterOpt_window_partition: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_window_partition.
  exitOpt_window_partition(ctx) {
    if (debug) console.log("exitOpt_window_partition: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_window_frame.
  enterOpt_window_frame(ctx) {
    if (debug) console.log("enterOpt_window_frame: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_window_frame.
  exitOpt_window_frame(ctx) {
    if (debug) console.log("exitOpt_window_frame: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#window_frame_modifier.
  enterWindow_frame_modifier(ctx) {
    if (debug) console.log("enterWindow_frame_modifier: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#window_frame_modifier.
  exitWindow_frame_modifier(ctx) {
    if (debug) console.log("exitWindow_frame_modifier: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_window_frame_exclusion.
  enterOpt_window_frame_exclusion(ctx) {
    if (debug) console.log("enterOpt_window_frame_exclusion: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_window_frame_exclusion.
  exitOpt_window_frame_exclusion(ctx) {
    if (debug) console.log("exitOpt_window_frame_exclusion: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#window_frame_extents.
  enterWindow_frame_extents(ctx) {
    if (debug) console.log("enterWindow_frame_extents: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#window_frame_extents.
  exitWindow_frame_extents(ctx) {
    if (debug) console.log("exitWindow_frame_extents: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#window_frame_extent.
  enterWindow_frame_extent(ctx) {
    if (debug) console.log("enterWindow_frame_extent: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#window_frame_extent.
  exitWindow_frame_extent(ctx) {
    if (debug) console.log("exitWindow_frame_extent: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#window_frame_valexpr_modifier.
  enterWindow_frame_valexpr_modifier(ctx) {
    if (debug) console.log("enterWindow_frame_valexpr_modifier: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#window_frame_valexpr_modifier.
  exitWindow_frame_valexpr_modifier(ctx) {
    if (debug) console.log("exitWindow_frame_valexpr_modifier: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_nulls_treatment.
  enterOpt_nulls_treatment(ctx) {
    if (debug) console.log("enterOpt_nulls_treatment: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_nulls_treatment.
  exitOpt_nulls_treatment(ctx) {
    if (debug) console.log("exitOpt_nulls_treatment: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#nulls_treatment.
  enterNulls_treatment(ctx) {
    if (debug) console.log("enterNulls_treatment: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#nulls_treatment.
  exitNulls_treatment(ctx) {
    if (debug) console.log("exitNulls_treatment: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_from_first_last.
  enterOpt_from_first_last(ctx) {
    if (debug) console.log("enterOpt_from_first_last: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_from_first_last.
  exitOpt_from_first_last(ctx) {
    if (debug) console.log("exitOpt_from_first_last: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#agg_quantifier.
  enterAgg_quantifier(ctx) {
    if (debug) console.log("enterAgg_quantifier: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#agg_quantifier.
  exitAgg_quantifier(ctx) {
    if (debug) console.log("exitAgg_quantifier: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_filter.
  enterOpt_filter(ctx) {
    if (debug) console.log("enterOpt_filter: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_filter.
  exitOpt_filter(ctx) {
    if (debug) console.log("exitOpt_filter: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_window_function.
  enterOpt_window_function(ctx) {
    if (debug) console.log("enterOpt_window_function: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_window_function.
  exitOpt_window_function(ctx) {
    if (debug) console.log("exitOpt_window_function: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#window_function_details.
  enterWindow_function_details(ctx) {
    if (debug) console.log("enterWindow_function_details: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#window_function_details.
  exitWindow_function_details(ctx) {
    if (debug) console.log("exitWindow_function_details: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#start_transaction.
  enterStart_transaction(ctx) {
    if (debug) console.log("enterStart_transaction: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#start_transaction.
  exitStart_transaction(ctx) {
    if (debug) console.log("exitStart_transaction: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#commit_transaction.
  enterCommit_transaction(ctx) {
    if (debug) console.log("enterCommit_transaction: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#commit_transaction.
  exitCommit_transaction(ctx) {
    if (debug) console.log("exitCommit_transaction: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#rollback_transaction.
  enterRollback_transaction(ctx) {
    if (debug) console.log("enterRollback_transaction: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#rollback_transaction.
  exitRollback_transaction(ctx) {
    if (debug) console.log("exitRollback_transaction: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#start_or_begin.
  enterStart_or_begin(ctx) {
    if (debug) console.log("enterStart_or_begin: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#start_or_begin.
  exitStart_or_begin(ctx) {
    if (debug) console.log("exitStart_or_begin: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_transaction.
  enterOpt_transaction(ctx) {
    if (debug) console.log("enterOpt_transaction: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_transaction.
  exitOpt_transaction(ctx) {
    if (debug) console.log("exitOpt_transaction: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#transaction.
  enterTransaction(ctx) {
    if (debug) console.log("enterTransaction: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#transaction.
  exitTransaction(ctx) {
    if (debug) console.log("exitTransaction: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_savepoint.
  enterOpt_savepoint(ctx) {
    if (debug) console.log("enterOpt_savepoint: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_savepoint.
  exitOpt_savepoint(ctx) {
    if (debug) console.log("exitOpt_savepoint: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#savepoint_name.
  enterSavepoint_name(ctx) {
    if (debug) console.log("enterSavepoint_name: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#savepoint_name.
  exitSavepoint_name(ctx) {
    if (debug) console.log("exitSavepoint_name: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#opt_isolation_level.
  enterOpt_isolation_level(ctx) {
    if (debug) console.log("enterOpt_isolation_level: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#opt_isolation_level.
  exitOpt_isolation_level(ctx) {
    if (debug) console.log("exitOpt_isolation_level: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#isolation_level.
  enterIsolation_level(ctx) {
    if (debug) console.log("enterIsolation_level: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#isolation_level.
  exitIsolation_level(ctx) {
    if (debug) console.log("exitIsolation_level: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#isolation_val.
  enterIsolation_val(ctx) {
    if (debug) console.log("enterIsolation_val: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#isolation_val.
  exitIsolation_val(ctx) {
    if (debug) console.log("exitIsolation_val: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#set_transaction_isolation.
  enterSet_transaction_isolation(ctx) {
    if (debug) console.log("enterSet_transaction_isolation: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#set_transaction_isolation.
  exitSet_transaction_isolation(ctx) {
    if (debug) console.log("exitSet_transaction_isolation: " + ctxToString(ctx));
  }


  // Enter a parse tree produced by n1qlParser#savepoint.
  enterSavepoint(ctx) {
    if (debug) console.log("enterSavepoint: " + ctxToString(ctx));
  }

  // Exit a parse tree produced by n1qlParser#savepoint.
  exitSavepoint(ctx) {
    if (debug) console.log("exitSavepoint: " + ctxToString(ctx));
  }


}

class MyParseCancellationException extends Error{
  constructor(line,column,message) {
    super()
    this.line = line;
    this.column = column;
    this.message = message;
    Error.captureStackTrace(this, MyParseCancellationException);
  }
}

class myErrorListener extends antlr4.error.ErrorListener {
  constructor() {
    super();
  }

  syntaxError(recognizer, symbol, line, column, message, payload) {
    console.log("\n\n\nGot error: " + symbol + "," + line + "," + column + "," + message + "," + payload);
    throw new MyParseCancellationException(line,column,message);
  }
}

class myParseResult {
  constructor() {
    this.path_expr = [];
    this.all_paths_used = [];
    this.stmt_category = 0; // explain, prepare, advise, execute, or regular stmtm
    this.stmt = 0; // top level statement: select, update, delete, merge, upsert
  }

  newPath(pathElement) {
    if (this.path_expr.length > 0)
      this.all_paths_used.push(this.path_expr);

    this.path_expr = [pathElement];
  }

  finish() {
    // output any outstanding path expressions
    if (this.path_expr.length > 0) {
      this.all_paths_used.push(this.path_expr);
      this.path_expr = [];
    }

    switch (this.stmt_category) {
      case n1qlParser.RULE_stmt: this.isStatement = true; break;
      case n1qlParser.RULE_advise: this.isAdvise = true; break;
      case n1qlParser.RULE_explain: this.isExplain = true; break;
      case n1qlParser.RULE_prepare: this.isPrepare = true; break;
      case n1qlParser.RULE_execute: this.isExecute = true; break;
    }

    switch (this.stmt) {
      case n1qlParser.RULE_select_stmt: this.isSelect = true; break;
      case n1qlParser.RULE_insert_stmt: this.isInsert = true; break;
      case n1qlParser.RULE_update_stmt: this.isUpdate = true; break;
      case n1qlParser.RULE_upsert_stmt: this.isUpsert = true; break;
      case n1qlParser.RULE_delete_stmt: this.isDelete = true; break;
      case n1qlParser.RULE_merge_stmt: this.isMerge = true; break;
      case n1qlParser.RULE_index_stmt: this.isIndex = true; break;
      case n1qlParser.RULE_scope_stmt: this.isScope = true; break;
      case n1qlParser.RULE_collection_stmt: this.isCollection = true; break;

    }

  }
}


//
// Parse a string containing one or more N1QL queries (separated by semicolons)
//
// returns an array of results, which are either a myParseResult or a parse error
//

function parse(n1ql) {
  var currentParseResults = [];
  var chars = new antlr4.InputStream(n1ql);
  var lexer = new n1qlLexer(chars);
  var tokens = new CommonTokenStream(lexer);
  var parser = new n1qlParser(tokens);
  var errorListener = new myErrorListener();
  lexer.removeErrorListeners();
  parser.removeErrorListeners();
  lexer.addErrorListener(errorListener);
  parser.addErrorListener(errorListener);

  try {
    // loop over the text until we hit EOF, getting a result for as many queries as exist there
    while (!tokens.fetchedEOF) {
      var currentParseResult = new myParseResult();
      var tree = parser.input();
      var listener = new myN1qlListener(currentParseResult);
      antlr4.tree.ParseTreeWalker.DEFAULT.walk(listener, tree);
      currentParseResult.finish();
      currentParseResults.push(currentParseResult);
    }
  } catch (error) {
    console.log(error.message);
    console.log(n1ql.substring(0,error.column) + '^^^' + n1ql.substring(error.column+1));
    currentParseResults.push(error);
  }

  return(currentParseResults);
}

var N1qlParser = {
  parse: parse,
};

export default N1qlParser;